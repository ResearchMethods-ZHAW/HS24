[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Methods HS24",
    "section": "",
    "text": "Willkommen\nDas Modul „Research Methods” vermittelt vertiefte Methodenkompetenzen für praxisorientiertes und angewandtes wissenschaftliches Arbeiten im Fachbereich „Umwelt und Natürliche Ressourcen” auf MSc-Niveau. Die Studierenden erarbeiten sich vertiefte Methodenkompetenzen für die analytische Betrachtung der Zusammenhänge im Gesamtsystem „Umwelt und Natürliche Ressourcen”. Die Studierenden erlernen die methodischen Kompetenzen, auf denen die nachfolgenden Module im MSc Programm UNR aufbauen. Das Modul vermittelt einerseits allgemeine, fächerübergreifende methodische Kompetenzen (z.B. Wissenschaftstheorie, computer-gestützte Datenverarbeitung und Statistik).\nHier werden die Unterlagen für die R-Übungsteile bereitgestellt. Es werden sukzessive sowohl Demo-Files, Aufgabenstellungen und Lösungen veröffentlicht.",
    "crumbs": [
      "Willkommen"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Vorbereitung.html",
    "href": "prepro/Prepro1_Vorbereitung.html",
    "title": "Vorbereitung",
    "section": "",
    "text": "R ist ohne Zusatzpackete, sogenannte “Packages” nicht mehr denkbar. Die allermeisten Packages werden auf CRAN gehostet und können leicht mittels install.packages() installiert werden. Allerdings prüft R dabei nicht, ob das Package bereits vorhanden ist oder nicht: Auch bereits installierte Packages werden nochmal installiert, was unter Umständen ziemlich unpraktisch sein kann.\nAlternativ zu install.packages können Packages auch mittels der Funktion p_install installiert werden. In der Funktion p_install wird zuerst geprüft, ob das Package vorhanden ist. Ist das jeweilige Package vorhanden, wird auf eine Installation verzichtet (bei force = FALSE).\nDie Funktion p_install wird von dem Package pacman zur Verfügung gestellt. Dieses Package muss initial ganz klassisch mit install.packages installiert werden. Um die Funktion p_install aus pacman zu verwenden, muss das Package nach der installation mittels library(\"pacman\") geladen werden.\n\n\n# so werden packages klassischerweise installiert:\ninstall.packages(\"lubridate\")\n\n# so werden sie in die aktuelle Session geladen:\nlibrary(lubridate)\n\n# nun kann eine Funktion aus dem geladenen Package verwendet werden\n# (die Funktion \"now()\" war vorher nicht verfübar)\nnow()\n\n# so werden packages mit \"pacman installiert:\nlibrary(pacman)\np_install(\"dplyr\", character.only = TRUE, force = FALSE)\n\n\n\n\n\n\n\nWichtig\n\n\n\nDie häufigste Verwirrung von Einsteigern liegt in der Verwendung von Packages. Dieses Kapitel unbedingt vormerken und bei Bedarf nochmal lesen.\n\n\nIm Rahmen von Prepro 1 - 3 werden wir folgende Packages brauchen: dplyr, ggplot2, lubridate, readr und tidyr. Wir empfehlen, diese bereits vor der ersten Lektion mit pacman zu installieren (s.u.).\n\nlibrary(pacman)\np_install(\"dplyr\", \"ggplot2\", \"lubridate\", \"readr\", \"tidyr\", \n  character.only = TRUE,  force = FALSE)\n  \n# character.only = TRUE: die Packages werden in Quotes angegeben\n# force = FALSE:         die Packages werden nur installiert, \n#                        wenn noch nicht vorhanden",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Vorbereitung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Demo.html",
    "href": "prepro/Prepro1_Demo.html",
    "title": "Prepro 1: Demo",
    "section": "",
    "text": "Datentypen",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Prepro 1: Demo</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Demo.html#footnotes",
    "href": "prepro/Prepro1_Demo.html#footnotes",
    "title": "Prepro 1: Demo",
    "section": "",
    "text": "ordered = T kann nur bei der Funktion factor() spezifiziert werden, nicht bei as.factor(). Ansonsten sind factor() und as.factor() sehr ähnlich.↩︎",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Prepro 1: Demo</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html",
    "href": "prepro/Prepro1_Uebung.html",
    "title": "PrePro 1: Übung",
    "section": "",
    "text": "Arbeiten mit RStudio “Project”\nWir empfehlen die Verwendung von “Projects” innerhalb von RStudio. RStudio legt für jedes Projekt dann einen Ordner an, in welches die Projekt-Datei abgelegt wird (Dateiendung .Rproj). Sollen innerhalb des Projekts dann R-Skripts geladen oder erzeugt werden, werden diese dann auch im angelegten Ordner abgelegt. Mehr zu RStudio Projects findet ihr hier.\nDas Verwenden von Projects bringt verschiedene Vorteile, wie zum Beispiel:",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#arbeiten-mit-rstudio-project",
    "href": "prepro/Prepro1_Uebung.html#arbeiten-mit-rstudio-project",
    "title": "PrePro 1: Übung",
    "section": "",
    "text": "Festlegen der Working Directory ohne die Verwendung des expliziten Pfades (setwd()). Das ist sinnvoll, da sich dieser Pfad ändern kann (Zusammenarbeit mit anderen Usern, Ausführung des Scripts zu einem späteren Zeitpunkt)\nAutomatisches Zwischenspeichern geöffneter Scripts und Wiederherstellung der geöffneten Scripts bei der nächsten Session\nFestlegen verschiedener projektspezifischer Optionen\nVerwendung von Versionsverwaltungssystemen (z.B. git)\n\n\n\n\n\n\n\nPrüfungsrelevant\n\n\n\nDie korrekte Verwendung von RStudio Projects und relativen Pfaden wird an der praktischen Prüfung vorausgesetzt!",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-1",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-1",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nErstelle eine data.frame mit nachstehenden Daten.\n\n\n\n\n\nTierart\nAnzahl\nGewicht\nGeschlecht\nBeschreibung\n\n\n\n\nFuchs\n2\n4.4\nm\nRötlich\n\n\nBär\n5\n40.3\nf\nBraun, gross\n\n\nHase\n1\n1.1\nm\nklein, mit langen Ohren\n\n\nElch\n3\n120.0\nm\nLange Beine, Schaufelgeweih",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-2",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-2",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nWas für Datentypen wurden in der letzten Aufgabe automatisch angenommen? Ermittle diese mit str() und prüfe, ob diese sinnvoll sind und wandle um wo nötig.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-3",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-3",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nNutze die Spalte Gewicht um die Tiere in 3 Gewichtskategorien einzuteilen:\n\nleicht: &lt; 5kg\nmittel: 5 - 100 kg\nschwer: &gt; 100kg\n\nDas Resultat:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTierart\nAnzahl\nGewicht\nGeschlecht\nBeschreibung\nGewichtsklasse\n\n\n\n\nFuchs\n2\n4.4\nm\nRötlich\nleicht\n\n\nBär\n5\n40.3\nf\nBraun, gross\nmittel\n\n\nHase\n1\n1.1\nm\nklein, mit langen Ohren\nleicht\n\n\nElch\n3\n120.0\nm\nLange Beine, Schaufelgeweih\nschwer",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-4",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-4",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nAuf Moodle findest du ein Zip-Files mit dem Namen prepro.zip. Lade das File herunter und entpacke es in deinem Projektordner. Importiere die Datei weather.csv. Falls du dafür das RStudio GUI verwendest, speichere den Import-Befehl in deinem R-Script ab. Bitte verwende einen relativen Pfad (also kein Pfad der mit C:/, ~/ o.ä. beginnt).)\n\n\n\n\n\n\nHinweis\n\n\n\nWir nutzen readr um csvs zu importieren und verwenden die Funktion read_delim (mit underscore) als alternative zu read.csv oder read.delim (mit Punkt). Das ist eine persönliche Präferenz1, es ist euch überlassen welche Funktion ihr verwendet. Beachtet, dass die beiden Funktionen leicht andere Parameter erwarten.\n\n\n\n\n\n\n\nstn\ntime\ntre200h0\n\n\n\n\nABO\n2000010100\n-2.6\n\n\nABO\n2000010101\n-2.5\n\n\nABO\n2000010102\n-3.1\n\n\nABO\n2000010103\n-2.4\n\n\nABO\n2000010104\n-2.5\n\n\nABO\n2000010105\n-3.0\n\n\nABO\n2000010106\n-3.7\n\n\nABO\n2000010107\n-4.4\n\n\nABO\n2000010108\n-4.1\n\n\nABO\n2000010109\n-4.1",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-5",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-5",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nSchau dir die Rückmeldung von read_delim()an. Sind die Daten korrekt interpretiert worden?",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-6",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-6",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 6",
    "text": "Aufgabe 6\nDie Spalte time ist eine Datum/Zeitangabe im Format JJJJMMTTHH (siehe meta.txt). Damit R dies als Datum-/Zeitangabe erkennt, müssen wir die Spalte in einem R-Format (POSIXct) einlesen und dabei R mitteilen, wie sie aktuell formatiert ist. Lies die Spalte mit as.POSIXct() ein und spezifiziere sowohl format wie auch tz.\n\n\n\n\n\n\nTipp\n\n\n\n\nWenn keine Zeitzone festgelegt wird, trifft as.POSIXct() eine Annahme (basierend auf Sys.timezone()). In unserem Fall handelt es sich aber um Werte in UTC (siehe metadata.csv)\nas.POSIXcterwartet character: Wenn du eine Fehlermeldung hast die 'origin' must be supplied (o.ä) heisst, hast du der Funktion vermutlich einen Numeric übergeben.\n\n\n\n\n\n\nDie neue Tabelle sollte so aussehen\n\n\nstn\ntime\ntre200h0\n\n\n\n\nABO\n2000-01-01 00:00:00\n-2.6\n\n\nABO\n2000-01-01 01:00:00\n-2.5\n\n\nABO\n2000-01-01 02:00:00\n-3.1\n\n\nABO\n2000-01-01 03:00:00\n-2.4\n\n\nABO\n2000-01-01 04:00:00\n-2.5\n\n\nABO\n2000-01-01 05:00:00\n-3.0\n\n\nABO\n2000-01-01 06:00:00\n-3.7\n\n\nABO\n2000-01-01 07:00:00\n-4.4\n\n\nABO\n2000-01-01 08:00:00\n-4.1\n\n\nABO\n2000-01-01 09:00:00\n-4.1",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-7",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-7",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 7",
    "text": "Aufgabe 7\nErstelle zwei neue Spalten mit Wochentag (Montag, Dienstag, etc) und Kalenderwoche. Verwende dazu die neu erstellte POSIXct-Spalte sowie eine geeignete Funktion aus lubridate.\n\n\n\n\n\nstn\ntime\ntre200h0\nwochentag\nkw\n\n\n\n\nABO\n2000-01-01 00:00:00\n-2.6\nSat\n1\n\n\nABO\n2000-01-01 01:00:00\n-2.5\nSat\n1\n\n\nABO\n2000-01-01 02:00:00\n-3.1\nSat\n1\n\n\nABO\n2000-01-01 03:00:00\n-2.4\nSat\n1\n\n\nABO\n2000-01-01 04:00:00\n-2.5\nSat\n1\n\n\nABO\n2000-01-01 05:00:00\n-3.0\nSat\n1\n\n\nABO\n2000-01-01 06:00:00\n-3.7\nSat\n1\n\n\nABO\n2000-01-01 07:00:00\n-4.4\nSat\n1\n\n\nABO\n2000-01-01 08:00:00\n-4.1\nSat\n1\n\n\nABO\n2000-01-01 09:00:00\n-4.1\nSat\n1",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-8",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-8",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 8",
    "text": "Aufgabe 8\nErstelle eine neue Spalte basierend auf die Temperaturwerte mit der Einteilung “kalt” (unter Null Grad) und “warm” (über Null Grad)\n\n\n\n\n\nstn\ntime\ntre200h0\nwochentag\nkw\ntemp_kat\n\n\n\n\nABO\n2000-01-01 00:00:00\n-2.6\nSat\n1\nkalt\n\n\nABO\n2000-01-01 01:00:00\n-2.5\nSat\n1\nkalt\n\n\nABO\n2000-01-01 02:00:00\n-3.1\nSat\n1\nkalt\n\n\nABO\n2000-01-01 03:00:00\n-2.4\nSat\n1\nkalt\n\n\nABO\n2000-01-01 04:00:00\n-2.5\nSat\n1\nkalt\n\n\nABO\n2000-01-01 05:00:00\n-3.0\nSat\n1\nkalt\n\n\nABO\n2000-01-01 06:00:00\n-3.7\nSat\n1\nkalt\n\n\nABO\n2000-01-01 07:00:00\n-4.4\nSat\n1\nkalt\n\n\nABO\n2000-01-01 08:00:00\n-4.1\nSat\n1\nkalt\n\n\nABO\n2000-01-01 09:00:00\n-4.1\nSat\n1\nkalt",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#footnotes",
    "href": "prepro/Prepro1_Uebung.html#footnotes",
    "title": "PrePro 1: Übung",
    "section": "",
    "text": "Vorteile von read_delim gegenüber read.csv: https://stackoverflow.com/a/60374974/4139249↩︎",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>PrePro 1: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Demo.html",
    "href": "prepro/Prepro2_Demo.html",
    "title": "Prepro 2: Demo",
    "section": "",
    "text": "Piping\nGegeben ist ein character string (diary). Wir wollen aus diesem Text die Temperaturangabe aus dem String extrahieren und danach den Wert von Kelvin in Celsius nach der folgenden Formel umwandeln und zum Schluss den Mittelwert über all diese Werte berechnen.\n\\[°C = K - 273.15\\]\ndiary &lt;- c(\n  \"The temperature is 310° Kelvin\",\n  \"The temperature is 322° Kelvin\",\n  \"The temperature is 410° Kelvin\"\n)\n\ndiary\n## [1] \"The temperature is 310° Kelvin\" \"The temperature is 322° Kelvin\"\n## [3] \"The temperature is 410° Kelvin\"\nDazu brauchen wir die Funktion substr(), welche aus einem character einen Teil “raus schnipseln” kann.\n# Wenn die Buchstaben einzelne _Elemente_ eines Vektors wären, würden wir diese\n# folgendermassen subsetten:\n\ncharvec1 &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")\ncharvec1[4:6]\n## [1] \"d\" \"e\" \"f\"\n\n# Aber wenn diese in einem einzigen character gespeichert sind, brauchen wir substr:\ncharvec2 &lt;- \"abcdefgh\"\nsubstr(charvec2, 4, 6)\n## [1] \"def\"\nZudem nutzen haben wir eine Hilfsfunktion subtrahieren, welche zwei Werte annimmt, den minuend und den subtrahend:\nsubtrahieren &lt;- function(minuend, subtrahend) {\n  minuend - subtrahend\n}\n\nsubtrahieren(10, 4)\n## [1] 6\nÜbersetzt in R-Code entsteht folgende Operation:\noutput &lt;- mean(subtrahieren(as.numeric(substr(diary, 20, 22)), 273.15))\n#                                             \\_1_/\n#                                      \\________2__________/\n#                           \\___________________3___________/\n#              \\________________________________4__________________/\n#         \\_____________________________________5____________________/\n\n# 1. Nimm diary\n# 2. Extrahiere auf jeder Zeile die Werte 20 bis 22\n# 3. Konvertiere \"character\" zu \"numeric\"\n# 4. Subtrahiere 273.15\n# 5. Berechne den Mittlwert\nDie ganze Operation liest sich etwas leichter, wenn diese sequentiell notiert wird:\ntemp &lt;- substr(diary, 20, 22)      # 2\ntemp &lt;- as.numeric(temp)           # 3\ntemp &lt;- subtrahieren(temp, 273.15) # 4\noutput &lt;- mean(temp)               # 5\nUmständlich ist dabei einfach, dass die Zwischenresultate immer abgespeichert und in der darauf folgenden Operation wieder abgerufen werden müssen. Hier kommt “piping” ins Spiel: Mit “piping” wird der Output der einen Funktion der erste Parameter der darauf folgenden Funktion.\ndiary |&gt;                  # 1\n  substr(20, 22) |&gt;       # 2\n  as.numeric() |&gt;         # 3\n  subtrahieren(273.15) |&gt; # 4\n  mean()                  # 5\n## [1] 74.18333",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Prepro 2: Demo</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Demo.html#piping",
    "href": "prepro/Prepro2_Demo.html#piping",
    "title": "Prepro 2: Demo",
    "section": "",
    "text": "Wichtig\n\n\n\n\nder |&gt; Pipe Operator wurde erst in R 4.1 eingeführt\nNeben dem base R Pipe Operator existiert im Package magrittr ein sehr ähnlicher1 Pipe Operator: %&gt;%\nDie Tastenkombination Ctrl+Shift+M in RStudio fügt einen Pipe Operator ein.\nWelcher Pipe Operator |&gt; oder %&gt;% mit der obigen Tastenkombination eingeführt wird, kann über die RStudio Settings Tools → Global Options → Code → Häckchen setzen bei Use nativ pipe operator\nWir empfehlen die base-R Pipe |&gt; zu verwenden",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Prepro 2: Demo</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Demo.html#joins",
    "href": "prepro/Prepro2_Demo.html#joins",
    "title": "Prepro 2: Demo",
    "section": "Joins",
    "text": "Joins\n\nstudierende &lt;- data.frame(\n  Matrikel_Nr = c(100002, 100003, 200003),\n  Studi = c(\"Patrick\", \"Manuela\", \"Eva\"),\n  PLZ = c(8006, 8001, 8820)\n)\n\nstudierende\n##   Matrikel_Nr   Studi  PLZ\n## 1      100002 Patrick 8006\n## 2      100003 Manuela 8001\n## 3      200003     Eva 8820\n\nortschaften &lt;- data.frame(\n  PLZ = c(8003, 8006, 8810, 8820),\n  Ortsname = c(\"Zürich\", \"Zürich\", \"Horgen\", \"Wädenswil\")\n)\n\nortschaften\n##    PLZ  Ortsname\n## 1 8003    Zürich\n## 2 8006    Zürich\n## 3 8810    Horgen\n## 4 8820 Wädenswil\n\n\n# Load library\nlibrary(\"dplyr\")\n\ninner_join(studierende, ortschaften, by = \"PLZ\")\n##   Matrikel_Nr   Studi  PLZ  Ortsname\n## 1      100002 Patrick 8006    Zürich\n## 2      200003     Eva 8820 Wädenswil\n\nleft_join(studierende, ortschaften, by = \"PLZ\")\n##   Matrikel_Nr   Studi  PLZ  Ortsname\n## 1      100002 Patrick 8006    Zürich\n## 2      100003 Manuela 8001      &lt;NA&gt;\n## 3      200003     Eva 8820 Wädenswil\n\nright_join(studierende, ortschaften, by = \"PLZ\")\n##   Matrikel_Nr   Studi  PLZ  Ortsname\n## 1      100002 Patrick 8006    Zürich\n## 2      200003     Eva 8820 Wädenswil\n## 3          NA    &lt;NA&gt; 8003    Zürich\n## 4          NA    &lt;NA&gt; 8810    Horgen\n\nfull_join(studierende, ortschaften, by = \"PLZ\")\n##   Matrikel_Nr   Studi  PLZ  Ortsname\n## 1      100002 Patrick 8006    Zürich\n## 2      100003 Manuela 8001      &lt;NA&gt;\n## 3      200003     Eva 8820 Wädenswil\n## 4          NA    &lt;NA&gt; 8003    Zürich\n## 5          NA    &lt;NA&gt; 8810    Horgen\n\n\nstudierende &lt;- data.frame(\n  Matrikel_Nr = c(100002, 100003, 200003),\n  Studi = c(\"Patrick\", \"Manuela\", \"Pascal\"),\n  Wohnort = c(8006, 8001, 8006)\n)\n\nleft_join(studierende, ortschaften, by = c(\"Wohnort\" = \"PLZ\"))\n##   Matrikel_Nr   Studi Wohnort Ortsname\n## 1      100002 Patrick    8006   Zürich\n## 2      100003 Manuela    8001     &lt;NA&gt;\n## 3      200003  Pascal    8006   Zürich",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Prepro 2: Demo</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Demo.html#footnotes",
    "href": "prepro/Prepro2_Demo.html#footnotes",
    "title": "Prepro 2: Demo",
    "section": "",
    "text": "siehe https://stackoverflow.com/q/67633022/4139249↩︎",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Prepro 2: Demo</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html",
    "href": "prepro/Prepro2_Uebung_A.html",
    "title": "Prepro 2: Übung A",
    "section": "",
    "text": "Aufgabe 1\nLese die Wetterdaten von letzer Woche weather.csv (Quelle MeteoSchweiz) in R ein. Sorge dafür, dass die Spalten korrekt formatiert sind (stn als factor, time als POSIXct, tre200h0 als numeric.)",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prepro 2: Übung A</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-2",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-2",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nLese den Datensatz metadata.csv ebenfalls als csv ein.\n\n\n\n\n\n\nTipp\n\n\n\nWenn Umlaute und Sonderzeichen nicht korrekt dargestellt werden (z.B. das è in Genève), hat das vermutlich mit der Zeichencodierung zu tun. Das File ist aktuell in UTF-8 codiert. Wenn Umlaute nicht korrekt dargestellt werden, hat R diese Codierung nicht erkannt und sie muss in der Import-Funktion spezifitiert werden. Dies wird je nach verwendete import Funktion unterschiedlich gemacht:\n\nFunktionen aus dem Package readr: locale = locale(encoding = \"UTF-8\")\nBase-R Funktionen: fileEncoding = \"UTF-8\"\n\nWenn ihr die codierung eines Files nicht kennt, könnt wie folgt vorgehen: Anleitung für Windows, für Mac und für Linux.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prepro 2: Übung A</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-3",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-3",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nNun wollen wir den Datensatz wettermit den Informationen aus metadata anreichern. Uns interessiert aber nur das Stationskürzel, der Name, die x/y Koordinaten sowie die Meereshöhe, selektiere diese Spalten.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prepro 2: Übung A</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-4",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-4",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nJetzt kann metadata mit dem Datensatz wetter verbunden werden. Überlege dir, welcher Join dafür sinnvoll ist und mit welchem Attribut wir “joinen” können.\nNutze die Join-Möglichkeiten von dplyr (Hilfe via ?dplyr::join) um die Datensätze wetter und metadata zu verbinden.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prepro 2: Übung A</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-5",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-5",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nErstelle eine neue Spalte month welche den jeweiligen Monat (aus time) beinhaltet. Nutze dafür die Funktion lubridate::month().",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prepro 2: Übung A</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-6",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-6",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 6",
    "text": "Aufgabe 6\nBerechne mit der Spalte month die Durchschnittstemperatur pro Monat.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prepro 2: Übung A</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Uebung_B.html",
    "href": "prepro/Prepro2_Uebung_B.html",
    "title": "Prepro 2: Übung B",
    "section": "",
    "text": "Aufgabe 1\nGegeben sind die Daten von drei Sensoren (sensor1.csv, sensor2.csv, sensor3.csv). Lese die Datensätze ein.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prepro 2: Übung B</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Uebung_B.html#aufgabe-2",
    "href": "prepro/Prepro2_Uebung_B.html#aufgabe-2",
    "title": "Prepro 2: Übung B",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nErstelle aus den 3 Dataframes eine einzige Dataframe, die aussieht wie unten dargestellt. Nutze dafür zwei joins aus dplyr um 3 data.frames miteinander zu verbinden. Bereinige im Anschluss die Spaltennamen (wie geht das?).\n\n\n\n\n\nDatetime\nsensor1\nsensor2\nsensor3\n\n\n\n\n16102017_1800\n23.5\n13.5\n26.5\n\n\n17102017_1800\n25.4\n24.4\n24.4\n\n\n18102017_1800\n12.4\n22.4\n13.4\n\n\n19102017_1800\n5.4\n12.4\n7.4\n\n\n23102017_1800\n23.5\n13.5\nNA\n\n\n24102017_1800\n21.3\n11.3\nNA",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prepro 2: Übung B</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Uebung_B.html#aufgabe-3",
    "href": "prepro/Prepro2_Uebung_B.html#aufgabe-3",
    "title": "Prepro 2: Übung B",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nImportiere die Datei sensor_fail.csv in R.\nsensor_fail.csv hat eine Variabel SensorStatus: 1 bedeutet der Sensor misst, 0 bedeutet der Sensor misst nicht. Fälschlicherweise wurde auch dann der Messwert Temp = 0 erfasst, wenn Sensorstatus = 0. Richtig wäre hier NA (not available). Korrigiere den Datensatz entsprechend.\n\n\n\n\n\nSensor\nTemp\nHum_%\nDatetime\nSensorStatus\n\n\n\n\nSen102\n0.6\n98\n16102017_1800\n1\n\n\nSen102\n0.3\n96\n17102017_1800\n1\n\n\nSen102\n0.0\n87\n18102017_1800\n1\n\n\nSen102\n0.0\n86\n19102017_1800\n0\n\n\nSen102\n0.0\n98\n23102017_1800\n0\n\n\nSen102\n0.0\n98\n24102017_1800\n0\n\n\nSen102\n0.0\n96\n25102017_1800\n1\n\n\nSen103\n-0.3\n87\n26102017_1800\n1\n\n\nSen103\n-0.7\n98\n27102017_1800\n1\n\n\nSen103\n-1.2\n98\n28102017_1800\n1",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prepro 2: Übung B</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro2_Uebung_B.html#aufgabe-4",
    "href": "prepro/Prepro2_Uebung_B.html#aufgabe-4",
    "title": "Prepro 2: Übung B",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nWarum spielt das es eine Rolle, ob 0 oder NA erfasst wird? Berechne die Mittlere der Temperatur / Feuchtigkeit nach der Korrektur.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prepro 2: Übung B</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Demo.html",
    "href": "prepro/Prepro3_Demo.html",
    "title": "Prepro 3: Demo",
    "section": "",
    "text": "Split-Apply-Combine",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Prepro 3: Demo</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Demo.html#split-apply-combine",
    "href": "prepro/Prepro3_Demo.html#split-apply-combine",
    "title": "Prepro 3: Demo",
    "section": "",
    "text": "Daten Laden\nWir laden die Wetterdaten (Quelle MeteoSchweiz) der letzten Übung.\n\nlibrary(\"readr\")\n\nwetter &lt;- read_delim(\"datasets/prepro/weather.csv\", \",\")\n\nlibrary(\"dplyr\")\n\nwetter &lt;- wetter |&gt;\n  mutate(\n    stn = as.factor(stn),\n    time = as.POSIXct(as.character(time), format = \"%Y%m%d%H\")\n  )\n\n\n\nKennwerte berechnen\nWir möchten den Mittelwert aller gemessenen Temperaturwerte berechnen. Dazu könnten wir folgenden Befehl verwenden:\n\nmean(wetter$tre200h0, na.rm = TRUE)\n## [1] 6.324744\n\nDie Option na.rm = T bedeutet, dass NA Werte von der Berechnung ausgeschlossen werden sollen.\nMit der selben Herangehensweise können diverse Werte berechnet werden (z.B. das Maximum (max()), Minimum (min()), Median (median()) u.v.m.).\nDiese Herangehensweise funktioniert nur dann gut, wenn wir die Kennwerte über alle Beobachtungen für eine Variable (Spalte) berechnen wollen. Sobald wir die Beobachtungen gruppieren wollen, wird es schwierig. Zum Beispiel, wenn wir die durchschnittliche Temperatur pro Monat berechnen wollen.\n\n\nConvenience Variablen\nUm diese Aufgabe zu lösen, muss zuerst der Monat extrahiert werden (der Monat ist die convenience variable). Hierfür brauchen wir die Funktion lubridate::month().\nNun kann kann die convenience Variable “Month” erstellt werden. Ohne dpylr wird eine neue Spalte folgendermassen hinzugefügt.\n\nlibrary(\"lubridate\")\n\nwetter$month &lt;- month(wetter$time)\n\nMit dplyr (siehe 3) sieht der gleiche Befehl folgendermassen aus:\n\n\nwetter &lt;- mutate(wetter, month = month(time))\n\nDer grosse Vorteil von dplyr ist an dieser Stelle noch nicht ersichtlich. Dieser wird aber später klar.\n\n\nKennwerte nach Gruppen berechnen\nUm mit base R den Mittelwert pro Monat zu berechnen, kann man zuerst ein Subset mit [] erstellen und davon den Mittelwert berechnen, z.B. folgendermassen:\n\nmean(wetter$tre200h0[wetter$month == 1], na.rm = TRUE)\n## [1] -1.963239\n\nDies müssen wir pro Monat wiederholen, was natürlich sehr umständlich ist. Deshalb nutzen wir das package dplyr. Damit geht die Aufgabe (Temperaturmittel pro Monat berechnen) folgendermassen:\n\nsummarise(group_by(wetter, month), temp_mittel = mean(tre200h0, na.rm = TRUE))\n## # A tibble: 12 × 2\n##    month temp_mittel\n##    &lt;dbl&gt;       &lt;dbl&gt;\n##  1     1      -1.96 \n##  2     2       0.355\n##  3     3       2.97 \n##  4     4       4.20 \n##  5     5      11.0  \n##  6     6      12.4  \n##  7     7      13.0  \n##  8     8      15.0  \n##  9     9       9.49 \n## 10    10       8.79 \n## 11    11       1.21 \n## 12    12      -0.898\n\n\n\nVerketten vs. verschachteln\nAuf Deutsch übersetzt heisst die obige Operation folgendermassen:\n\nnimm den Datensatz wetter\nBilde Gruppen pro Jahr (group_by(wetter,year))\nBerechne das Temperaturmittel (mean(tre200h0))\n\nDiese Übersetzung R-&gt; Deutsch unterscheidet sich vor allem darin, dass die Operation auf Deutsch verkettet ausgesprochen wird (Operation 1-&gt;2-&gt;3) während der Computer verschachtelt liest 3(2(1)). Um R näher an die gesprochene Sprache zu bringen, kann man den |&gt;-Operator verwenden (siehe 4).\n\n# 1 nimm den Datensatz \"wetter\"\n# 2 Bilde Gruppen pro Monat\n# 3 berechne das Temperaturmittel\n\nsummarise(group_by(wetter, month), temp_mittel = mean(tre200h0))\n#                  \\_1_/\n#         \\__________2_________/\n# \\__________________3_______________________________________/\n\n# wird zu:\n\nwetter |&gt;                                 # 1\n  group_by(month) |&gt;                      # 2\n  summarise(temp_mittel = mean(tre200h0)) # 3\n\nDieses Verketten mittels |&gt; (genannt “pipe”) macht den Code einiges schreib- und leserfreundlicher, und wir werden ihn in den nachfolgenden Übungen verwenden. Die “pipe” wird mit dem package magrittr bereitgestellt und mit dplyr mitinstalliert.\nZu dplyr gibt es etliche Tutorials online (siehe5), deshalb werden wir diese Tools nicht in allen Details erläutern. Nur noch folgenden wichtigen Unterschied zu zwei wichtigen Funktionen in dpylr: mutate() und summarise().\n\nsummarise() fasst einen Datensatz zusammen. Dabei reduziert sich die Anzahl Beobachtungen (Zeilen) auf die Anzahl Gruppen (z.B. eine zusammengefasste Beobachtung (Zeile) pro Jahr). Zudem reduziert sich die Anzahl Variablen (Spalten) auf diejenigen, die in der “summarise” Funktion spezifiziert wurde (z.B. temp_mittel).\nmit mutate wird ein data.frame vom Umfang her belassen, es werden lediglich zusätzliche Variablen (Spalten) hinzugefügt (siehe Beispiel unten).\n\n\n# Maximal und minimal Temperatur pro Kalenderwoche\nweather_summary &lt;- wetter |&gt;                # 1) nimm den Datensatz \"wetter\"\n  filter(month == 1) |&gt;                     # 2) filter auf den Monat Januar\n  mutate(day = day(time)) |&gt;                # 3) erstelle eine neue Spalte \"day\"\n  group_by(day) |&gt;                          # 4) Nutze die neue Spalte um Gruppen zu bilden\n  summarise(\n    temp_max = max(tre200h0, na.rm = TRUE), # 5) Berechne das Maximum\n    temp_min = min(tre200h0, na.rm = TRUE)  # 6) Berechne das Minimum\n  )\n\nweather_summary\n## # A tibble: 31 × 3\n##      day temp_max temp_min\n##    &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n##  1     1      5.8     -4.4\n##  2     2      2.8     -4.3\n##  3     3      4.2     -3.1\n##  4     4      4.7     -2.8\n##  5     5     11.4     -0.6\n##  6     6      6.7     -1.6\n##  7     7      2.9     -2.8\n##  8     8      0.2     -3.6\n##  9     9      2.1     -8.8\n## 10    10      1.6     -2.4\n## # ℹ 21 more rows",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Prepro 3: Demo</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Demo.html#reshaping-data",
    "href": "prepro/Prepro3_Demo.html#reshaping-data",
    "title": "Prepro 3: Demo",
    "section": "Reshaping data",
    "text": "Reshaping data\n\nBreit → lang\nDie Umformung von Tabellen breit→lang erfolgt mittels tidyr(siehe 6). Auch dieses Package funktioniert wunderbar mit piping (|&gt;).\n\nlibrary(\"tidyr\")\nweather_summary |&gt;\n  pivot_longer(c(temp_max, temp_min))\n## # A tibble: 62 × 3\n##      day name     value\n##    &lt;int&gt; &lt;chr&gt;    &lt;dbl&gt;\n##  1     1 temp_max   5.8\n##  2     1 temp_min  -4.4\n##  3     2 temp_max   2.8\n##  4     2 temp_min  -4.3\n##  5     3 temp_max   4.2\n##  6     3 temp_min  -3.1\n##  7     4 temp_max   4.7\n##  8     4 temp_min  -2.8\n##  9     5 temp_max  11.4\n## 10     5 temp_min  -0.6\n## # ℹ 52 more rows\n\nIm Befehl pivot_longer() müssen wir festlegen, welche Spalten zusammengefasst werden sollen (hier: temp_max,temp_min,temp_mean). Alternativ können wir angeben, welche Spalten wir nicht zusammenfassen wollen:\n\nweather_summary |&gt;\n  pivot_longer(-day)\n## # A tibble: 62 × 3\n##      day name     value\n##    &lt;int&gt; &lt;chr&gt;    &lt;dbl&gt;\n##  1     1 temp_max   5.8\n##  2     1 temp_min  -4.4\n##  3     2 temp_max   2.8\n##  4     2 temp_min  -4.3\n##  5     3 temp_max   4.2\n##  6     3 temp_min  -3.1\n##  7     4 temp_max   4.7\n##  8     4 temp_min  -2.8\n##  9     5 temp_max  11.4\n## 10     5 temp_min  -0.6\n## # ℹ 52 more rows\n\nWenn wir die Namen neuen Spalten festlegen wollen (anstelle von name und value) erreichen wir dies mit names_to bzw. values_to:\n\nweather_summary_long &lt;- weather_summary |&gt;\n  pivot_longer(-day, names_to = \"Messtyp\", values_to = \"Messwert\")\n\nDie ersten 6 Zeilen von weather_summary_long:\n\n\n\n\n\nday\nMesstyp\nMesswert\n\n\n\n\n1\ntemp_max\n5.8\n\n\n1\ntemp_min\n-4.4\n\n\n2\ntemp_max\n2.8\n\n\n2\ntemp_min\n-4.3\n\n\n3\ntemp_max\n4.2\n\n\n3\ntemp_min\n-3.1\n\n\n\n\n\nDie ersten 6 Zeilen von wetter_sry:\n\n\n\n\n\nday\ntemp_max\ntemp_min\n\n\n\n\n1\n5.8\n-4.4\n\n\n2\n2.8\n-4.3\n\n\n3\n4.2\n-3.1\n\n\n4\n4.7\n-2.8\n\n\n5\n11.4\n-0.6\n\n\n6\n6.7\n-1.6\n\n\n\n\n\nBeachte: weather_summary_long umfasst 62 Beobachtungen (Zeilen), das sind doppelt soviel wie weather_summary, da wir ja zwei Spalten zusammengefasst haben.\n\nnrow(weather_summary)\n## [1] 31\nnrow(weather_summary_long)\n## [1] 62\n\nLange Tabellen sind in verschiedenen Situationen praktischer. Beispielsweise ist das Visualisieren mittels ggplot2 (dieses Package werdet ihr im Block “InfoVis” kennenlernen) mit long tables wesentlich einfacher.\n\n\nlibrary(\"ggplot2\")\nggplot(weather_summary_long, aes(day, Messwert, colour = Messtyp)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\nLang → breit\nDas Gegenstück zu pivot_longer ist pivot_wider. Mit dieser Funktion können wir eine lange Tabelle in eine breite überführen. Dazu müssen wir in names_from angeben, aus welcher Spalte die neuen Spaltennamen erstellt werden sollen (names_from) und aus welcher Spalte die Werte entstammen sollen (values_from):\n\nweather_summary_long |&gt;\n  pivot_wider(names_from = Messtyp, values_from = Messwert)\n## # A tibble: 31 × 3\n##      day temp_max temp_min\n##    &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n##  1     1      5.8     -4.4\n##  2     2      2.8     -4.3\n##  3     3      4.2     -3.1\n##  4     4      4.7     -2.8\n##  5     5     11.4     -0.6\n##  6     6      6.7     -1.6\n##  7     7      2.9     -2.8\n##  8     8      0.2     -3.6\n##  9     9      2.1     -8.8\n## 10    10      1.6     -2.4\n## # ℹ 21 more rows\n\nZum Vergleich: mit einer wide table müssen wir in ggplot2 jede Spalte einzeln plotten. Dies ist bei wenigen Variabeln wie hier noch nicht problematisch, aber bei einer hohen Anzahl wird dies schnell mühsam.\n\nggplot(weather_summary) +\n  geom_line(aes(day, temp_max)) +\n  geom_line(aes(day, temp_min))\n\n\n\n\n\n\n\n\n\n\n\n\nWickham, Hadley, und Garrett Grolemund. 2017. R for Data Science. O’Reilly. https://ebookcentral.proquest.com/lib/zhaw/detail.action?docID=4770093.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Prepro 3: Demo</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Demo.html#footnotes",
    "href": "prepro/Prepro3_Demo.html#footnotes",
    "title": "Prepro 3: Demo",
    "section": "",
    "text": "http://r4ds.had.co.nz/↩︎\nhttps://ebookcentral.proquest.com/lib/zhaw/detail.action?docID=4770093↩︎\nWickham und Grolemund (2017), Kapitel 10 / http://r4ds.had.co.nz/transform.html↩︎\nWickham und Grolemund (2017), Kapitel 14 / http://r4ds.had.co.nz/pipes.html↩︎\nWickham und Grolemund (2017), Kapitel 10 / http://r4ds.had.co.nz/transform.html, oder Hands-on dplyr tutorial..↩︎\nhttps://r4ds.had.co.nz/tidy-data.html#pivoting↩︎",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Prepro 3: Demo</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html",
    "href": "prepro/Prepro3_Uebung.html",
    "title": "Prepro 3: Übung",
    "section": "",
    "text": "Aufgabe 1\nGegeben sei ein Datensatz sensors_combined.csv, mit den Temperaturwerten von drei verschiedenen Sensoren. Importiere ihn als csv in R (als sensors_combined).\nFormatiere die Datetime Spalte in POSIXct um. Verwende dazu die Funktion as.POSIXct (lies mit ?strftime() nochmal nach wie du das spezfische Format (die “Schablone”) festlegen kannst.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prepro 3: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-2",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-2",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nÜberführe die Tabelle in ein langes Format (verwende dazu die Funktion pivot_longer aus tidyr) und speichere den output als sensors_long.\nTipp:\n\nim Argument cols kannst du entweder die Spalten auflisten, die “pivotiert” werden sollen.\nAlternativ kannst du (mit vorangestelltem Minuszeichen, -) die Spalte, bezeichnen, die nicht pivotiert werden soll.\nIn beiden Fällen musst du die Spalten weder mit Anführungs- und Schlusszeichen noch mit dem $-Zeichen versehen.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prepro 3: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-3",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-3",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nGruppiere sensors_long nach der neuen Spalte wo die Sensor-Information enthalten ist (default: name) mit group_by und berechne die mittlere Temperatur pro Sensor (summarise). Hinweis: Beide Funktionen sind Teil des Packages dplyr.\nDer Output sieht folgendermassen aus:\n\n## # A tibble: 3 × 2\n##   name    temp_mean\n##   &lt;chr&gt;       &lt;dbl&gt;\n## 1 sensor1      14.7\n## 2 sensor2      12.0\n## 3 sensor3      14.4",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prepro 3: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-4",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-4",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nErstelle für sensors_long eine neue convenience Variabel month welche den Monat beinhaltet (Tipp: verwende dazu die Funktion month aus lubridate). Gruppiere nun nach month und Sensor und berechne die mittlere Temperatur.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prepro 3: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-5",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-5",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nLade jetzt nochmal den Datensatz weather.csv (Quelle MeteoSchweiz) herunter und importiere ihn als CSV mit den korrekten Spaltentypen (stn als factor, time als POSIXct, tre200h0 als double).",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prepro 3: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-6",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-6",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 6",
    "text": "Aufgabe 6\nErstelle nun eine convenience Variable für die Kalenderwoche pro Messung (lubridate::isoweek). Berechne im Anschluss den mittleren Temperaturwert pro Kalenderwoche.\nVisualisiere im Anschluss das Resultat:",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prepro 3: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-7",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-7",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 7",
    "text": "Aufgabe 7\nIn der vorherigen Aufgabe haben wir die mittlere Temperatur pro Kalenderwoche über alle Jahre (2000 und 2001) berechnet. Wenn wir die Jahre aber miteinander vergleichen wollen, müssen wir das Jahr als zusätzliche convenience Variable erstellen und danach gruppieren. Versuche dies mit den Wetterdaten und visualisiere den Output anschliessend.\n\n\n\n\n\n\n\n\nAbbildung 8.1: baseplot mag keine long tables und macht aus den beiden Jahren eine kontinuierliche Linie",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prepro 3: Übung</span>"
    ]
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-8",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-8",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 8",
    "text": "Aufgabe 8\nÜberführe den Output aus der letzten Übung in eine wide table. Nun lassen sich die beiden Jahre viel besser miteinander vergleichen.",
    "crumbs": [
      "Pre-Processing",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Prepro 3: Übung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Vorbereitung.html",
    "href": "infovis/Infovis1_Vorbereitung.html",
    "title": "Vorbereitung",
    "section": "",
    "text": "Im Rahmen von InfoVis 1 - 2 werden wir einige R Packages brauchen. Wir empfehlen, diese bereits vor der ersten Lektion zu installieren. Analog Vorbereitung könnt ihr mit nachstehendem Code alle noch nicht installierten packages automatisch installieren.\n\npacman::p_install(\"dplyr\", \"ggplot2\", \"lubridate\", \"readr\", \n  \"scales\", \"tidyr\", character.only = TRUE,  force = FALSE)\n\nZudem könnt ihr die Daten für die Übungen auf Moodle herunterladen.",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Vorbereitung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Demo.html",
    "href": "infovis/Infovis1_Demo.html",
    "title": "Infovis 1: Demo A",
    "section": "",
    "text": "Base-plot vs. ggplot\nUm in “base-R” einen Scatterplot zu erstellen wo Datum der Temperatur gegenübersteht, gehen wir wie folgt vor:\nplot(temperature$time, temperature$SHA, type = \"l\", col = \"red\")\nlines(temperature$time, temperature$ZER, col = \"blue\")\nIn ggplot sieht das etwas anders und auf den ersten Blick etwas komplizierter aus: Ein plot wird durch den Befehl ggplot() initiiert. Hier wird einerseits der Datensatz festgelegt, auf dem der Plot beruht (data =), sowie die Variablen innerhalb des Datensatzes, die Einfluss auf den Plot ausüben (mapping = aes()).\n# Datensatz: \"temperature\" | Beeinflussende Variabeln: \"time\" und \"temp\"\nggplot(data = temperature, mapping = aes(time, SHA))\nWeiter braucht es mindestens ein “Layer” der beschreibt, wie die Daten dargestellt werden sollen (z.B. geom_point()). Anders als bei “Piping” (|&gt;) wird ein Layer mit + hinzugefügt.\nggplot(data = temperature, mapping = aes(time, SHA)) +\n  # Layer: \"geom_point\" entspricht Punkten in einem Scatterplot\n  geom_point()\nDa ggplot die Eingaben in der Reihenfolge data = und dann mapping =erwartet, können wir diese Spezifizierungen auch weglassen.\nggplot(temperature, aes(time, SHA)) +\n  geom_point()",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Infovis 1: Demo A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#long-vs.-wide",
    "href": "infovis/Infovis1_Demo.html#long-vs.-wide",
    "title": "Infovis 1: Demo A",
    "section": "Long vs. wide",
    "text": "Long vs. wide\nWie wir in PrePro 2 bereits erwähnt haben, ist ggplot2 auf long tables ausgelegt. Wir überführen deshalb an dieser Stelle die breite in eine lange Tabelle:\n\ntemperature_long &lt;- pivot_longer(temperature, -time, names_to = \"station\", values_to = \"temp\")\n\nNun wollen wir die unterschiedlichen Stationen unterschiedlich einfärben. Da wir Variablen definieren wollen, welche Einfluss auf die Grafik haben sollen, gehört diese Information in aes().\n\nggplot(temperature_long, aes(time, temp, colour = station)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWir können noch einen Layer mit Linien hinzufügen:\n\nggplot(temperature_long, aes(time, temp, colour = station)) +\n  geom_point() +\n  geom_line()",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Infovis 1: Demo A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#beschriftungen-labels",
    "href": "infovis/Infovis1_Demo.html#beschriftungen-labels",
    "title": "Infovis 1: Demo A",
    "section": "Beschriftungen (labels)",
    "text": "Beschriftungen (labels)\nWeiter können wir die Achsen beschriften und einen Titel hinzufügen. Zudem lasse ich die Punkte (geom_point()) nun weg, da mir diese nicht gefallen.\n\nggplot(temperature_long, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n  )",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Infovis 1: Demo A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#split-apply-combine",
    "href": "infovis/Infovis1_Demo.html#split-apply-combine",
    "title": "Infovis 1: Demo A",
    "section": "Split Apply Combine",
    "text": "Split Apply Combine\nIm obigen Plot fällt auf, dass stündliche Werte eine zu hohe Auflösung ist, wenn wir daten über 2 Jahre visualisieren. Mit Split Apply Combine (PrePro 3) können wir die Auflösung unserer Daten verändern:\n\ntemperature_day &lt;- temperature_long |&gt;\n  mutate(time = as.Date(time))\n\ntemperature_day\n## # A tibble: 35,088 × 3\n##    time       station  temp\n##    &lt;date&gt;     &lt;chr&gt;   &lt;dbl&gt;\n##  1 2000-01-01 SHA       0.2\n##  2 2000-01-01 ZER      -8.8\n##  3 2000-01-01 SHA       0.3\n##  4 2000-01-01 ZER      -8.7\n##  5 2000-01-01 SHA       0.3\n##  6 2000-01-01 ZER      -9  \n##  7 2000-01-01 SHA       0.3\n##  8 2000-01-01 ZER      -8.7\n##  9 2000-01-01 SHA       0.4\n## 10 2000-01-01 ZER      -8.5\n## # ℹ 35,078 more rows\n\ntemperature_day &lt;- temperature_day |&gt;\n  group_by(station, time) |&gt;\n  summarise(temp = mean(temp))\n\ntemperature_day\n## # A tibble: 1,462 × 3\n## # Groups:   station [2]\n##    station time        temp\n##    &lt;chr&gt;   &lt;date&gt;     &lt;dbl&gt;\n##  1 SHA     2000-01-01  1.25\n##  2 SHA     2000-01-02  1.73\n##  3 SHA     2000-01-03  1.59\n##  4 SHA     2000-01-04  1.78\n##  5 SHA     2000-01-05  4.66\n##  6 SHA     2000-01-06  3.49\n##  7 SHA     2000-01-07  3.87\n##  8 SHA     2000-01-08  3.28\n##  9 SHA     2000-01-09  3.24\n## 10 SHA     2000-01-10  3.24\n## # ℹ 1,452 more rows",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Infovis 1: Demo A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#xy-achse-anpassen",
    "href": "infovis/Infovis1_Demo.html#xy-achse-anpassen",
    "title": "Infovis 1: Demo A",
    "section": "X/Y-Achse anpassen",
    "text": "X/Y-Achse anpassen\nMan kann auch Einfluss auf die x-/y-Achsen nehmen. Dabei muss man zuerst festlegen, was für ein Achsentyp der Plot hat (vorher hat ggplot eine Annahme auf der Basis der Daten getroffen).\nBei unserer y-Achse handelt es sich um numerische Daten, ggplot nennt diese: scale_y_continuous(). Unter ggplot2.tidyverse.org findet man noch andere x/y-Achsentypen (scale_x_irgenwas bzw. scale_y_irgendwas).\n\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) # y-Achsenabschnitt bestimmen\n\n\n\n\n\n\n\n\nDas gleiche Spiel kann man für die y-Achse betreiben. Bei unserer y-Achse handelt es sich ja um Datumsangaben. ggplot nennt diese: scale_x_date().\n\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  )",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Infovis 1: Demo A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#themes",
    "href": "infovis/Infovis1_Demo.html#themes",
    "title": "Infovis 1: Demo A",
    "section": "Themes",
    "text": "Themes\nMit theme verändert man das allgmeine Layout der Plots. Beispielsweise kann man mit theme_classic() ggplot-Grafiken etwas weniger “Poppig” erscheinen lassen: so sind sie besser für Bachelor- / Masterarbeiten sowie Publikationen geeignet. theme_classic() kann man indiviudell pro Plot anwenden, oder für die aktuelle Session global setzen (s.u.)\nIndividuell pro Plot:\n\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  theme_classic()\n\nGlobal (für alle nachfolgenden Plots der aktuellen Session):\n\ntheme_set(theme_classic())",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Infovis 1: Demo A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#facets-small-multiples",
    "href": "infovis/Infovis1_Demo.html#facets-small-multiples",
    "title": "Infovis 1: Demo A",
    "section": "Facets / Small Multiples",
    "text": "Facets / Small Multiples\nSehr praktisch sind auch die Funktionen für “Small multiples”. Dies erreicht man mit facet_wrap() (oder facet_grid(), mehr dazu später). Man muss mit einem Tilde-Symbol “~” nur festlegen, welche Variable für das Aufteilen des Plots in kleinere Subplots verantwortlich sein soll.\n\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  ) +\n  facet_wrap(station ~ .)\n\n\n\n\n\n\n\n\nAuch facet_wrap kann man auf seine Bedürfnisse anpassen: Beispielweise kann man mit ncol = die Anzahl facets pro Zeile bestimmen.\nZudem brauchen wir die Legende nicht mehr, da der Stationsnamen über jedem Facet steht. Ich setze deshalb theme(legend.position=\"none\")\n\nggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  ) +\n  facet_wrap(~station, ncol = 1) +\n  theme(legend.position = \"none\")",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Infovis 1: Demo A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#in-variabel-abspeichern-und-exportieren",
    "href": "infovis/Infovis1_Demo.html#in-variabel-abspeichern-und-exportieren",
    "title": "Infovis 1: Demo A",
    "section": "In Variabel abspeichern und Exportieren",
    "text": "In Variabel abspeichern und Exportieren\nGenau wie data.frames und andere Objekte, kann man einen ganzen Plot auch in einer Variabel speichern. Dies kann nützlich sein um einen Plot zu exportieren (als png, jpg usw.) oder sukzessive erweitern wie in diesem Beispiel.\n\np &lt;- ggplot(temperature_day, aes(time, temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\",\n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\"\n  ) +\n  scale_y_continuous(limits = c(-30, 30)) +\n  scale_x_date(\n    date_breaks = \"3 months\",\n    date_labels = \"%b\"\n  ) +\n  facet_wrap(~station, ncol = 1)\n# ich habe an dieser Stelle theme(legend.position=\"none\") entfernt\n\nFolgendermassen kann ich den Plot als png-File abspeichern (ohne Angabe von “plot =” wird einfach der letzte Plot gespeichert)\n\nggsave(filename = \"plot.png\", plot = p)\n\n.. und so kann ich einen bestehenden Plot (in einer Variabel) mit einem Layer / einer Option erweitern\n\np +\n  theme(legend.position = \"none\")\n\nWie üblich wurde diese Änderung nicht gespeichert, sondern nur das Resultat davon ausgeben. Wenn die Änderung in meinem Plot (in der Variabel) abspeichern will, muss ich die Variabel überschreiben:\n\np &lt;- p +\n  theme(legend.position = \"none\")",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Infovis 1: Demo A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#smoothing",
    "href": "infovis/Infovis1_Demo.html#smoothing",
    "title": "Infovis 1: Demo A",
    "section": "Smoothing",
    "text": "Smoothing\nMit geom_smooth() kann ggplot eine Trendlinie auf der Baiss von Punktdaten berechnen. Die zugrunde liegende statistische Methode kann selbst gewählt werden (ohne Angabe verwendet ggplot bei &lt; 1’000 Messungen stats::loess, ansonsten mgcv::gam)\n\np &lt;- p +\n  geom_smooth(colour = \"black\")\np",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Infovis 1: Demo A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html",
    "href": "infovis/Infovis1_Uebung.html",
    "title": "Infovis 1: Übung",
    "section": "",
    "text": "Aufgabe 1\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_kanton.csv Datensatz:\nTipp:",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Infovis 1: Übung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-1",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-1",
    "title": "Infovis 1: Übung",
    "section": "",
    "text": "Nutze ggplot(kanton, aes(auslanderanteil, ja_anteil)) um den ggplot zu initiieren. Füge danach ein einen Punkte Layer hinzu (geom_point())\nNutze coord_fixed() um die beiden Achsen in ein fixes Verhältnis zu setzen (1:1).\nOptional:\n\nSetze die Achsen Start- und Endwerte mittels scale_y_continuous bzw. scale_x_continuous.\nSetze analog Kovic (2014) die breaks (0.0, 0.1…0.7) manuell (innerhalb scale_*_continuous)\nNutze labs() für die Beschriftung der Achsen",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Infovis 1: Übung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-2",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-2",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot:\nTipp:\n\nNutze geom_smooth",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Infovis 1: Übung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-3",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-3",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nImportiere die Gemeindedaten tagi_data_gemeinden.csv.\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze geom_point()\nNutze labs()\nNutze coord_fixed()",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Infovis 1: Übung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-4",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-4",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze geom_smooth",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Infovis 1: Übung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-5",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-5",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze facet_wrap um einen Plot pro Kanton darzustellen.",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Infovis 1: Übung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-6",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-6",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 6",
    "text": "Aufgabe 6\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze geom_smooth",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Infovis 1: Übung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-7",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-7",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 7",
    "text": "Aufgabe 7\nRekonstrukturieren folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze facet_wrap",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Infovis 1: Übung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-8",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-8",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 8",
    "text": "Aufgabe 8\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze geom_smooth\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKovic, Marko. 2014. „Je weniger Ausländer, desto mehr Ja-Stimmen? Wirklich?“ Tagesanzeiger Datenblog. https://blog.tagesanzeiger.ch/datenblog/index.php/668/je-weniger-auslaender-desto-mehr-ja-stimmen-wirklich.",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Infovis 1: Übung</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis1_Script_eda.html",
    "href": "infovis/Infovis1_Script_eda.html",
    "title": "Infovis 1: Script EDA",
    "section": "",
    "text": "library(\"ggplot2\")\nlibrary(\"dplyr\")\nlibrary(\"scales\")\n\n# create some data about age and height of people\npeople &lt;- data.frame(\n  ID = c(1:30),\n  age = c(\n    5.0, 7.0, 6.5, 9.0, 8.0, 5.0, 8.6, 7.5, 9.0, 6.0,\n    63.5, 65.7, 57.6, 98.6, 76.5, 78.0, 93.4, 77.5, 256.6, 512.3,\n    15.5, 18.6, 18.5, 22.8, 28.5, 39.5, 55.9, 50.3, 31.9, 41.3\n  ),\n  height = c(\n    0.85, 0.93, 1.1, 1.25, 1.33, 1.17, 1.32, 0.82, 0.89, 1.13,\n    1.62, 1.87, 1.67, 1.76, 1.56, 1.71, 1.65, 1.55, 1.87, 1.69,\n    1.49, 1.68, 1.41, 1.55, 1.84, 1.69, 0.85, 1.65, 1.94, 1.80\n  ),\n  weight = c(\n    45.5, 54.3, 76.5, 60.4, 43.4, 36.4, 50.3, 27.8, 34.7, 47.6,\n    84.3, 90.4, 76.5, 55.6, 54.3, 83.2, 80.7, 55.6, 87.6, 69.5,\n    48.0, 55.6, 47.6, 60.5, 54.3, 59.5, 34.5, 55.4, 100.4, 110.3\n  )\n)\n\n# build a scatterplot for a first inspection\nggplot(people, aes(x = age, y = height)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nggplot(people, aes(x = age, y = height)) +\n  geom_point() +\n  scale_y_continuous(limits = c(0.75, 2))\n\n\n\n\n\n\n\n# Go to help page: http://docs.ggplot2.org/current/ -&gt; Search for icon of fit-line\n# http://docs.ggplot2.org/current/geom_smooth.html\n\n\n# build a scatterplot for a first inspection, with regression line\nggplot(people, aes(x = age, y = height)) +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 2.0)) +\n  geom_smooth()\n\n\n\n\n\n\n\n\n\n# stem and leaf plot\nstem(people$height)\n## \n##   The decimal point is 1 digit(s) to the left of the |\n## \n##    8 | 25593\n##   10 | 037\n##   12 | 523\n##   14 | 19556\n##   16 | 255789916\n##   18 | 04774\nstem(people$height, scale = 2)\n## \n##   The decimal point is 1 digit(s) to the left of the |\n## \n##    8 | 2559\n##    9 | 3\n##   10 | \n##   11 | 037\n##   12 | 5\n##   13 | 23\n##   14 | 19\n##   15 | 556\n##   16 | 2557899\n##   17 | 16\n##   18 | 0477\n##   19 | 4\n\n\n# explore the two variables with box-whiskerplots\nsummary(people$age)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##    5.00    8.70   30.20   59.14   65.15  512.30\nboxplot(people$age)\n\n\n\n\n\n\n\n\n\nsummary(people$height)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   0.820   1.190   1.555   1.455   1.690   1.940\nboxplot(people$height)\n\n\n\n\n\n\n\n\n\n# explore data with a histgram\nggplot(people, aes(x = age)) +\n  geom_histogram(binwidth = 20)\n\n\n\n\n\n\n\n\n\ndensity(x = people$height)\n## \n## Call:\n##  density.default(x = people$height)\n## \n## Data: people$height (30 obs.);   Bandwidth 'bw' = 0.1576\n## \n##        x                y           \n##  Min.   :0.3472   Min.   :0.001593  \n##  1st Qu.:0.8636   1st Qu.:0.102953  \n##  Median :1.3800   Median :0.510601  \n##  Mean   :1.3800   Mean   :0.483553  \n##  3rd Qu.:1.8964   3rd Qu.:0.722660  \n##  Max.   :2.4128   Max.   :1.216350\n\n# re-expression: use log or sqrt axes\n#\n# Find here guideline about scaling axes\n# http://www.cookbook-r.com/Graphs/Axes_(ggplot2)/\n# http://docs.ggplot2.org/0.9.3.1/scale_continuous.html\n\n\n# logarithmic axis: respond to skewness in the data, e.g. log10\nggplot(people, aes(x = age, y = height)) +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 2.0)) +\n  geom_smooth() +\n  scale_x_log10()\n\n\n\n\n\n\n\n\n\n# outliers: Remove very small and very old people\n\npeopleClean &lt;- people |&gt;\n  filter(ID != 27) |&gt; # Diese Person war zu klein.\n  filter(age &lt; 100) # Fehler in der Erhebung des Alters\n\n\nggplot(peopleClean, aes(x = age)) +\n  geom_histogram(binwidth = 10)\n\n\n\n\n\n\n\n\n\nggplot(peopleClean, aes(x = age, y = height)) +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 2.0)) +\n  geom_smooth()\n\n\n\n\n\n\n\n\n\n# with custom binwidth\nggplot(peopleClean, aes(x = age)) +\n  geom_histogram(binwidth = 10) +\n  theme_bw() # specifying the theme\n\n\n\n\n\n\n\n\n\n# quadratic axis\nggplot(peopleClean, aes(x = age, y = height)) +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 2.0)) +\n  geom_smooth(method = \"lm\", fill = \"lightblue\", size = 0.5, alpha = 0.5) +\n  scale_x_sqrt()\n\n\n\n\n\n\n\n\n\n# filter \"teenies\": No trend\nfilter(peopleClean, age &lt; 15) |&gt;\n  ggplot(aes(x = age, y = height)) +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 2.0)) +\n  geom_smooth(method = \"lm\", fill = \"lightblue\", size = 0.5, alpha = 0.5)\n\n\n\n\n\n\n\n\n\n# filter \"teenies\": No trend\npeopleClean |&gt;\n  filter(age &gt; 55) |&gt;\n  ggplot(aes(x = age, y = height)) +\n  geom_point() +\n  scale_y_continuous(limits = c(0, 2.0)) +\n  geom_smooth(method = \"lm\", fill = \"lightblue\", size = 0.5, alpha = 0.5)\n\n\n\n\n\n\n\n\n\n# Onwards towards multidimensional data\n\n# Finally, make a scatterplot matrix\npairs(peopleClean[, 2:4], panel = panel.smooth)\n\n\n\n\n\n\n\n\n\npairs(peopleClean[, 2:4], panel = panel.smooth)",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Infovis 1: Script EDA</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html",
    "href": "infovis/Infovis2_Uebung_A.html",
    "title": "Infovis 2: Übung A",
    "section": "",
    "text": "Aufgabe 1\nMache aus der wide table eine long table die wie folgt aussieht.\ntime\nstation\ntemperature\n\n\n\n\n2005-01-01\nALT\n1.3\n\n\n2005-01-01\nBUS\n1.5\n\n\n2005-01-01\nGVE\n1.1\n\n\n2005-01-01\nINT\n0.2\n\n\n2005-01-01\nOTL\n2.2\n\n\n2005-01-01\nLUG\n1.7\nImportiere anschliessend den Datensatz temperature_2005_metadata.csv und verbinde die beiden Datensätze mit einem left_join via station (bzw. stn).",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Infovis 2: Übung A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-2",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-2",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nErstelle ein Scatterplot (time vs. temperature) wobei die Punkte aufgrund ihrer Meereshöhe eingefärbt werden sollen. Tiefe Werte sollen dabei blau eingefärbt werden und hohe Werte rot (scale_color_gradient). Verkleinere die Punkte um übermässiges Überplotten der Punkten zu vermeiden (size =). Weiter sollen auf der x-Achse im Abstand von 3 Monaten der jeweilige Monat vermerkt sein (date_breaks bzw. date_labels von scale_x_datetime()).",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Infovis 2: Übung A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-3",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-3",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nErstelle eine Zusatzvariabel Date mit dem Datum der jeweiligen Messung ( mit as.Date). Nutze diese Spalte um die Tagesmitteltemperatur pro Station zu berechnen (mit summarise()).\nUm die Metadaten (Name, Meereshoehe, x, y) nicht zu verlieren kannst du den Join aus der ersten Übung wieder ausführen. Alternativ (schneller aber auch schwerer zu verstehen) kannst du diese Variabeln innerhalb deines group_by verwenden.",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Infovis 2: Übung A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-4",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-4",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nWiederhole nun den Plot aus der ersten Aufgabe mit den aggregierten Daten aus der vorherigen Aufgabe. Um die labels korrekt zu setzen musst du scale_x_datetime mit scale_x_date ersetzen.",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Infovis 2: Übung A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-5",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-5",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nFüge am obigen Plot eine schwarze, gestrichelte Trendlinie hinzu.",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Infovis 2: Übung A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-6",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-6",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 6",
    "text": "Aufgabe 6\nPositioniere die Legende oberhalb des Plots (nutze dazu theme() mit legend.position).",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Infovis 2: Übung A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-7-optional-fortgeschritten",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-7-optional-fortgeschritten",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 7 (optional, fortgeschritten)",
    "text": "Aufgabe 7 (optional, fortgeschritten)\nFüge den Temperaturwerten auf der y-Ache ein °C hinzu (siehe unten und studiere diesen Tipp zur Hilfe).",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Infovis 2: Übung A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-8",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-8",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 8",
    "text": "Aufgabe 8\nJetzt verlassen wir den Scatterplot und machen einen Boxplot mit den Temperaturdaten. Färbe die Boxplots wieder in Abhängigkeit der Meereshöhe ein.\n\nBeachte den Unterschied zwischen colour = und fill =\nBeachte den Unterschied zwischen facet_wrap() und facet_grid()\nfacet_grid() braucht übrigens noch einen Punkt (.) zur Tilde (~).\nBeachte den Unterschied zwischen “.~” und “~.” bei facet_grid()\nverschiebe nach Bedarf die Legende",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Infovis 2: Übung A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-9",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-9",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 9",
    "text": "Aufgabe 9\nAls letzter wichtiger Plottyp noch zwei Übungen zum Histogramm. Erstelle ein Histogramm geom_histogram() mit den Temperaturwerten. Teile dazu die Stationen in verschiedene Höhenlagen ein (Tieflage [&lt; 400 m], Mittellage [400 - 600 m] und Hochlage [&gt; 600 m]). Vergleiche die Verteilung der Temperaturwerte in den verschiedenen Lagen mit einem Histogramm.\nTip: Nutze cut um die Stationen in die drei Gruppen aufzuteilen",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Infovis 2: Übung A</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_B.html",
    "href": "infovis/Infovis2_Uebung_B.html",
    "title": "Infovis 2: Übung optional",
    "section": "",
    "text": "Aufgabe 1: Parallel coordinate plots\nErstelle einen parallel coordinate plot. Dafür eignet sich der integrierte Datensatz mtcars. Extrahiere die Fahrzeugnamen mit rownames_to_column.\nZudem müssen die Werte jeweiles auf eine gemeinsame Skala normalisiert werden. Hierfür kannst du die Funktion scales::rescale verwenden.\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\nSo sieht der fertige Plot aus:",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Infovis 2: Übung optional</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_B.html#aufgabe-2-polar-plot-mit-biber-daten",
    "href": "infovis/Infovis2_Uebung_B.html#aufgabe-2-polar-plot-mit-biber-daten",
    "title": "Infovis 2: Übung optional",
    "section": "Aufgabe 2: Polar Plot mit Biber Daten",
    "text": "Aufgabe 2: Polar Plot mit Biber Daten\nPolar Plots eignen sich unter anderem für Daten, die zyklischer Natur sind, wie zum Beispiel zeitlich geprägte Daten (Tages-, Wochen-, oder Jahresrhythmen). Aus den Beispiels-Datensätzen habe ich zwei Datensätze gefunden, die zeitlich geprägt sind:\n\nbeaver1 und beaver2\nAirPassenger\n\nBeide Datensätze müssen noch etwas umgeformt werden, bevor wir sie für einen Radialplot verwenden können. In Aufgabe 2 verwenden wir die Biber-Datensätze, in der nächsten Aufgabe (3) die Passagier-Daten.\nWenn wir die Daten von beiden Bibern verwenden wollen, müssen wir diese noch zusammenfügen.\nZudem müssen wir die Zeitangabe noch anpassen: Gemäss der Datenbeschreibung handelt es sich bei der Zeitangabe um ein sehr programmier-unfreundliches Format. 3:30 wird als “0330” notiert. Wir müssen diese Zeitangabe, noch in ein Dezimalsystem umwandeln.\nSo sieht der fertige Plot aus:",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Infovis 2: Übung optional</span>"
    ]
  },
  {
    "objectID": "infovis/Infovis2_Uebung_B.html#aufgabe-3-raster-visualisierung-mit-flugpassagieren",
    "href": "infovis/Infovis2_Uebung_B.html#aufgabe-3-raster-visualisierung-mit-flugpassagieren",
    "title": "Infovis 2: Übung optional",
    "section": "Aufgabe 3: Raster Visualisierung mit Flugpassagieren",
    "text": "Aufgabe 3: Raster Visualisierung mit Flugpassagieren\nAnalog Aufgabe 2, dieses Mal mit dem Datensatz AirPassengers\nAirPassengers kommt in einem Format daher, das ich selbst noch gar nicht kannte. Es sieht zwar aus wie ein data.frame oder eine matrix, ist aber von der Klasse ts.\n\n##      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n## 1949 112 118 132 129 121 135 148 148 136 119 104 118\n## 1950 115 126 141 135 125 149 170 170 158 133 114 140\n## 1951 145 150 178 163 172 178 199 199 184 162 146 166\n## 1952 171 180 193 181 183 218 230 242 209 191 172 194\n## 1953 196 196 236 235 229 243 264 272 237 211 180 201\n## 1954 204 188 235 227 234 264 302 293 259 229 203 229\n## 1955 242 233 267 269 270 315 364 347 312 274 237 278\n## 1956 284 277 317 313 318 374 413 405 355 306 271 306\n## 1957 315 301 356 348 355 422 465 467 404 347 305 336\n## 1958 340 318 362 348 363 435 491 505 404 359 310 337\n## 1959 360 342 406 396 420 472 548 559 463 407 362 405\n## 1960 417 391 419 461 472 535 622 606 508 461 390 432\n## [1] \"ts\"\n\nDamit wir den Datensatz verwenden können, müssen wir ihn zuerst in eine matrix umwandeln. Wie das geht habe ich hier erfahren.\n\n##       month\n## year   Apr Aug Dec Feb Jan Jul Jun Mar May Nov Oct Sep\n##   1949 129 148 118 118 112 148 135 132 121 104 119 136\n##   1950 135 170 140 126 115 170 149 141 125 114 133 158\n##   1951 163 199 166 150 145 199 178 178 172 146 162 184\n##   1952 181 242 194 180 171 230 218 193 183 172 191 209\n##   1953 235 272 201 196 196 264 243 236 229 180 211 237\n##   1954 227 293 229 188 204 302 264 235 234 203 229 259\n##   1955 269 347 278 233 242 364 315 267 270 237 274 312\n##   1956 313 405 306 277 284 413 374 317 318 271 306 355\n##   1957 348 467 336 301 315 465 422 356 355 305 347 404\n##   1958 348 505 337 318 340 491 435 362 363 310 359 404\n##   1959 396 559 405 342 360 548 472 406 420 362 407 463\n##   1960 461 606 432 391 417 622 535 419 472 390 461 508\n\nAus der matrix muss noch ein Dataframe her, zudem müssen wir aus der breiten Tabelle eine lange Tabelle machen.\nSo sieht der fertige Plot aus:",
    "crumbs": [
      "InfoVis",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Infovis 2: Übung optional</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman0_Vorbereitung.html",
    "href": "rauman/Rauman0_Vorbereitung.html",
    "title": "Vorbereitung",
    "section": "",
    "text": "Im Rahmen von Rauman 1 - 5 werden wir einige R Packages brauchen. Wir empfehlen, diese bereits vor der ersten Lektion zu installieren. Analog der Vorbereitungsübung in Prepro1 könnt ihr mit nachstehendem Code alle noch nicht installierten packages automatisch installieren.\n\npacman::p_install(\"sf\", \"dplyr\", \"ggplot2\", \"spatstat.geom\", \"spatstat.explore\",\n  \"gstat\", \"tidyr\", \"terra\", \"tmap\", character.only = TRUE,  force = FALSE)\n\nZudem könnt ihr die Daten für die Übungen auf Moodle herunterladen.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Vorbereitung</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html",
    "href": "rauman/Rauman1_Uebung_A.html",
    "title": "Rauman 1: Übung A",
    "section": "",
    "text": "Aufgabe 1: Vektor Daten importieren\nImportiere die Datensätze kantone.gpkg und gemeinden.gpkg wie folgt. Es handelt sich um Geodatensätze im Format Geopackage (“*.gpkg”), eine alternatives Datenformat zum bekannteren Format “Shapefiles”.\nkantone &lt;- read_sf(\"datasets/rauman/kantone.gpkg\")\ngemeinden &lt;- read_sf(\"datasets/rauman/gemeinden.gpkg\")\nSchau Dir die importierten Datensätze an.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Rauman 1: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#aufgabe-1-vektor-daten-importieren",
    "href": "rauman/Rauman1_Uebung_A.html#aufgabe-1-vektor-daten-importieren",
    "title": "Rauman 1: Übung A",
    "section": "",
    "text": "Hinweis\n\n\n\nAm meisten Informationen zu sf Objekten bekommst du, wenn du dir den Datensatz in der Konsole anschaust (in dem du den Variabel-Name in der Konsole eintippst). Mit dem RStudio Viewer werden sf Objekte nur sehr langsam geladen und die Metadaten werden nicht angezeigt.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Rauman 1: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#aufgabe-2-daten-visualisieren",
    "href": "rauman/Rauman1_Uebung_A.html#aufgabe-2-daten-visualisieren",
    "title": "Rauman 1: Übung A",
    "section": "Aufgabe 2: Daten visualisieren",
    "text": "Aufgabe 2: Daten visualisieren\nEine sehr einfache Möglichkeit, sf-Objekte zu visualiseren ist die base-R Funktion plot(). Führe die angegebenen R-Befehle aus und studiere die entstehenden Plots. Welche Unterschiede findest Du? Wie erklärst Du diese Unterschiede?\n\n# ohne max.plot = 1 macht R einen Plot pro Spalte\nplot(gemeinden, max.plot = 1)\n\n\n\n\n\n\n\n\n# Alternativ kann man auch eine spezifische Spalte plotten\nplot(kantone[\"KANTONSFLA\"])",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Rauman 1: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#input-koodinatensysteme",
    "href": "rauman/Rauman1_Uebung_A.html#input-koodinatensysteme",
    "title": "Rauman 1: Übung A",
    "section": "Input: Koodinatensysteme",
    "text": "Input: Koodinatensysteme\nIn der obigen Visualierung fällt folgendes auf:\n\ndie X/Y Achsen weisen zwei ganz unterschiedliche Zahlenbereiche auf (vergleiche die Achsenbeschriftungen)\nder Umriss der Schweiz sieht in den beiden Datensätzen unterschiedlich aus (kantone ist gegenüber gemeinden gestaucht)\n\nDies hat natürlich damit zu tun, dass die beiden Datensätze in unterschiedlichen Koordinatensystemen erfasst wurden. Koordinatensysteme werden mit CRS (Coordinate Reference System) abgekürzt. Mit st_crs() können die zugewiesenen Koordinatensysteme abgefragt werden.\n\nst_crs(kantone)\n## Coordinate Reference System:\n##   User input: Undefined Cartesian SRS \n##   wkt:\n## ENGCRS[\"Undefined Cartesian SRS\",\n##     EDATUM[\"Unknown engineering datum\"],\n##     CS[Cartesian,2],\n##         AXIS[\"(E)\",east,\n##             ORDER[1],\n##             LENGTHUNIT[\"Meter\",1]],\n##         AXIS[\"(N)\",north,\n##             ORDER[2],\n##             LENGTHUNIT[\"Meter\",1]]]\nst_crs(gemeinden)\n## Coordinate Reference System:\n##   User input: Undefined Cartesian SRS \n##   wkt:\n## ENGCRS[\"Undefined Cartesian SRS\",\n##     EDATUM[\"Unknown engineering datum\"],\n##     CS[Cartesian,2],\n##         AXIS[\"(E)\",east,\n##             ORDER[1],\n##             LENGTHUNIT[\"Meter\",1]],\n##         AXIS[\"(N)\",north,\n##             ORDER[2],\n##             LENGTHUNIT[\"Meter\",1]]]\n\nLeider sind in unserem Fall keine Koordinatensysteme zugewiesen. Mit etwas Erfahrung kann man das Koordinatensystem aber erraten, so viele kommen nämlich gar nicht in Frage. Am häufigsten trifft man hierzulande eines der drei folgenden Koordinatensysteme an:\n\nCH1903 LV03: das alte Koordinatensystem der Schweiz\nCH1903+ LV95: das neue Koordinatensystem der Schweiz\nWGS84: ein häufig genutztes, weltumspannendes geodätisches Koordinatensystem, sprich die Koordinaten werden in Länge und Breite angegeben (Lat/Lon).\n\nNun gilt es, anhand der Koordinaten die in der Spalte geometry ersichtlich sind, das korrekte Koordinatensystem festzustellen. Wenn man auf map.geo.admin.ch mit der rechten Maustaste einen Ort anwählt, erfährt man die Koordinaten dieses Ortes in verschiedenen Koordinatenbezugssystemen.\n\n\nWenn man diese Koordinaten mit den Koordinaten unserer Datensätze vergleicht, dann ist schnell klar, dass es sich beim Datensatz kantone um das Koordinatenbezugsystem (CRS) WGS84 handelt. Wir können diese Information nutzen um das CRS unserers Datensatzes mit st_set_crs() zu setzen.\n\n# Zuweisen mit st_set_crs()...\nkantone &lt;- st_set_crs(kantone, \"WGS84\")\n\nWenn wir die CRS Information nun abrufen, sehen wir das diese Zuweisung funktioniert hat.\n\n# ... abfragen mit st_crs()\nst_crs(kantone)\n## Coordinate Reference System:\n##   User input: WGS84 \n##   wkt:\n## GEOGCRS[\"WGS 84\",\n##     DATUM[\"World Geodetic System 1984\",\n##         ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n##             LENGTHUNIT[\"metre\",1]]],\n##     PRIMEM[\"Greenwich\",0,\n##         ANGLEUNIT[\"degree\",0.0174532925199433]],\n##     CS[ellipsoidal,2],\n##         AXIS[\"geodetic latitude (Lat)\",north,\n##             ORDER[1],\n##             ANGLEUNIT[\"degree\",0.0174532925199433]],\n##         AXIS[\"geodetic longitude (Lon)\",east,\n##             ORDER[2],\n##             ANGLEUNIT[\"degree\",0.0174532925199433]],\n##     ID[\"EPSG\",4326]]\n\nEtwas komplizierter ist es, wenn wir das CRS vom Datensatz gemeinden setzen wollen. Im Vergleich mit map.geo.admin.ch sehen wir, dass es sich hier um das CRS CH1903+ LV95 handeln muss. Wenn wir diesen Namen für unsere CRS Zuweisung verwenden möchten, funktioniert das nicht:\n\n# Zuweisen mit st_set_crs()...\ngemeinden &lt;- st_set_crs(gemeinden, \"CH1903+ LV95\")\n\n# ... abfragen mit st_crs()\nst_crs(gemeinden)\n\nDie ausgeschriebenen Namen dieser CRS sind fehleranfällig. Deshalb ist es besser, mit den jeweiligen EPSG Codes der Bezugssysteme zu arbeiten. Diese EPSG Codes kann man auf folgender Website erfahren: epsg.io/map. Es lohnt sich aber, die EPSG Codes der für uns relevanten CRS zu notieren:\n\nCH1903 LV03: EPSG:21781\nCH1903+ LV95: EPSG:2056\nWGS84: EPSG:4326\n\nDieser Code können wir nutzen, um das CRS des Datensatz gemeinde zu setzen:\n\n# Zuweisen mit st_set_crs()...\ngemeinden &lt;- st_set_crs(gemeinden, 2056)\n\n# ... abfragen mit st_crs()\nst_crs(gemeinden)\n## Coordinate Reference System:\n##   User input: EPSG:2056 \n##   wkt:\n## PROJCRS[\"CH1903+ / LV95\",\n##     BASEGEOGCRS[\"CH1903+\",\n##         DATUM[\"CH1903+\",\n##             ELLIPSOID[\"Bessel 1841\",6377397.155,299.1528128,\n##                 LENGTHUNIT[\"metre\",1]]],\n##         PRIMEM[\"Greenwich\",0,\n##             ANGLEUNIT[\"degree\",0.0174532925199433]],\n##         ID[\"EPSG\",4150]],\n##     CONVERSION[\"Swiss Oblique Mercator 1995\",\n##         METHOD[\"Hotine Oblique Mercator (variant B)\",\n##             ID[\"EPSG\",9815]],\n##         PARAMETER[\"Latitude of projection centre\",46.9524055555556,\n##             ANGLEUNIT[\"degree\",0.0174532925199433],\n##             ID[\"EPSG\",8811]],\n##         PARAMETER[\"Longitude of projection centre\",7.43958333333333,\n##             ANGLEUNIT[\"degree\",0.0174532925199433],\n##             ID[\"EPSG\",8812]],\n##         PARAMETER[\"Azimuth of initial line\",90,\n##             ANGLEUNIT[\"degree\",0.0174532925199433],\n##             ID[\"EPSG\",8813]],\n##         PARAMETER[\"Angle from Rectified to Skew Grid\",90,\n##             ANGLEUNIT[\"degree\",0.0174532925199433],\n##             ID[\"EPSG\",8814]],\n##         PARAMETER[\"Scale factor on initial line\",1,\n##             SCALEUNIT[\"unity\",1],\n##             ID[\"EPSG\",8815]],\n##         PARAMETER[\"Easting at projection centre\",2600000,\n##             LENGTHUNIT[\"metre\",1],\n##             ID[\"EPSG\",8816]],\n##         PARAMETER[\"Northing at projection centre\",1200000,\n##             LENGTHUNIT[\"metre\",1],\n##             ID[\"EPSG\",8817]]],\n##     CS[Cartesian,2],\n##         AXIS[\"(E)\",east,\n##             ORDER[1],\n##             LENGTHUNIT[\"metre\",1]],\n##         AXIS[\"(N)\",north,\n##             ORDER[2],\n##             LENGTHUNIT[\"metre\",1]],\n##     USAGE[\n##         SCOPE[\"Cadastre, engineering survey, topographic mapping (large and medium scale).\"],\n##         AREA[\"Liechtenstein; Switzerland.\"],\n##         BBOX[45.82,5.96,47.81,10.49]],\n##     ID[\"EPSG\",2056]]\n\nJetzt wo das CRS der Datensätze bekannt ist, können wir ggplot2 nutzen um usere Daten zu visualisieren. In InfoVis 1 & 2 haben wir intensiv mit ggplot2 gearbeitet und dort die Layers geom_point() und geom_line() kennen gelernt. Zusätzlich beinhaltet ggplot die Möglichkeit, mit geom_sf() Vektordaten direkt und sehr einfach zu plotten.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Rauman 1: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#aufgabe-3-koordinatensyteme-transformieren",
    "href": "rauman/Rauman1_Uebung_A.html#aufgabe-3-koordinatensyteme-transformieren",
    "title": "Rauman 1: Übung A",
    "section": "Aufgabe 3: Koordinatensyteme transformieren",
    "text": "Aufgabe 3: Koordinatensyteme transformieren\nIn der vorherigen Übung haben wir das bestehende Koordinatensystem zugewiesen. Dabei haben wir die bestehenden Koordinaten (in der Spalte geom) nicht manipuliert. Ganz anders ist eine Transformation der Daten von einem Koordinatensystem in das andere. Bei einer Transformation werden die Koordinaten in das neue Koordinatensystem umgerechnet und somit manipuliert. Aus praktischen Gründen wollen  wir all unsere Daten ins neue Schweizer Koordinatensystem CH1903+ LV95 transfomieren. Transformiere den Datensatz kantone mit st_transform()in CH1903+ LV95, nutze dafür den korrekten EPSG-Code.\nVor der Transformation (betrachte die Attribute Bounding box, Projected CRS sowie die Werte in der Spalte geom):\n\nkantone\n## Simple feature collection with 51 features and 6 fields\n## Geometry type: POLYGON\n## Dimension:     XY\n## Bounding box:  xmin: 5.955902 ymin: 45.81796 xmax: 10.49217 ymax: 47.80845\n## Geodetic CRS:  WGS 84\n## # A tibble: 51 × 7\n##    NAME       KANTONSNUM SEE_FLAECH KANTONSFLA KT_TEIL EINWOHNERZ\n##  * &lt;chr&gt;           &lt;int&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;        &lt;int&gt;\n##  1 Graubünden         18         NA     710530 0           197888\n##  2 Bern                2      11897     595952 1          1031126\n##  3 Valais             23       1060     522463 0           341463\n##  4 Vaud               22      39097     321201 1           793129\n##  5 Ticino             21       7147     281216 0           353709\n##  6 St. Gallen         17       7720     202820 1           504686\n##  7 Zürich              1       6811     172894 0          1504346\n##  8 Fribourg           10       7818     167142 1           315074\n##  9 Luzern              3       6438     149352 0           406506\n## 10 Aargau             19        870     140380 1           670988\n## # ℹ 41 more rows\n## # ℹ 1 more variable: geom &lt;POLYGON [°]&gt;\n\nNach der Transformation (betrachte die Attribute Bounding box, Projected CRS sowie die Werte in der Spalte geom):\n\nkantone\n## Simple feature collection with 51 features and 6 fields\n## Geometry type: POLYGON\n## Dimension:     XY\n## Bounding box:  xmin: 2485410 ymin: 1075268 xmax: 2833858 ymax: 1295934\n## Projected CRS: CH1903+ / LV95\n## # A tibble: 51 × 7\n##    NAME       KANTONSNUM SEE_FLAECH KANTONSFLA KT_TEIL EINWOHNERZ\n##  * &lt;chr&gt;           &lt;int&gt;      &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;        &lt;int&gt;\n##  1 Graubünden         18         NA     710530 0           197888\n##  2 Bern                2      11897     595952 1          1031126\n##  3 Valais             23       1060     522463 0           341463\n##  4 Vaud               22      39097     321201 1           793129\n##  5 Ticino             21       7147     281216 0           353709\n##  6 St. Gallen         17       7720     202820 1           504686\n##  7 Zürich              1       6811     172894 0          1504346\n##  8 Fribourg           10       7818     167142 1           315074\n##  9 Luzern              3       6438     149352 0           406506\n## 10 Aargau             19        870     140380 1           670988\n## # ℹ 41 more rows\n## # ℹ 1 more variable: geom &lt;POLYGON [m]&gt;",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Rauman 1: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#aufgabe-4-tidyverse-funktionen",
    "href": "rauman/Rauman1_Uebung_A.html#aufgabe-4-tidyverse-funktionen",
    "title": "Rauman 1: Übung A",
    "section": "Aufgabe 4: Tidyverse Funktionen",
    "text": "Aufgabe 4: Tidyverse Funktionen\nsf Objekte sind im wesentlichen data.frames mit ein paar Metadaten und einer speziellen geometry-Spalte. Wir können ihnen die gleichen Operationen durchführen, wie mit data.frames. Beispielsweise können wir aus den Spalten EINWOHNERZ und KANTONSFLA die Einwohnerdichte berechnen:\n\nkantone &lt;- kantone |&gt;\n  mutate(\n    # hektaren in km2 konvertieren\n    flaeche_km2 = KANTONSFLA / 100,\n    # dichte pro km2 berechnen\n    bevoelkerungsdichte = EINWOHNERZ / flaeche_km2\n  )\n\nBerechne nun die Einwohnerdichte auf der Ebene der Gemeinden.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Rauman 1: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#aufgabe-5-choroplethen-karte",
    "href": "rauman/Rauman1_Uebung_A.html#aufgabe-5-choroplethen-karte",
    "title": "Rauman 1: Übung A",
    "section": "Aufgabe 5: Choroplethen Karte",
    "text": "Aufgabe 5: Choroplethen Karte\nNun wollen wir die Gemeinden respektive die Kantone nach ihrer Bevölkerungsdichte einfärben. Dafür verwenden wir wie gewohnt die Methode aes(fill = ...) von ggplot.\n\n\n\n\n\n\n\n\n\nHier sind farblich kaum Unterschiede erkennbar, weil die extrem hohe Bevölkerungsdichte vom Halbkanton Basel-Stadt (&gt;5’000 Einwohner pro km2!) die ganze Farbskala dominiert. Der Statistischer Atlas der Schweiz löst das Problem, indem es Klassen mit irregulären Schwellwerte verwendet und alle zahlen &gt;2’000 gruppiert. Diese Vorgehensweise können wir mit cut() rekonstruieren.\n\n# Schwellwerte analog BFS \"Statistischer Atlas der Schweiz\"\nbreaks = c(0, 50, 100, 150, 200, 300, 500, 750, 1000, 2000, Inf)\n\n# Klassen auf der Basis dieser Schwellenwerte bilden\nkantone &lt;- kantone |&gt;\n    mutate(bevoelkerungsdichte_klassen = cut(bevoelkerungsdichte, breaks))\n\n# Farbpalette erstellen: Wir brauchen so viele Farben, wie wir \"breaks\" haben, minus 1\nncols &lt;- length(breaks) - 1\n\n# Farbpalette erstellen (siehe RColorBrewer::display.brewer.all())\nred_yellow_green &lt;- RColorBrewer::brewer.pal(ncols, \"RdYlGn\")\n\n# Farbpalette umdrehen (zu green-red-yellow)\ngreen_red_yellow &lt;- rev(red_yellow_green)\n\np_kantone &lt;- ggplot(kantone, aes(fill = bevoelkerungsdichte_klassen)) +\n  geom_sf(colour = NA) +\n  scale_fill_manual(values = green_red_yellow) +\n  theme_void() +\n  theme(legend.position = \"none\")\n\nErstelle die gleichen Klassen für die Bevölkerungsdichte der Gemeinden und vergleiche die Plots.\n\n\n\n\n\n\n\n\n\n\n\n(a) Kantone\n\n\n\n\n\n\n\n\n\n\n\n(b) Gemeinde\n\n\n\n\n\n\n\nAbbildung 32.1: Der Vergleich dieser beiden Darstellungen veranschaulicht die MAUP Problematik sehr deutlich",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Rauman 1: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_B.html",
    "href": "rauman/Rauman1_Uebung_B.html",
    "title": "Rauman 1: Übung B",
    "section": "",
    "text": "Aufgabe 1: Geopackage “Layers”\nAllenfalls ist euch beim Importieren des Geopackage gruental.gpkg folgende Warnmeldung aufgefallen:\nDiese Warnmeldung weist darauf hin, dass das Geopackage gruental.gpkg mehrere Layers (rep. Datensätze) enthält und nur der erste Layer importiert wurde. Bringe mit dem Befehl st_layers die Layer Namen in Erfahrung und nutze diese im Anschluss in read_sf (als Argument layer =) um die layers einzeln zu importieren und in variablen zu speichern (zB in als Variable wiesen und baeume).",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Rauman 1: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_B.html#aufgabe-1-geopackage-layers",
    "href": "rauman/Rauman1_Uebung_B.html#aufgabe-1-geopackage-layers",
    "title": "Rauman 1: Übung B",
    "section": "",
    "text": "Warning message:\nIn evalq((function (..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE,  :\n  automatically selected the first layer in a data source containing more than one.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Rauman 1: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_B.html#aufgabe-2-datensätze-erkunden",
    "href": "rauman/Rauman1_Uebung_B.html#aufgabe-2-datensätze-erkunden",
    "title": "Rauman 1: Übung B",
    "section": "Aufgabe 2: Datensätze erkunden",
    "text": "Aufgabe 2: Datensätze erkunden\nNimm dir etwas Zeit und erkunde die beiden Datensätze. Nutze dafür auch die Visualisierungsmöglichkeiten von ggplot (insbesondere geom_sf). Du kannst mehrere geom_sf() übereinander lagern, um gleichzeitig mehrere Datensätze darzustellen.\n\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 33.1: Wiesen-Flächen eingefärbt nach Typ\n\n\n\n\n\n\n\n\n\n\n\nAbbildung 33.2: Bäume eingefärbt nach Baumtyp",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Rauman 1: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman1_Uebung_B.html#sec-spatial-join-points",
    "href": "rauman/Rauman1_Uebung_B.html#sec-spatial-join-points",
    "title": "Rauman 1: Übung B",
    "section": "Aufgabe 3: Spatial Join mit Punkten",
    "text": "Aufgabe 3: Spatial Join mit Punkten\nWir wollen nun für jeden Baum wissen, ob er sich in einer Wiese befindet oder nicht. Dazu nutzen wir die GIS-Technik Spatial Join, die in der Vorlesung beschrieben wurde. In sf können wir Spatial Joins mit der Funktion st_join durchführen, dabei gibt es nur left sowie inner-Joins (vgl. PrePro 1 & 2). So müssen die Punkte “Links”, also an erste Stelle aufgeführt werden, da wir ja Attribute an die Punkte anheften wollen.\nBeachte, dass der Output eine neue Spalte flaechen_typ aufweist. Diese ist leer (NA) wenn sich der entsprechende Baum nicht in einer Wiese befindet. Wie viele Bäume befinden sich in einer Wiese, wie viele nicht?",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Rauman 1: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman2_Uebung_A.html",
    "href": "rauman/Rauman2_Uebung_A.html",
    "title": "Rauman 2: Übung A",
    "section": "",
    "text": "Aufgabe 1\nAls erster Schritt müssen wir jeden Baum mit einem 20m Puffer verstehen. Nutze dazu st_buffer um speichere den Output als baeume_20m. Schau dir baeume_20m nun genau an. Um welchen Geometrietyp handelt es sich dabei nun?\nAbbildung 34.1: Dargestellt sind die Bäume als Punkte mit einem 20m Puffer, sowie die Wiesen im Hintergrund.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Rauman 2: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman2_Uebung_A.html#aufgabe-2",
    "href": "rauman/Rauman2_Uebung_A.html#aufgabe-2",
    "title": "Rauman 2: Übung A",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nBerechnen nun die Schnittmenge aus baeume_20m und wiesen mit der Funktion st_intersection und speichere den Output als baeume_wiesen. Exploriere nun baeume_wiesen. Was ist passiert? Überprüfe die Anzahl Zeilen pro Datensatz. Haben die sich verändert? Wenn ja, warum?",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Rauman 2: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman2_Uebung_A.html#aufgabe-3",
    "href": "rauman/Rauman2_Uebung_A.html#aufgabe-3",
    "title": "Rauman 2: Übung A",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nBerechnen nun die Flächengrösse pro Geometrie mit der Funktion st_area(). Speichere den Output in einer neuen Spalte von baeume_wiesen (z.B. mit dem Namen wiesen_flaeche). Tipp: Konvertiere den Output aus st_area in einen nummerischen Vektor mit as.numeric().",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Rauman 2: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman2_Uebung_A.html#aufgabe-4-optional",
    "href": "rauman/Rauman2_Uebung_A.html#aufgabe-4-optional",
    "title": "Rauman 2: Übung A",
    "section": "Aufgabe 4 (Optional)",
    "text": "Aufgabe 4 (Optional)\nBerechne nun aus wiesen_flaeche den wiesen_anteil. Tipp: 100% ist die Kreisfläche aus \\(r^2\\times \\pi\\), wobei in unserem Fall \\(r = 20\\) entspricht.\nÜberführe anschliessend die berechneten Anteilswerte in den Datensatz baeume mit einem left_join zwischen baeume und baeume_wiesen. Welche Spalte wäre für diesen Join geeignet? Hinweis: Nutze st_drop_geometry() um die Geometriespalte in baeme_wiesen vor dem Join zu entfernen.\n\n\n\n\n\n\n\n\nAbbildung 34.2: Nach dieser Übung kannst du das Resultat in dieser Weise visualisieren.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Rauman 2: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman2_Uebung_A.html#sec-raster-intro1",
    "href": "rauman/Rauman2_Uebung_A.html#sec-raster-intro1",
    "title": "Rauman 2: Übung A",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nNun habt ihr ein paar Vektoroperationen wie st_buffer() und st_intersection() und st_area() durchgeführt. Gewisse Fragen lassen sich aber besser in der Raster-Welt beantworten. Wollen wir beispielsweise für jeden Punkt im Raum wissen, wie weit der nächstgelegene Baum ist, lässt sich das besser in einem Raster darstellen.\nBevor wir die Frage aber beantworten können, müssen wir den Vektordatensatz in ein Rasterdatensatz konvertieren. Dafür wiederum braucht es ein Raster “Template”, damit R in etwa weiss, wie der Raster Output auszusehen hat.\n\n\n# Um mit Raster arbeiten zu können brauchen wir das Package \"terra\"\nlibrary(\"terra\")\n\n# Um ein Vektor Datensatz zu vektorieren, brauchen wir ein Template.\n# Für das Template nutzen wir \"wiesen\" und setzen eine Zellgrösse (resolution)\ntemplate &lt;- rast(wiesen, resolution = 20)\n\n# Mit rasterize können wir \"baeume\" in einen Raster konvertieren\n# Nutzt hier wieder alle bäume, nicht baeume_sample\nbaeume_rast &lt;- terra::rasterize(baeume, template)\n\nDer Unterschied zwischen Raster und Vektor kann sehr anschaulich dargestellt werden, wenn die beiden Datensätze übereinander gelagert werden.\n\nplot(baeume_rast, col = \"grey\")\nplot(baeume, add = TRUE, col = \"red\", pch = \"x\")\n\n\n\n\n\n\n\n\nMit baeume_rast können wir nun mit der Funktion distance() die Distanz zu jedem Baum berechnen:\n\n\nbaeume_dist &lt;- distance(baeume_rast)\nplot(baeume_dist)\nplot(baeume, add = TRUE, pch = \"x\")",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Rauman 2: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman2_Uebung_B.html",
    "href": "rauman/Rauman2_Uebung_B.html",
    "title": "Rauman 2: Übung B",
    "section": "",
    "text": "Aufgabe 1\nIn dieser Übung werden wir weiter mit terra arbeiten, um zu zeigen, wie wir einen Rasterdatensatz importieren, visualisieren und weiter verarbeiten können. In euren Daten findet ihr einen Datensatz namens dhm250m.tif, der das “Digitale Höhenmodell” (DHM) des Kantons Schwyz darstellt. Führen Sie den angegebenen Code aus.\nlibrary(\"terra\")\nImportieren Sie Ihr Raster mit der Funktion rast\ndhm_schwyz &lt;- rast(\"datasets/rauman/dhm250m.tif\")\nSie erhalten einige wichtige Metadaten über den Rasterdatensatz, wenn Sie den Variablennamen in die Konsole eingeben.\ndhm_schwyz\n## class       : SpatRaster \n## dimensions  : 150, 186, 1  (nrow, ncol, nlyr)\n## resolution  : 250, 250  (x, y)\n## extent      : 2672175, 2718675, 1193658, 1231158  (xmin, xmax, ymin, ymax)\n## coord. ref. : CH1903+ / LV95 (EPSG:2056) \n## source      : dhm250m.tif \n## name        :   dhm250m \n## min value   :  389.1618 \n## max value   : 2850.0203\nUm einen schnellen Überblick eines Rasterdatensatz zu erhalten, können wir einfach die plot() Funktion verwenden.\nplot(dhm_schwyz)\nLeider ist das Verwenden von Rastern in ggplot nicht sehr einfach. Da ggplot ein universelles Plot-Framework ist, stossen wir schnell an die Grenzen des Möglichen, wenn wir etwas so Spezielles wie Karten erstellen. Mit plot können wir zwar sehr schnell plotten, aber auch hier stossen wir schnell an Grenzen.\nAus diesem Grund werden wir ein neues Plot-Framework einführen, das auf Karten spezialisiert ist und in einem sehr ähnlichen Design wie ggplot gebaut wurde: tmap. Laden Sie dieses Paket jetzt in Ihre Session:\nlibrary(\"tmap\")\nGenau wie ggplot basiert tmap auf der Idee von “Ebenen”, die durch ein + verbunden sind. Jede Ebene hat zwei Komponenten:\nMusterlösung\ntm_shape(dhm_schwyz) +\n  tm_raster()\nBeachten Sie, dass tm_shape() und tm_raster() (in diesem Fall) zusammengehören. Das eine kann nicht ohne das andere leben.\nWenn Sie die Hilfe von ?tm_raster konsultieren, werden Sie eine Vielzahl von Optionen sehen, mit denen Sie die Visualisierung Ihrer Daten verändern können. Zum Beispiel ist der Standardstil von tm_raster() die Erstellung von “Bins” mit einer diskreten Farbskala. Wir können dies mit style = \"cont\" ausser Kraft setzen.\nMusterlösung\ntm_shape(dhm_schwyz) +\n  tm_raster(style = \"cont\")\nDas sieht schon ziemlich toll aus, aber vielleicht wollen wir die Standard-Farbpalette ändern. Glücklicherweise ist das in tmap viel einfacher als in ggplot2. Um sich die verfügbaren Paletten anzusehen, geben Sie tmaptools::palette_explorer() oder RColorBrewer::display.brewer.all() in der Konsole ein (für Ersteres müssen Sie möglicherweise zusätzliche Pakete installieren, z.B. shinyjs).\nMusterlösung\ntm_shape(dhm_schwyz) +\n  tm_raster(style = \"cont\", palette = \"Spectral\")\nEine grosse Stärke von tmap ist die Tatsache, das mit dem gleichen Befehl sowohl statische wie auch interative Plots erstellt werden können. Dafür muss der Modus von statisch auf interaktiv gewechselt werden.\nMusterlösung\ntmap_mode(\"view\") # wechselt auf interakive Plots\n\ntm_shape(dhm_schwyz) +\n  tm_raster(style = \"cont\", palette = \"Spectral\")\n\n\n\n\n\n\n\nMusterlösung\n\ntmap_mode(\"plot\") # wechselt zurück auf statische Plots",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Rauman 2: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman2_Uebung_B.html#aufgabe-1",
    "href": "rauman/Rauman2_Uebung_B.html#aufgabe-1",
    "title": "Rauman 2: Übung B",
    "section": "",
    "text": "eine Datensatzkomponente, die immer tm_shape(dataset) ist (ersetzen Sie dataset durch Ihre Variable)\neine Geometriekomponente, die beschreibt, wie das vorangegangene tm_shape() visualisiert werden soll. Dies kann tm_dots() für Punkte, tm_polygons() für Polygone, tm_lines() für Linien usw. sein. Für Einzelbandraster (was bei dhm_schwyz der Fall ist) ist es tm_raster()",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Rauman 2: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman2_Uebung_B.html#sec-raster-slope",
    "href": "rauman/Rauman2_Uebung_B.html#sec-raster-slope",
    "title": "Rauman 2: Übung B",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nMit terra können wir eine Vielzahl von Rasteroperationen über unser Höhenmodell laufen lassen. Eine klassische Rasteroperation ist zum Beispiel das Berechnen der Hangneigung (“slope”) oder dessen Orientierung (“aspect”). Nutzen Sie die Funktion terrain() aus terra um die Hangneigung und Orientierung zu berechnen. Visualisieren Sie die Resultate.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHinweis\n\n\n\nBei “aspect” handelt es sich ja um Werte, die von 0 bis 360 reichen. In klassischen Palettes liegen die beiden Extremwerte (in diesem Fall 0 und 360) farblich weit auseinander. Bei Aspect sollten diese aber nahe beieinander liegen (da eine Ausrichtung von 1° nur 2 Grad von einer Ausrichtung von 359° entfernt ist). Um dieser Tatsache Rechnung zu Tragen können wir eine eine eigene Colourpalette erstellen, wo die erste Farbe wiederholt ist.\n\n\n\n\nMusterlösung\ntm_shape(schwyz_aspect) +\n  tm_raster(\n    palette = c(\"#EF476F\", \"#FFD166\", \"#06D6A0\", \"#118AB2\", \"#EF476F\"),\n    style = \"cont\", breaks = seq(0, 360, 90)\n  )",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Rauman 2: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman2_Uebung_B.html#aufgabe-3",
    "href": "rauman/Rauman2_Uebung_B.html#aufgabe-3",
    "title": "Rauman 2: Übung B",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nMit Hangneigung und -ausrichtung können wir einen Hillshading-Effekt berechnen. Hillshading bedeutet, dass der Schattenwurf des Oberflächenmodells bei gegebenen Einfallswinkel der Sonne (Höhe und Azimut) berechnet wird. Der typische Einfallswinkel liegt bei 45° über dem Horizont und von Nordwesten bei 315°.\nUm einen Hillshading Effekt zu erzeugen, berechne zuerst slope und aspect von dhm_schwyz analog der letzten Aufgabe, achte aber darauf das die Einheit radians entspricht. Nutze diese beiden Objekte in der Funktion shade() um den Hillshade zu berechnen. Visualisiere den Output anschliessend mit plot oder tmap.\n\n\n\n\n\nFür diese Visualisierung verwende ich tmap und als colour palette cividis",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Rauman 2: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman3_Uebung_A.html",
    "href": "rauman/Rauman3_Uebung_A.html",
    "title": "Rauman 3: Übung A",
    "section": "",
    "text": "Aufgabe 1: Rotmilan Bewegungsdaten visualisieren\nDie erste Frage, die bei solchen Bewegungsstudien typischerweise gestellt wird, lautet: Wo hält sich das Tier hauptsächlich auf? Um diese Frage zu beantworten, kann man als erstes einfach die Datenpunkte in einer einfachen Karte visualisieren. Erstellt zur Beantwortung dieser Frage nachstehende Karte.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Rauman 3: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman3_Uebung_A.html#aufgabe-2-kernel-density-estimation-berechnen",
    "href": "rauman/Rauman3_Uebung_A.html#aufgabe-2-kernel-density-estimation-berechnen",
    "title": "Rauman 3: Übung A",
    "section": "Aufgabe 2: Kernel Density Estimation berechnen",
    "text": "Aufgabe 2: Kernel Density Estimation berechnen\nIn einer ersten Annäherung funktioniert dies, doch wir sehen hier ein klassisches Problem des “Overplotting”. Das heisst, dass wir durch die Überlagerung vieler Punkte in den dichten Regionen nicht abschätzen können, wie viele Punkte dort effektiv liegen und ggf. übereinander liegen. Es gibt hier verschiedene Möglichkeiten, die Punktdichte klarer zu visualisieren. Eine unter Biologen sehr beliebte Methode ist die Dichteverteilung mit einer Kernel Density Estimation (KDE). Dies v.a. darum, weil mit KDE das Habitat (Streifgebiet) eines Tieres abgeschätzt werden kann. Homeranges werden oft mit KDE95 und Core Areas mit KDE50 definiert (Fleming C., Calabrese J., 2016).\nFür die Berechnung der Density verwenden wir die Funktion density.ppp aus spatstat. Diese library ist etwas komplex in der Anwendung, damit wir dieses Verfahren aber dennoch auf unsere Rotmilan-Daten anwenden können, haben wir eine eigene KDE-Funktion erstellt, die wir Euch zur Verfügung stellen.\nWir ermutigen alle, die dafür Kapazität haben, unsere Function eingehend zu studieren und allenfalls ganz auf die Funktion zu verzichten und stattdessen direkt spatstat zu verwenden. Wenn ihr mit unserer Funktion arbeiten möchtet, müsst ihr den unten stehenden Code in euer Skript kopieren und ausführen.\n\nmy_kde &lt;- function(points, cellsize, bandwith, extent = NULL){\n  library(\"spatstat.geom\")    # um sf in ppp zu konvertieren\n  library(\"spatstat.explore\") # um die Dichte zu berechnen\n  \n  points_ppp &lt;- as.ppp(points) # konvertiert sf &gt; ppp\n\n  if(!is.null(extent)){\n    # falls ein extent angegeben ist, wird dieser verwendet\n    # um das \"Beobachtungsfenster\" zu setzen\n    Window(points_ppp) &lt;- as.owin(st_bbox(extent))\n  } \n\n  # macht eine Dichteschätzung\n  points_density &lt;- density.ppp(x = points_ppp, sigma = bandwith, eps = cellsize)\n\n  # konvertiert den Output in ein DataFrame\n  points_density_df &lt;- as.data.frame(points_density)\n\n  points_density_df\n}\n\nDie Parameter der Funktion sollten relativ klar sein:\n\npoints: Ein Punktdatensatz aus der Class sf\ncellsize: Die Zellgrösse des output-Rasters\nbandwith: Der Suchradius für die Dichteberechnung\nextent (optional): Der Perimeter, in dem die Dichteverteilung berechnet werden soll. Wenn kein Perimeter angegeben wird, wird die “bounding box” von points genutzt.\n\nWenn wir nun mit my_kde() die Dichteverteilung berechnen, erhalten wir ein data.frame mit X und Y Koordinaten sowie eine Spalte value zurück. Nutzt diese drei Spalten mit geom_raster() um eure Daten mit ggplot zu visualisieren (aes(x = X, y = Y, fill = value).\n\nrotmilan_kde &lt;- my_kde(points = rotmilan, cellsize = 1000, bandwith = 10000, extent = schweiz)\n\nhead(rotmilan_kde)\n##         x       y        value\n## 1 2485909 1075767 5.632740e-24\n## 2 2485909 1076766 8.290197e-23\n## 3 2485909 1077764 3.032138e-23\n## 4 2485909 1078763 6.522508e-23\n## 5 2485909 1079761 9.599267e-23\n## 6 2485909 1080760 1.183168e-22\n\n\n\n\n\n\n\n\n\n\nDie Kernel Density Estimation ist nun sehr stark von den tiefen Werten dominiert, da die Dichte in den meisten Zellen unseres Untersuchungsgebiets nahe bei Null liegt. Wie erwähnt sind Wissenschaftler häufig nur an den höchsten 95% der Werte interessiert. Folge folgende Schritte um das Resultat etwas besser zu verantschaulichen:\n\nBerechne die 95. Perzentile aller Werte mit der Funktion quantile und benne diesen q95\nErstelle eine neue Spalte in rotmilan_kde, wo alle Werte tiefer als q95 NA entsprechen\n(Optional): Transformiere die Werte mit log10, um einen differenzierteren Farbverlauf zu erhalten\n\nWir können die tiefen Werte ausblenden, indem wir nur die höchsten 5% der Werte darstellen. Dafür berechnen wir mit raster::quantile die 95. Perzentile aller Werte und nutzen diesen Wert als “Grenzwert” für die Darstellung.\nZusätzlich hilft eine logarithmische Transformation der Werte, die Farbskala etwas sichtbarer zu machen.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Rauman 3: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman3_Uebung_A.html#aufgabe-3-dichteverteilung-mit-thiessen-polygonen",
    "href": "rauman/Rauman3_Uebung_A.html#aufgabe-3-dichteverteilung-mit-thiessen-polygonen",
    "title": "Rauman 3: Übung A",
    "section": "Aufgabe 3: Dichteverteilung mit Thiessen Polygonen",
    "text": "Aufgabe 3: Dichteverteilung mit Thiessen Polygonen\nThiessen Polygone bieten eine spannende Alternative um Unterschiede in der Dichteverteilung von Punktdatensätzen zu visualisieren. Wir wollen dies nun ausprobieren und konstruieren zum Schluss die Thiessenpolygone für die Rotmilan-Daten für das Untersuchungsgebiet Schweiz. Nutze die Anleitung für das Erstellen von Thiessenpolygonen aus der Übung B um Thiessenpolygone für die Rotmilanpositionen zu erstellen.\n\n\n\n\n\n\n\n\nAbbildung 36.1: Wenn wir jetzt die Thiessenpolygone (ohne Punkte) darstellen, wird deutlicher, wie die Dichteverteilung im Innern des Clusters aussieht.\n\n\n\n\n\n\n\n\n\n\"Scherler, Patrick\". \"2020\". „Drivers of Departure and Prospecting in Dispersing Juvenile Red Kites (Milvus milvus).“ Phdthesis, \"University of Zurich\".",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Rauman 3: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman3_Uebung_B.html",
    "href": "rauman/Rauman3_Uebung_B.html",
    "title": "Rauman 3: Übung B",
    "section": "",
    "text": "In dieser Übung geht es darum, zwei verschiedene Interpolationsverfahren in R umzusetzen. Im ersten Interpolationsverfahren verwenden wir die inverse distance weighted interpolation, später verwenden wir die nearest neighbour methode. Dazu braucht ihr die folgenden Packages:\n\nlibrary(\"sf\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\nlibrary(\"gstat\")\n\nWeiter benötigt ihr die nachstehenden Datensätze:\nluftqualitaet &lt;- read_sf(\"datasets/rauman/luftqualitaet.gpkg\")\nschweiz &lt;- read_sf(\"datasets/rauman/schweiz.gpkg\")\nDie Library gstat bietet verschiedene Möglichkeiten, Datenpunkte zu interpolieren, unter anderem auch die inverse distance weighted Methode. Leider ist das Package noch nicht so benutzerfreundlich wie sf: Das Package wird aber aktuell überarbeitet und in mittlerer Zukunft sollte es ebenso einfach zugänglich sein. Damit Ihr Euch nicht mit den Eigenheiten dieser Library umschlagen müsst, haben wir eine Function vorbereitet, die Euch die Verwendung der IDW-Interpolation erleichtern soll.\nWir nehmen Euch damit etwas Komplexität weg und liefern Euch ein pfannenfertiges Werkzeug. Das hat auch Nachteile und wir ermutigen alle, die dafür Kapazität haben, unsere Function eingehend zu studieren und allenfalls ganz auf die Function zu verzichten und stattdessen direkt gstat zu verwenden. Wenn ihr mit unserer Function arbeiten möchtet, müsst ihr den unten stehenden Code in euer Skript kopieren und ausführen.\n\nmy_idw &lt;- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, idp = 2, extent = NULL){\n  library(\"gstat\")\n  library(\"sf\")\n  \n  if(is.null(extent)){\n    extent &lt;- groundtruth\n  }\n  \n  samples &lt;- st_make_grid(extent,cellsize,what = \"centers\")\n  my_formula &lt;- formula(paste(column,\"~1\"))\n  idw_sf &lt;- gstat::idw(formula = my_formula,groundtruth, newdata = samples, nmin = 1, nmax = nmax, maxdist = maxdist, idp = idp)\n  \n  idw_matrix &lt;- cbind(as.data.frame(st_coordinates(idw_sf)),pred = st_drop_geometry(idw_sf)[,1])\n  idw_matrix\n}\n\nNun könnt Ihr mit my_idw() den Datensatz luftqualitaet folgendermassen interpolieren.\n\nmy_idw(groundtruth = luftqualitaet, column = \"value\", cellsize = 10000, extent = schweiz)\n\nFolgende Parameter stehen Euch zur Verfügung:\n\nNotwendige Parameter:\n\ngroundtruth: Punktdatensatz mit den Messwerten (sf-Objekt)\ncolumn: Name der Spalte mit den Messwerten (in Anführungs- und Schlusszeichen)\ncellsize: Zellgrösse des output Rasters\n\nOptionale Parameter\n\nnmax: Maximale Anzahl Punkte, die für die Interpolation berücksichtigt werden sollen. Default: Inf (alle Werte im gegebenen Suchradius)\nmaxdist: Suchradius, welcher für die Interpolation verwendet werden soll. Default Inf (alle Werte bis nmax)\nidp: Inverse Distance Power: die Potenz, mit der der Nenner gesteigert werden soll. Default: 2. Werte werden im Kehrwert des Quadrates gewichtet: \\(\\frac{1}{dist^{idp}}\\).\nextent: Gebiet, für welches die Interpolation durchgeführt werden soll. Wenn nichts angegeben wird (Default NULL), wird die Ausdehnung von groundtruth verwendet.\n\nOuput\n\nder Output der Funktion ist eine data.frame mit 3 Spalten:\n\nX, Y Koordinaten der interpolierten Werte\npred: der Interpolierte Wert\n\n\n\nBeim Output handelt sich hier um einen Raster-ähnlichen Datentyp (siehe Vorlesung Spatial DataScience 1). Diesen können wir mit geom_raster mit ggplot visualisieren. Dafür müsst ihr in aes die X und Y Koordinaten angeben, und der interpolierte Wert mit fill einfärben.\n\nAufgabe 1: Raeumliche Interpolation mit IDW\nRechnet so den IDW für die Luftqualitätsmessungen mit verschiedenen Parametern und visualisiert jeweils die Resultate. Experimentiert mit nmax sowie maxdist. Was stellt ihr fest?\nTips:\n\nWas für Distanzen bei maxdist Sinn machen, könnt ihr dem Output aus der G-Funktion (vorherige Übung) entnehmen\nWählt am Anfang eine etwas Konvervative (grosse) cellsize und verringert diesen nur wenn euer Rechner damit gut klar kommt\nDa der Output aus der Interpolation im gleichen Koordinatenbezugssystem sind wie schweiz.gpkg kann man diese beiden Datensätze im gleichen ggplot darstellen. Dafür müsst ihr die aesthetics (aes()) für jeden Layer einzeln setzen, und nicht auf der Ebene von ggplot().\n\n\n\n## [inverse distance weighted interpolation]\n## [inverse distance weighted interpolation]\n## [inverse distance weighted interpolation]\n## [inverse distance weighted interpolation]\n\n\n\n\n\n\n\nAbbildung 37.1: Stickstoffdioxid (NO2) in μg/m3, Interpoliert über die ganze Schweiz mit der Inverse Distance Weighted Methode. Die verschiedenen Plots zeigen die Veränderung der Interpolation bei steigendem IDP-Wert\n\n\n\n\n\n\n\n\nAufgabe 2: Interpolation mit Nearest Neighbour\nEine weitere einfache Möglichkeit zur Interpolation bietet die Erstellung eines Voronoi-Diagrammes, auch als Thiessen-Polygone oder Dirichlet-Zerlegung bekannt. sf liefert dazu die Funktion st_voronoi(), die einen Punktdatensatz annimmt und eben um die Punkte die Thiessenpolygone konstruiert. Dazu braucht es lediglich einen kleinen Vorverarbeitungsschritt: sf möchte für jedes Feature, also für jede Zeile in unserem Datensatz, ein Voronoidiagramm. Das macht bei uns wenig Sinn, weil jede Zeile nur aus einem Punkt besteht. Deshalb müssen wir vorher luftqualitaet mit st_union() von einem POINT in ein MULTIPOINT Objekt konvertieren, in welchem alle Punkte in einer Zeile zusammengefasst sind.\n\n\n\n\n\n\n\n\n\nst_voronoi hat die Thiessenpolygone etwas weiter gezogen als wir sie wollen. Dies ist allerdings eine schöne Illustration der Randeffekte von Thiessenpolygonen, die zum Rand hin (wo es immer weniger Punkte hat) sehr gross werden können. Wir können die Polygone auf die Ausdehnung der Schweiz mit st_intersection() clippen. Auch hier braucht es zwei kleine Vorverarbeitungsschritte:\n\nwie vorher müssen wir die einzelnen Kantons-Polygone miteinander verschmelzen. Dies erreichen wir mit st_union(). Wir speichern den Output als schweiz, was als Resultat ein einzelnes Polygon der Schweizergrenze retourniert.\nfür die Thiessen-Polygone machen wir genau das Umgekehrte: st_voronoi() liefert ein einzelnes Feature mit allen Polygonen, welches sich nicht gerne clippen lässt. Mit st_cast() wird die GEOMETRYCOLLECTION in Einzelpolygone aufgeteilt.\n\n\n\n\n\n\n\n\n\n\nJetzt müssen wir nur noch den jeweiligen Wert für jedes Polygon ermitteln. Dies erreichen wir wieder durch st_join. Auch hier ist noch ein kleiner Vorverarbeitungsschritt nötig: Wir konvertieren das sfc Objekt (nur Geometrien) in ein sf Objekt (Geometrien mit Attributtabelle).\n\n\n\n\n\n\n\n\nAbbildung 37.2: Stickstoffdioxid (NO2) in μg/m3, Interpoliert über die ganze Schweiz nach der Nearest Neighbour Methode.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Rauman 3: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman3_Uebung_C.html",
    "href": "rauman/Rauman3_Uebung_C.html",
    "title": "Rauman 3: Übung C (Optional)",
    "section": "",
    "text": "Aufgabe 1\nlibrary(\"sf\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")\n\nrotmilan &lt;- read_sf(\"datasets/rauman/rotmilan.gpkg\")\n\nschweiz &lt;- read_sf(\"datasets/rauman/schweiz.gpkg\")\n\nluftqualitaet &lt;- read_sf(\"datasets/rauman/luftqualitaet.gpkg\")\nAbbildung 38.1: Eine solche Visualisierung zeigt dir beispielsweise die räumliche Ausdehnung der Datenpunkte",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Rauman 3: Übung C (Optional)</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman3_Uebung_C.html#aufgabe-2",
    "href": "rauman/Rauman3_Uebung_C.html#aufgabe-2",
    "title": "Rauman 3: Übung C (Optional)",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nAls erstes berechnen wir die G-Function für die Rotmilanpositionen:\n\nSchritt 1\nMit st_distance() können Distanzen zwischen zwei sf Datensätze berechnet werden. Wird nur ein Datensatz angegeben, wird eine Kreuzmatrix erstellt wo die Distanzen zwischen allen Features zu allen anderen Features dargestellt werden. Wir nützen diese Funktion zur Berechnung der nächsten Nachbarn.\n\n\nSchritt 2\nNun wollen wir wissen, wie gross die kürzeste Distanz von jedem Punkt zu seinem nächsten Nachbarn beträgt, also die kürzeste Distanz pro Zeile. Bevor wir diese ermitteln müssen wir die diagonalen Werte noch entfernen, denn diese stellen ja jeweils die Distanz zu sich selber dar und sind immer 0. Danach kann mit apply() eine Funktion (FUN = min) über die Zeilen (MARGIN = 1) einer Matrix (X = rotmilan_distanzmatrix) gerechnet werden. Zusätzlich müssen wir noch na.rm = TRUE setzen, damit NA Werte von der Berechnung ausgeschlossen werden. Das Resultat ist ein Vektor mit gleich vielen Werten wie Zeilen in der Matrix.\n\n\nSchritt 3\nNun müssen wir die Distanzen nach ihrer Grösse sortieren\n\n\nSchritt 4\nJetzt berechnen wir die kummulierte Häufigkeit von jeder Distanz berechnen. Die kummulierte Häufikgeit vom ersten Wert ist 1 (der Index des ersten Wertes) dividiert durch die Anzahl Werte insgesamt. Mit seq_along erhalten wir die Indizes aller Werte, mit lenth die Anzahl Werte insgesamt.\n\n\nSchritt 5\nNun wollen wir die kumulierte Häufigkeit der Werte in einer Verteilungsfunktion (engl: Empirical Cumulative Distribution Function, ECDF) darstellen. Dafür müssen wir die beiden Vektoren zuerst noch in einen Dataframe packen, damit ggplot damit klar kommt.\n\n\n\n\n\n\n\n\n\nLesehilfe:",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Rauman 3: Übung C (Optional)</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman3_Uebung_C.html#aufgabe-3",
    "href": "rauman/Rauman3_Uebung_C.html#aufgabe-3",
    "title": "Rauman 3: Übung C (Optional)",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nFühre nun die gleichen Schritte mit luftqualitaet durch und vergleiche die ECDF-Plots.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Rauman 3: Übung C (Optional)</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman4_Uebung_A.html",
    "href": "rauman/Rauman4_Uebung_A.html",
    "title": "Rauman 4: Übung",
    "section": "",
    "text": "Aufgabe 1: Morans \\(I\\) für Kantone",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Rauman 4: Übung</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman4_Uebung_A.html#aufgabe-1-morans-i-für-kantone",
    "href": "rauman/Rauman4_Uebung_A.html#aufgabe-1-morans-i-für-kantone",
    "title": "Rauman 4: Übung",
    "section": "",
    "text": "Gewichtete Ähnlichkeitsmatrix\nWidmen wir uns dem Kern von Morans \\(I\\), der Berechnung der gewichteten Ähnlichkeitsmatrix.\n\nNachbarschaftsmatrix \\(w_{ij}\\)\n\\[\\text{Morans } I = \\frac{n}{\\sum_{i=1}^n (y_i - \\bar{y})^2} \\times \\frac{\\sum_{i=1}^n \\sum_{j=1}^n {\\color{red}w_{ij}}(y_i - \\bar{y})(y_j - \\bar{y})}{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}}\\]\n\\(w\\) beschreibt die räumlichen Gewichte der Kantone (den “Schalter” aus der Vorlesung). \\(w_{ij}\\) ist das Gewicht vom Kanton \\(i\\) im Vergleich zum Kanton \\(j\\). Sind Kantone \\(i\\) und \\(j\\) räumlich nah, gilt ein Gewicht von 1, sind sie weit entfernt, gilt ein Gewicht von 0. Dabei ist die Definition von “räumlich nah” nicht festgelegt. Denkbar wären verschiedene Optionen (siehe Vorlesung). Wer werden es mit die Bedigungen touches verwenden. Die Funktion st_touches prüft zwischen allen Kantonen, ob sie sich berühren. Mit der Option sparse = TRUE wird eine 26x26 Kreuzmatrix erstellt, wo jeder Kanton mit jedem anderen verglichen wird. Berühren sie sich, steht in der entsprechenden Stelle der Wert TRUE, was in R gleichbedeutend ist wie 1. Berühren sie sich nicht, steht der Wert FALSE, was gleichbedeutend ist wie 0.\n\n# st_touches berechnet eine Kreuzmatrix aller Objekte\nw_ij &lt;- st_touches(zweitwohnung_kanton, sparse = FALSE)\n\n# Schauen wir uns matrix mal an\n# (aus Platzmangen beschränken wir uns auf die ersten 5 Zeilen und Spalten\n# in RStudio könnt ihr mit View(w_ij) die gesamte Matrix anschauen)\nw_ij[1:5, 1:5]\n\n\nDie erste Zeile entspricht dem ersten Kanton in zweitwohnung_kanton, die zweite Zeile dem zweiten Kanton usw. Das gleiche Gilt für die Spalten. Um die Kreuzmatrix besser interpretieren zu können, können wir die Namen aus der Spalte KANTONSNAME verwenden, um die Zeilen und Spalten unserer Kreuzmatrix zu benennen.\n\nrownames(w_ij) &lt;- zweitwohnung_kanton$kuerzel\ncolnames(w_ij) &lt;- zweitwohnung_kanton$kuerzel\n\nw_ij[1:5, 1:5]\n# Alterantiv: mit View(w_ij)\n\n\n\nAttributs-Ähnlichkeitsmatrix \\(c_{ij}\\)\n\\[\\text{Morans } I = \\frac{n}{\\sum_{i=1}^n (y_i - \\bar{y})^2} \\times \\frac{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}{\\color{red}(y_i - \\bar{y})(y_j - \\bar{y})}}{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}}\\]\nUm die Attributs-Ähnlichkeit zwischen zwei Kantonen zu bestimmen, subtrahieren wir von jedem Kanton den Mittelwert aller Kantone und multiplizieren die beiden Differenzen. Die Funktion tcrossprod() erstellt diese Kreuzmatrix mit den multiplizierten Differenzen.\n\n# speichere die Variable in einem neuen Vektor\ny &lt;- zweitwohnung_kanton$ja_in_percent\n\ny_diff &lt;- y - mean(y) # erstellt ein Vector mit 26 Werten\nc_ij &lt;- tcrossprod(y_diff) # erstellt eine Matrix 26x26\n\n# Zeilen- und Spaltennamen hinzufügen\nrownames(c_ij) &lt;- zweitwohnung_kanton$kuerzel\ncolnames(c_ij) &lt;- zweitwohnung_kanton$kuerzel\n\nc_ij[1:5, 1:5]\n\n\n\nBerechnung von zaehler2\n\\[\\text{Morans } I = \\frac{n}{\\sum_{i=1}^n (y_i - \\bar{y})^2} \\times \\frac{\\color{red}\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}(y_i - \\bar{y})(y_j - \\bar{y})}{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}}\\]\nDer gesamte Term zaehler2 ist die Summe aus der Multiplikation von w_ij und c_ij.\n\n# Matrix multiplikation\ncw_ij &lt;- w_ij * c_ij\n\n# Summe bilden\nzaehler2 &lt;- sum(cw_ij)\n\nzaehler2\n\n\n\n\nNormalisieren\nUm das Resultat aus der bisherigen Berechung auf einen Wert von -1 bis +1 zu normalisieren, müssen wir noch folgende Terme berechnen:\n\\[\\text{Morans } I = \\frac{\\color{cyan}n}{\\color{cyan}\\sum_{i=1}^n (y_i - \\bar{y})^2} \\times \\frac{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}(y_i - \\bar{y})(y_j - \\bar{y})}{\\color{cyan}\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}} \\]\n\nBerechnung von \\(n\\) (zaehler1)\nDer Termin zaehler1 resp. n entspricht der Anzahl Objekte (hier: Kantone) in unserem Datensatz.\n\nzaehler1 &lt;- n &lt;- nrow(zweitwohnung_kanton)\n\nzaehler1\n\n\n\nAbweichung vom Mittelwert (nenner1)\nWir haben bereits in der Berechnung der Attributs-Ähnlichkeit die Differenz zum Mittelwert berechnet. Für nenner1 müssen wir diesen lediglich quadrieren und die Resultate summieren.\n\\[\\text{Morans } I = \\frac{n}{\\color{cyan}\\sum_{i=1}^n (y_i - \\bar{y})^2} \\times \\frac{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}(y_i - \\bar{y})(y_j - \\bar{y})}{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}}\\]\n\n# Di bereits berechneten Abweichungen müssen wir quadrieren:\ny_diff2 &lt;- y_diff^2\n\n# Und danach die Summe bilden:\nnenner1 &lt;- sum(y_diff2)\n\n\n\nSumme der Gewichte (nenner2)\n\\[\\text{Morans } I = \\frac{n}{\\sum_{i=1}^n (y_i - \\bar{y})^2} \\times \\frac{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}(y_i - \\bar{y})(y_j - \\bar{y})}{\\color{cyan}\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}}\\]\nIm Term nenner2 müssen wir lediglich die Gewichte w_ij summieren.\n\nnenner2 &lt;- sum(w_ij)\n\n\n\n\nAuflösung der Formel\nNun haben wir alle Bestandteile von Morans \\(I\\) Berechnet und müssen diese nur noch Zusammenrechnen.\n\nMI_kantone &lt;- zaehler1 / nenner1 * zaehler2 / nenner2\n\nMI_kantone\n\nDer Global Morans \\(I\\) für die Abstimmungsdaten beträgt auf Kantonsebene also 0.31. Wie interpretiert ihr dieses Resultate? Was erwartet ihr für eine Resultat auf Bezirksebene?",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Rauman 4: Übung</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman4_Uebung_A.html#aufgabe-2-morans-i-für-bezirke-berechnen",
    "href": "rauman/Rauman4_Uebung_A.html#aufgabe-2-morans-i-für-bezirke-berechnen",
    "title": "Rauman 4: Übung",
    "section": "Aufgabe 2: Morans I für Bezirke berechnen",
    "text": "Aufgabe 2: Morans I für Bezirke berechnen\nNun könnt ihr Morans \\(I\\) auf der Ebene der Bezirke und untersuchen, ob und wie sich Morans \\(I\\) verändert. Importiert dazu den Layer bezirk aus dem Datensatz zweitwohnungsinitiative.gpkg. Visualisiert in einem ersten Schritt die Abstimmungsresultate. Formuliert nun eine Erwartungshaltung: ist Morans \\(I\\) auf der Ebene Bezirke tiefer oder Höher als auf der Ebene Kantone?\n\n\n\n\n\n\nFür Fortgeschrittene\n\n\n\nErstellt aus dem erarbeiten Workflow eine function um Morans I auf der Basis von einem sf Objekt sowie einer Spalte dessen zu berechnen.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Rauman 4: Übung</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_A.html",
    "href": "rauman/Rauman5_Uebung_A.html",
    "title": "Rauman 5: Übung A",
    "section": "",
    "text": "Aufgabe 1: Vektor Daten laden und anzeigen\nBetrachte das File windkraft_geodata.gpkg (siehe Tabelle 40.1). Dieses beinhaltet alle Vektordaten, die für die Bearbeitung der Multikriterien-Evaluation benötigt wird (Bewohnte Flächen, Nationale Schutzgebiete, Seeflächen, Strassen, Waldgebiete sowie die Kantonsgrenze von Schwyz). Die Namen der verfügbaren Listen können Sie mit sf::st_layers() ermitteln.\nImportiere die benötigten Vektordatensätze und exploriere die Daten. Zur Visualisierung könnt ihr die Funktionen plot oder die Packages tmap oder ggplot2 verwenden.\nSchau dir auch das Koordinatensystem an. Was fällt dir auf? Wir würden gerne mit dem neuen Schweizer Koordinatensystem arbeiten (LV95). Um ein Koordinatensystem umzuwandeln benutze die Funktion st_transform().",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Rauman 5: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_A.html#sec-raster-distance",
    "href": "rauman/Rauman5_Uebung_A.html#sec-raster-distance",
    "title": "Rauman 5: Übung A",
    "section": "Aufgabe 2: Erschliessung berechnen",
    "text": "Aufgabe 2: Erschliessung berechnen\nBeginnen wir mit dem Kriterium “Erschliessung”. Wir müssen für den ganzen Kanton Schwyz wissen, wie weit die nächste Strasse entfernt ist. Wie wir bereits in Aufgabe 5 erläutert haben, lässt sich diese Information am besten in einem Raster abbilden.\nAnalog Aufgabe 5 müssen wir hierfür den Vektordatensatz auf der Basis eines Templates in ein Raster konvertieren. Für die Erstellung des Templates verwenden wir an dieser Stelle die Kantonsgrenze vom Kanton Schwyz.\n\n# Template mit der Ausdehnung und dem CRS vom Kt. kt_schwyz\n# erstellen, und mit einer Auflösung on 250m\ntemplate &lt;- rast(kt_schwyz, resolution = 250)\n\nstrassen_raster &lt;- rasterize(strassen, template)\nstrassen_dist &lt;- distance(strassen_raster)\n\nNutze der obige Code um den Strassen Datensatz zu rasterisieren und die Distanz zum Strassen mit der Funktion distance() zu berechnen. Plausibilisiere den Output indem du ihn visualisierst.\n\n\n\n\n\n\n\n\n\nDie rasterisierte Form des “Strassen” Datensatzes\n\n\n\n\n\n\n\nDie Distanz zur nächstgelegenen Strasse für jeden Punkt im Kanton Schwyz”\n\n\n\n\n\nFühre nun die gleiche Operation durch um die Entfernung zu nationalen Schutzgebieten zu ermitteln.\n\n\n\n\n\n\n\n\n\nDie rasterisierte Form des “Schutzgebiete” Datensatzes\n\n\n\n\n\n\n\nDie Distanz zum nächstgelegenen Schutzgebiet für jeden Punkt im Kanton Schwyz”",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Rauman 5: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_A.html#sec-classify1",
    "href": "rauman/Rauman5_Uebung_A.html#sec-classify1",
    "title": "Rauman 5: Übung A",
    "section": "Aufgabe 3: Distanzkriterien bewerten",
    "text": "Aufgabe 3: Distanzkriterien bewerten\nJetzt haben wir die Distanzen zu den relevanten Gebieten berechnet, nun müssen wir diese Distanzen bewerten. Dafür teilen wir die kontinuierlichen Distanzwerte in diskrete Kategorien ein. Wir verwenden für die Aufgabe folgende Einteilung aus der Tabelle 40.2.\nUm die Klassifizierung durchzuführen, brauchen wir die Function classify(). Wie wir aus der Dokumentation der Funktion (mit ?classify) entnehmen können, gibt es verschiedene Wege wie wir einen Raster Reklassifizieren können (siehe Beschreibung für das Argument rcl). Eine sehr explizite Variante ist, dass wir für rcl eine Matrix mit 3 Spalten verwenden. Diese drei Spalte stellen from, to und becomes dar.\nWir könnten diese Tabelle in einem Spreadsheet-Programm schreiben und in R einlesen. Alternativ können wir sie auch “von Hand” in R erstellen. Um in R tabellarische Daten zu schreiben empfehlen wir die Funktion tribble(), welche eine sehr anschauliche Art bietet, Tabellen in R zu generieren. Da classify eine Matrix als Input will, müssen wir unser data.frame noch in eine Matrix umwandeln.\n\n\n\n\n\nBeispiel Distanzklassen anhand der Strassen\n\n\n\n\nJetzt wo wir diese Matrix haben, können wir sie nutzen um den Kanton Schwyz hinsichtlich der Distanz zu Strassen zu bewerten. Dafür verwenden wir die Funktion classify() mit dem Argument include.lowest = TRUE damit eine Distanz von 0m ebenfalls in 1 reklassifiziert wird.\n\n\n\n\n\n\n\n\n\nBewerte auf die gleiche Art die Distanz zu den Schutzgebieten. Wir nutzen die Schwellwerte, wie sie in der nachstehenden Tabelle ersichtlich ist (Tabelle 40.2). Du kannst diese aber frei wählen.\n\n\n\n\n\nTabelle 40.2: Bewertungstabelle für die Distanz zu Strassen und Wildschutzgebieten (Meter)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDistanz zu Strassen\n\n\nDistanz zu Wildschutzgebieten\n\n\n\nvon\nbis\nzu\nvon\nbis\nzu\n\n\n\n\n0\n250\n1.0\n0\n250\n0.0\n\n\n250\n500\n0.8\n250\n500\n0.2\n\n\n500\n750\n0.6\n500\n750\n0.4\n\n\n750\n1000\n0.4\n750\n1000\n0.6\n\n\n1000\n1250\n0.2\n1000\n1250\n0.8\n\n\n1250\nInf\n0.0\n1250\nInf\n1.0",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Rauman 5: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_A.html#sec-raster-overlay1",
    "href": "rauman/Rauman5_Uebung_A.html#sec-raster-overlay1",
    "title": "Rauman 5: Übung A",
    "section": "Aufgabe 4: Raster Overlay",
    "text": "Aufgabe 4: Raster Overlay\nWir haben zwar erst zwei der Kriterien (Distanzen zu Strassen und Naturschutzgebiete) berechnet, die wir für unsere Standortsuche berücksichtigen wollen, doch mit denen können wir schon mal eine erste, unvollständige Beurteilung wagen.\nWeil wir für alle Raster das gleiche Template verwendet haben, sind diese perfekt aneinander ausgerichtet. So können wir auf die denkbar einfachste Art die einezelnen Zellen miteinander verrechnen. Auf folgende Weise können wir beispielsweise den Mittlwert pro Zelle berechnen:\n\noverlay_prelim_1 &lt;- (strassen_classify + schutzgebiete_classify) / 2\n\ntm_shape(overlay_prelim_1) +\n  tm_raster(palette = \"-Spectral\") +\n  tm_shape(kt_schwyz) +\n  tm_borders(lwd = 5, col = \"black\")",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Rauman 5: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_A.html#sec-rauman5-mask",
    "href": "rauman/Rauman5_Uebung_A.html#sec-rauman5-mask",
    "title": "Rauman 5: Übung A",
    "section": "Aufgabe 5: Mask Raster",
    "text": "Aufgabe 5: Mask Raster\nIm letzten Plot fällt auf, dass wir auch eine Bewertung für Gebiete ausserhalb des Untersuchungsgebiets haben. Da wir für diese Gebiete keine Geodaten verwendet haben, sind die Resultate ausserhalb des Untersuchungsgebiets nicht gültig. Deshalb ist es sinnvoll, die Werte ausserhalb des Untersuchungsgebeits zu entfernen. Dafür verwenden wir die Funktion mask() zusammen mit dem Vektordatensatz kt_schwzy. Diese setzt alle Werte ausserhalb des Polygons zu NA:",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Rauman 5: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_A.html#sec-raster-overlay1b",
    "href": "rauman/Rauman5_Uebung_A.html#sec-raster-overlay1b",
    "title": "Rauman 5: Übung A",
    "section": "Aufgabe 6: Weighted Raster Overlay",
    "text": "Aufgabe 6: Weighted Raster Overlay\nIm obigen Raster Overlay haben wir alle Kriterien gleich stark gewichtet. Wir können aber auch eine gewichtete Verschneidung durchführen: Wenn wir beispielsweise die Distanz zu den Strassen stärker gewichten wollen als die Distanz zu den Schutzgebieten. Auch das ist sehr einfach:\n\n\n\n\n\n\n\n\n\n\n\n\n\nGilgen, \"Kurt, und Alma Sartoris\". \"2010\". „\"Empfehlung zur Planung von Windenergieanlagen: Die Anwendung von Raumplanungsinstrumenten und Kriterien zur Standortwahl\"“. \"Eidgenössisches Departement für Umwelt, Verkehr, Energie und Kommunikation UVEK\".\n\n\nTegou, Leda-Ioanna, Heracles Polatidis, und Dias A. Haralambopoulos. 2010. „Environmental management framework for wind farm siting: Methodology and case study“. Journal of Environmental Management 91 (11): 2134–47. https://doi.org/10.1016/j.jenvman.2010.05.010.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Rauman 5: Übung A</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_B.html",
    "href": "rauman/Rauman5_Uebung_B.html",
    "title": "Rauman 5: Übung B",
    "section": "",
    "text": "Aufgabe 1: Rasterdaten einlesen\nZur Bewertung der Standorte hinsichtlich Windgeschwindigkeit steht uns der Datensatz wind250m.tif zur Verfügung (siehe Tabelle 40.1). Lade den Datensatz mit der Funktion rast() in R ein. Explorieren Sie den Datensatz visuell und versuchen Sie ein Verständnis für die Datensätze zu bekommen.\nDatensatz ‘wind250m’ zur Windgeschwindigkeit in m pro Sekunde",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Rauman 5: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_B.html#aufgabe-2-wind-bewerten",
    "href": "rauman/Rauman5_Uebung_B.html#aufgabe-2-wind-bewerten",
    "title": "Rauman 5: Übung B",
    "section": "Aufgabe 2: Wind bewerten",
    "text": "Aufgabe 2: Wind bewerten\nDiese Rasterdaten müssen wir nicht weiter verarbeiten, wir können sie direkt bewerten. Führen Sie diese Bewertung aufgrund nachstehender Tabelle durch. Nutzen Sie dafür die Funktion classify() analog Aufgabe 3: Distanzkriterien bewerten. Sie können die Schwellwerte frei wählen, wir werden diejenigen verwenden, die in Tabelle 41.1 festgehalten sind.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Rauman 5: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_B.html#aufgabe-3-slope-berechnen-und-bewerten",
    "href": "rauman/Rauman5_Uebung_B.html#aufgabe-3-slope-berechnen-und-bewerten",
    "title": "Rauman 5: Übung B",
    "section": "Aufgabe 3: Slope berechnen und bewerten",
    "text": "Aufgabe 3: Slope berechnen und bewerten\nFür die Berechnung und anschliessende Bewertung der Hangneigung brauchen wir ein Höhenmodell. Lade das Höhenmodell dhm250m.tif herunter (siehe Tabelle 40.1) und in R ein. Berechne anschliessend die Hangneigung mit der Funktion terrain() analog Aufgabe 2 (beachten Sie die Einheit des Output!).\nBewerten Sie die Hangneigung danach gemäss Tabelle Tabelle 41.1.\n\n\n\n\n\nTabelle 41.1: Bewertungstabelle die Windgeschwindigkeit (m/s) und Hangneigung (Grad)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWindgeschwindigkeit\n\n\nHangneigung\n\n\n\nvon\nbis\nzu\nvon\nbis\nzu\n\n\n\n\n0\n20\n0.0\n0\n4\n1.0\n\n\n20\n30\n0.2\n4\n8\n0.8\n\n\n30\n40\n0.4\n8\n12\n0.6\n\n\n40\n50\n0.6\n12\n16\n0.4\n\n\n50\n60\n0.8\n16\n20\n0.2\n\n\n60\nInf\n1.0\n20\n90\n0.0",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Rauman 5: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_B.html#sec-raster-overlay2",
    "href": "rauman/Rauman5_Uebung_B.html#sec-raster-overlay2",
    "title": "Rauman 5: Übung B",
    "section": "Aufgabe 4: Raster Overlay",
    "text": "Aufgabe 4: Raster Overlay\nAnalog Aufgabe 4: Raster Overlay können wir an dieser Stelle eine vorläufige Beurteilung der Gebiete durchführen. Du kannst die Gewichte wieder so anpassen wie du willst.\n\n\n\n\n\n\n\n\nAbbildung 41.1: Ungewichtetes Überlagern aller Kriterien mit Ausnahme der Ausschlussgebiete",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Rauman 5: Übung B</span>"
    ]
  },
  {
    "objectID": "rauman/Rauman5_Uebung_B.html#aufgabe-5-ausschlusskriterien",
    "href": "rauman/Rauman5_Uebung_B.html#aufgabe-5-ausschlusskriterien",
    "title": "Rauman 5: Übung B",
    "section": "Aufgabe 5: Ausschlusskriterien",
    "text": "Aufgabe 5: Ausschlusskriterien\nAls Auschlussgebiete gelten Flächen, wo keine Windkraftanlagen gebaut werden können. Dazu gehören bewohnte Flächen, nationale Schutzgebiete, Waldgebiete und Seen. (Zwar werden Schutzgebiete in unserer Analyse bereits berücksichtigt, aber nicht kategorisch vom Resultat ausgeschlossen.)\nUm diese Flächen aus von unserem Resultat auzuschliessen, können wir wieder die Funktion mask() verwenden (siehe Aufgabe 5: Mask Raster). Doch diesmal möchten wir nicht die Flächen ausserhalb der Polygone mit NA ersetzen, sondern die Flächen innerhalb der Polygone. Deshalb verwenden wir mask() mit dem Argument inverse = TRUE.\nVersuche mit mask(), den oben erwähnten Vektordatensätze sowie der Option inverse = TRUE die Ausschlussgebiete vom Raster-Overlay zu entfernen und visualisiere das Resultat.",
    "crumbs": [
      "Räumliche Analysen",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Rauman 5: Übung B</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/0_Vorbereitung.html",
    "href": "fallstudie_s/0_Vorbereitung.html",
    "title": "Vorbereitung",
    "section": "",
    "text": "Im Rahmen der Fallstudie werden wir einige R Packages brauchen. Wir empfehlen, diese bereits vor der ersten Lektion zu installieren. Analog der Vorbereitungsübung in Prepro1 könnt ihr mit nachstehendem Code alle noch nicht installierten packages automatisch installieren.\n\nipak &lt;- function(pkg) {\n  new.pkg &lt;- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg)) {\n    install.packages(new.pkg, dependencies = TRUE)\n  }\n}\n\npackages &lt;- c(\n  \"readr\", \"ggplot2\", \"lubridate\", \"ggpubr\", \"PerformanceAnalytics\",\n  \"MuMIn\", \"AICcmodavg\", \"fitdistrplus\", \"lme4\", \"DHARMa\", \"blmeco\", \"sjPlot\", \"lattice\",\n  \"dplyr\", \"suncalc\", \"glmmTMB\"\n)\n\nipak(packages)\n\nZudem könnt ihr alle für die Fallstudie Profil S benötigten Daten unter folgendem Link herunterladen.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>Vorbereitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/1_Einführung.html",
    "href": "fallstudie_s/1_Einführung.html",
    "title": "Einführung",
    "section": "",
    "text": "Hintergrund\nDas rund 1100 ha grosse Naturschutzgebiet Wildnispark Zürich Sihlwald, welches im periurbanen Raum südlich von Zürich liegt, gilt seit dem 1. Januar 2010 als erster national anerkannter Naturerlebnispark. Er ist Teil des Wildnisparks Zürich und wichtiges Naherholungsgebiet für die Stadt Zürich.\nDas Schutzgebiet befindet sich im Spannungsfeld zwischen Schutz und Nutzen, denn einerseits sollen die Besuchenden den Wald erleben dürfen, andererseits soll sich dieser, in der Kernzone, frei entwickeln dürfen. Im Perimeter gelten darum verschiedene Regeln. So darf z. B. nur auf bestimmten Wegen mit den Velo gefahren werden.\nDas Management braucht solide, empirisch erhobene Daten zur Natur und zu den Besuchenden damit die Ziele von Nutzen und Schürzen erreicht werden können. Das Besuchermonitoring deckt den zweiten Teil dieser notwendigen Daten ab. Im Wildnispark Zürich sind dazu mehrere automatische Zählstellen in Betrieb. Die Zählstellen erfassen stundenweise die Besuchenden auf den Wegen. Einige Zählstellen erfassen richtungsgetrennt und / oder können zwischen verschiedenen Nutzergruppen wie Personen, die zu Fuss gehen, und Velofahrenden unterscheiden.\nIm Rahmen des Moduls Research Methods werden in dieser Fallstudie mehrere dieser automatischen Zählstellen genauer untersucht. Die Daten, welche im Besitz des WPZ sind, wurden bereits kalibriert. Das heisst, Zählungen während Wartungsarbeiten, bei Felhbetrieb o.ä. wurden bereits ausgeschlossen. Dies ist eine zeitintensive Arbeit und wir dürfen hier mit einem sauber aufbereiteten “Datenschatz” arbeiten.\nPerimeter des Wildnispark Zürichs mit den ungefähren Standorten von zwei ausgewählten automatischen Zählstellen.\nHinweis:\nDer Wildnispark wertet die Zahlen auf verschiedene Weise aus. So sind z. B. Jahresgänge (an welchen Monaten herrscht besonders viel Betrieb?) und die absoluten Nutzungszahlen bekannt. Vertiefte Auswertungen, die beispielsweise den Zusammenhang zwischen Besuchszahlen und dem Wetter untersuchen, werden nicht gemacht.\nUnsere Analysen in diesem Modul helfen dem Management, ein besseres Verständnis zum Verhalten der Besuchenden zu erlangen und bilden Grundlagen für Managemententscheide in der Praxis.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Einführung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/1_Einführung.html#hintergrund",
    "href": "fallstudie_s/1_Einführung.html#hintergrund",
    "title": "Einführung",
    "section": "",
    "text": "Die Zähler 211 und 502 erfassen sowohl Fussgänger:innen als auch Fahrräder. Die Erfassung erfolgt richtungsgetrennt.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Einführung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/1_Einführung.html#ziel",
    "href": "fallstudie_s/1_Einführung.html#ziel",
    "title": "Einführung",
    "section": "Ziel",
    "text": "Ziel\nIn dieser Fallstudie zeigen wir, welche Einflüsse die Covid19-Pandemie im Frühjahr 2020 auf die täglichen Besuchszahlen im Wildnispark Zürich hatte. Dabei setzen wir den Fokus auf die Dämmerung und die Nacht, den in diesen Zeiten sind Wildtiere (u.a. Rehe) besonders sensibel gegenüber Störungen. Wir untersuchen ebenfalls, wie sich die Besuchszhalen seit der Pandemie entwickelt haben und ob sie sich wieder dem Muster von vor der Pandemie annähern. Auch dabei ist die “dunkle” Tageszeit im Fokus.\nIn unsere Analysen ziehen wir auch weitere erklärende Faktoren wie Wetter, Wochentag, Kalenderwoche und Schulferien mit ein. Die statistischen Auswertungen erlauben und somit klare Rückschlüsse auf die Effekte der Faktoren und deren Stärke zu ziehen.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Einführung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/1_Einführung.html#grundlagen",
    "href": "fallstudie_s/1_Einführung.html#grundlagen",
    "title": "Einführung",
    "section": "Grundlagen",
    "text": "Grundlagen\nZur Verfügung stehen:\n\ndie stündlichen Zählungen von Fussgänger:innen und Velos an den Zählstellen\nMeteodaten (Temperatur, Sonnenscheindauer, Niederschlagssumme)\nR-Skripte mit Hinweisen zur Auswertung",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Einführung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/1_Einführung.html#aufbau-der-fallstudie",
    "href": "fallstudie_s/1_Einführung.html#aufbau-der-fallstudie",
    "title": "Einführung",
    "section": "Aufbau der Fallstudie",
    "text": "Aufbau der Fallstudie\nIn dieser Fallstudie erheben wir zuerst selbst Daten auf dem Grüntal, welche wir dann deskriptiv auswerten. Anschliessend beschäftigen wir uns mit den Daten aus dem Wildnispark Zürich, welche wir ebenfalls deskriptiv auswerten und auch sttistische Modelle damit programmieren. Diese Ergebnisse werden dann im Abschlussbericht dokumentiert.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Einführung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/2_Besuchermonitoring.html",
    "href": "fallstudie_s/2_Besuchermonitoring.html",
    "title": "Monitoring",
    "section": "",
    "text": "Einführung und Installation\nEs gibt eine Vielzahl an möglichen Methoden zur Erfassung der Besuchszahlen. Automatische Zählgeräte bieten die Möglichkeit lange und durchgehende Zeitreihen zu erfassen. Inputs dazu, wie diese ausgewertet werden können, erhält ihr in dieser Aufgabe.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Monitoring</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/2_Besuchermonitoring.html#ziele",
    "href": "fallstudie_s/2_Besuchermonitoring.html#ziele",
    "title": "Monitoring",
    "section": "Ziele",
    "text": "Ziele\n\nDie Studierenden können das eingesetzte Zählgerät installieren und kennen die Vor- und Nachteile verschiedener Methoden.\nDie Studierenden können die Daten auslesen und explorativ analysieren.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Monitoring</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/2_Besuchermonitoring.html#grundlagen",
    "href": "fallstudie_s/2_Besuchermonitoring.html#grundlagen",
    "title": "Monitoring",
    "section": "Grundlagen",
    "text": "Grundlagen\nDie Geräte werden innerhalb der unten eingezeichneten Elipsen platziert. Damit soll überprüft werden, wie stark frequentiert die Waldränder der ökologisch aufgewerteten Seeparzelle sind.\n\nDatenschutz ist ein wichtiges Thema. Die Besuchenden werden über den Zweck der Kameras informiert, die Daten nach der Bearbeitung wieder gelöscht und nicht weitergegeben.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Monitoring</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/2_Besuchermonitoring.html#auswertung",
    "href": "fallstudie_s/2_Besuchermonitoring.html#auswertung",
    "title": "Monitoring",
    "section": "Auswertung",
    "text": "Auswertung\nNach den Felderhebungen\nNachdem die Kameras für zwei Wochen im Einsatz standen, sichten wir zusammen die Ergebnisse.\nDa die Anzahl Passagen auf der Seeparzelle keine schöne Auswertung erlauben, arbeiten wir ab jetzt mit einem Datensatz aus dem WPZ. Die Vorteile für euch sind:\n\nihr habt genügend Daten für die Auswertung mit R und\ndie Daten sind im selben Format wir für die späteren Aufgaben.\n\nHierkönnt ihr die Daten herunterladen.\n\nAufgabe 1: Vorarbeiten\n\nÜberlegt euch mögliche Darstellungsformen für die Anzahl Passagen und die beobachteten Aktivitäten an den untersuchten Standorten.\nSkizziert eure Ideen mittels Stift und Papier.\n\n\n\nAufgabe 2: Darstellung in R\nR bietet sehr viele Optionen zur Analyse und zur Darstellung der Daten. Nehmt bitte den bereitgestellten Datensatz zur Hand und visualisiert eure Ideen mit R.\nUntenstehend sind einige Ideen zur Umsetzung:\n–&gt; Erklärt dem Plenum nächste Woche was ihr gemacht habt, was eure Daten zeigen und präsentiert diese einfachen Plots.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Monitoring</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/3_Aufgabenstellung_WPZ.html",
    "href": "fallstudie_s/3_Aufgabenstellung_WPZ.html",
    "title": "Aufgabenstellung Abschlussbericht",
    "section": "",
    "text": "Ziele\nIhr habt selbst ein (kleines) Besuchermonitoring auf dem Grüental durchgeführt und euch bereits mit dem WPZ beschäftigt. Die Aufgaben im Zusammenhang mit dem Grüental sind abgeschlossen und wir beschäftigen uns ab jetzt ausschliesslich mit dem WPZ.\nIm Rahmen unserer Analyse programmieren wir multivariate Modelle, welche den Zusammenhang zwischen der Anzahl Besuchenden und verschiedenen Einflussfaktoren beschreiben. Dank den Modellen können wir sagen, wie die Besucher:innen auf die untersuchten Faktoren reagiert haben (siehe dazu auch euren Forschungsplan sowie [Einführung], Ziele).\nKonkret sollen eure Fragestellungen aus dem Forschungsplan untersucht werden.\nFür “meine” Analysen habe ich folgende Fragestellungen formuliert:",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Aufgabenstellung Abschlussbericht</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/3_Aufgabenstellung_WPZ.html#ziele",
    "href": "fallstudie_s/3_Aufgabenstellung_WPZ.html#ziele",
    "title": "Aufgabenstellung Abschlussbericht",
    "section": "",
    "text": "Welchen Einfluss haben zeitliche Variablen (Wochentag, Ferien, Monat, Jahr, Phasen der Covid-Pandemie) und Wetterparameter (Sonnenscheindauer, Höchsttemperatur, Niederschlagssumme) auf die Besuchszahlen im WPZ am Tag, in der Dämmerung und in der Nacht?\nWie stark sind die jeweiligen Einflüsse, welche Effektrichtungen sind beobachtbar und welche der untersuchten Parameter sind signifikant?\nGibt es in den Effektrichtungen deutliche Unterschiede zwischen den Tageszeiten und wie können diese erklärt werden?\nWelches sind die mutmasslichen Auswirkungen dieser Nutzung auf das Verhalten der Rege im WPZ?\n\n\n\nJede Gruppe wertet Daten von einem Zähler aus. Sprecht miteinander ab, wer welchen Zähler behandelt (211 oder 502; Spezifikationen siehe [Einführung], Hinweis). Jeder Zähler soll nur von einer Gruppe ausgewertet werden!\nBezieht in eure Auswertungen den gesamten zur Verfügung stehenden Zeitraum ein.\nFür euren Zähler stehen Zahlen zu Fussgänger:innen und Velos zur Verfügung (siehe [Einführung], Hinweis). Entscheidet euch selbst, ob ihr Fussgänger:innen ODER Velos auswerten wollt. Die anderen Daten dürft ihr vernachlässigen.\nIm Bericht sollen die Informationen und Erfahrungen aus dem gesamten Verlauf der Fallstudie in geeigneter Weise einfliessen. Bezüglich der Felderhebung Grüental erwarten wir keine Angaben.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Aufgabenstellung Abschlussbericht</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/3_Aufgabenstellung_WPZ.html#erwartungen",
    "href": "fallstudie_s/3_Aufgabenstellung_WPZ.html#erwartungen",
    "title": "Aufgabenstellung Abschlussbericht",
    "section": "Erwartungen",
    "text": "Erwartungen\n\nStruktur / Aufbau\n\n\nAbstract / Zusammenfassung (wenn Bericht auf Deutsch, dann Zusammenfassung auch auf Deutsch). Im Abstract sollen alle Bestandteile des Berichts aufgenommen sein.\nEinleitung (hier können allenfalls Elemente / Teile aus den Forschungsplänen übernommen werden)\nFragestellung (siehe oben; die Fragestellung ist vorgegeben, darf aber für den Bericht geschärft / ausformuliert und konkretisiert werden.)\nMethoden (aufschlussreiches Kapitel mit den statistischen Analysen)\nResultate (deskriptive Statistik, multivariates Modell; kurzer Fliesstext sowie die notwendigen Tabellen und eine Auswahl möglichst informativer Grafiken)\nDiskussion (Diskussion der deskriptiven Analysen und der Modellergebnisse; dieser Abschnitt sollte die eigenen Resultate auch im Zusammenhang mit aktueller Fachliteratur reflektieren.)\nLiteraturverzeichnis (Tipp: Das Literaturverzeichnis sollte vollständig sein, sowie formal korrekt und einheitlich daherkommen. Wir erwarten speziell in der Diskussion eine Abstützung auf aktuelle Fachliteratur. Auf Moodle haben wir euch eine Auswahl relevanter Papers bereitgestellt.)\nAnhang (für alle Auswertungen relevanter R-Code in geeigneter Form)\n\n\nGesamtumfang max. 12’000 Zeichen (inkl. Leerzeichen; exkl. Tabellen, Literaturverzeichnis und Anhang)\nAbgabe am 14.1.2024 per Mail an hoce@zhaw.ch",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Aufgabenstellung Abschlussbericht</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/3_Aufgabenstellung_WPZ.html#bewertungskriterien",
    "href": "fallstudie_s/3_Aufgabenstellung_WPZ.html#bewertungskriterien",
    "title": "Aufgabenstellung Abschlussbericht",
    "section": "Bewertungskriterien",
    "text": "Bewertungskriterien\n\nIst die Methode klar und verständlich formuliert?\nSind die deskriptiven Analysen klar beschrieben und geeignet visualisiert?\nIst die Variablenselektion klar beschrieben, plausibel und nachvollziehbar?\nSind die Modellresultate in Text- und Tabellenform korrekt beschrieben und geeignet visualisiert?\nIst die Diskussion klar formuliert und inhaltlich schlüssig?\nWie gut ist die Diskussion auf relevante und aktuelle Fachliteratur abgestützt?\nZusätzliche bewerten wir die inhaltliche Dichte der Arbeit und die formale Qualität (Sprache, Struktur, Aufbau, Darstellung, Literaturverzeichnis, Umgang mit Literatur im Text)\n\nZusammensetzung der Fallstudiennote:\n\nFallstudie-Leistungsnachweis 1 - Forschungsplan: 30 %\nFallstudie-Leistungsnachweis 2 - Multivariate Analyse: 70 %",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Aufgabenstellung Abschlussbericht</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/4_Projektierung.html",
    "href": "fallstudie_s/4_Projektierung.html",
    "title": "Projektierung",
    "section": "",
    "text": "Vorbereitung\nVor den eigentlichen Auswertungen müssen einige Vorbereitungen unternommen werden. Die Zeit, die man hier investiert, wird in der späteren Projektphase um ein Mehrfaches eingespart.\nWie im Unterricht am Morgen empfehle auch ich mit Projekten zu arbeiten, da diese sehr einfach ausgetauscht (auf verschiedene Rechner) und somit auch reproduziert werden können. Wichtig ist, dass es keine absoluten Arbeitspfade sondern nur relative gibt. Der Datenimport (und -export) kann mithilfe dieser relativen Pfade stark vereinfacht werden. –&gt; Kurz gesagt: Projekte helfen alles am richtigen Ort zu behalten (mehr zur Arbeit mit Projekten: Link).\n–&gt; File / New Project",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Projektierung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/4_Projektierung.html#vorbereitung",
    "href": "fallstudie_s/4_Projektierung.html#vorbereitung",
    "title": "Projektierung",
    "section": "",
    "text": "Erstellt an einem passenden Speicherort (evtl. onedrive für das gemeinsame Arbeiten an einem Projekt) ein neues Projekt mit einem treffenden Namen:",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Projektierung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/4_Projektierung.html#aufgabe-1-projektaufbau",
    "href": "fallstudie_s/4_Projektierung.html#aufgabe-1-projektaufbau",
    "title": "Projektierung",
    "section": "Aufgabe 1: Projektaufbau",
    "text": "Aufgabe 1: Projektaufbau\nHinweise:\nNutzt für allen Text, welcher nicht im Code integriert ist, das Symbol #. Wenn ihr den Text als Titel definieren wollt, so dass er in der Übersicht erscheint, könnnen vor dem Wort “#” und nach dem Wort “####” eingefügt werden.\n\n# Texte, vor denen ein # und nach denen #### stehen, sind Überschriften\n\n# Ich bin eine Überschrift ####\n\n# Texte, vor denen ein # steht, erklaeren den Ablauf\n\n# Dann folgen die Arbeitsschritte\n1 + 1\n\n# Wenn man auf \"Outline\" klickt (oder CTRL + SHIFT + O),\n# öffnet sich die Übersicht zu den Überschriften\n\nTipps:\n\nAlt + - = &lt;-\nCtrl + Shift + C = # vor der ausgewählten Zeile\n\nAufbau eines Skripts\nZuerst immer den Titel des Projekts sowie den Autor/ die Autorin des Skripts nennen. Hier soll auch die Herkunft der Daten ersichtlich sein und falls externe Daten verwendet werden, sollte geklärt werden, wer Dateneigentümer ist (WPZ und Meteo Schweiz).\nIm Skript soll immer die Ordnerstruktur des Projekts genannt werden. So kann der Arbeitsvorgang auf verschiedenen Rechnern einfach reproduziert werden (ich verwende hier ein Projektordner mit den Unterordnern __scripts, data, results).\nBeschreibt zudem kurz die verwendeten Meteodaten (siehe dazu Metadata Meteodaten, –&gt; order_XXX_legend.txt)\nEin Skript kann in R eigentlich immer (mehr oder weniger) nach dem selbem Schema aufgebaut sein. Dieses Schema enthällt bei uns folgende Kapitel:\n\nMetadaten und Definitionen\nDatenimport,\nVorbereitung,\nDeskriptive Analyse und Visualisierung und\nMultifaktorielle Analyse und Visualisierung.\n\nBereitet euer Skript mit diesen Kapitel vor.\n\n# .###########################################################################################\n# Einfluss von COVID19 auf das Naherholungsverhalten in WPZ ####\n# Fallstudie Modul Research Methods, HS22. Autor/in ####\n# .##########################################################################################\n\n# .##########################################################################################\n# METADATA UND DEFINITIONEN ####\n# .##########################################################################################\n\n# Datenherkunft ####\n# ...\n\n# .##########################################################################################\n# 1. DATENIMPORT #####\n# .##########################################################################################\n\nIn einem Bericht ist es schön, wenn die Abbildung einheitlich sind. Dafür braucht es u.a. eine Farbpalette. Ich definiere meine Auswahl bereits hier; das hat den Vorteil, dass man die Farbnamen nur einmal schreiben muss und später die selbst definierte Palette unter der Variable “mycolors” abrufen kann.\n\nmycolors &lt;- c(\"orangered\", \"gold\", \"mediumvioletred\", \"darkblue\")",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Projektierung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/4_Projektierung.html#aufgabe-2-laden-der-bibliotheken",
    "href": "fallstudie_s/4_Projektierung.html#aufgabe-2-laden-der-bibliotheken",
    "title": "Projektierung",
    "section": "Aufgabe 2: Laden der Bibliotheken",
    "text": "Aufgabe 2: Laden der Bibliotheken\n\nLädt nun die nachfolgenden, benoetigten Bibliotheken.\nDiese habt ihr, falls nötig, im Kapitel Vorbereitung installiert.\n\n\n# Benoetigte Bibliotheken ####\nlibrary(\"ggplot2\") # Data wrangling und pipeing\nlibrary(\"lubridate\") # Arbeiten mit Datumsformaten\nlibrary(\"ggpubr\") # to arrange multiple plots in one graph\nlibrary(\"PerformanceAnalytics\") # Plotte Korrelationsmatrix\nlibrary(\"MuMIn\") # Multi-Model Inference\nlibrary(\"AICcmodavg\") # Modellaverageing\nlibrary(\"fitdistrplus\") # Prueft die Verteilung in Daten\nlibrary(\"lme4\") # Multivariate Modelle\nlibrary(\"blmeco\") # Bayesian data analysis using linear models\nlibrary(\"sjPlot\") # Plotten von Modellergebnissen (tab_model)\nlibrary(\"lattice\") # einfaches plotten von Zusammenhängen zwischen Variablen\nlibrary(\"readr\")",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Projektierung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/4_Projektierung.html#aufgabe-3-zeitliche-definitionen",
    "href": "fallstudie_s/4_Projektierung.html#aufgabe-3-zeitliche-definitionen",
    "title": "Projektierung",
    "section": "Aufgabe 3: Zeitliche Definitionen",
    "text": "Aufgabe 3: Zeitliche Definitionen\nWir lesen später zwei verschiedene Datensätze ein. Beide sollen exakt denselben Zeitraum umfassen. Definiert dazu den ersten und letzten Tag gemäss den vorhandenen Zähldaten.\n\ndepo_start &lt;- as.Date(\"2017-01-01\")\ndepo_end &lt;- as.Date(\"2022-7-31\")\n\nEin Teil unserer Auswertungen ist der Einfluss der Corona-Lockdown auf das Besuchsverhalten.\n-Wir müssen also Start und Ende der beiden Lockdowns in der Schweiz definieren:\n\nlock_1_start_2020 &lt;- as.Date(\"2020-03-16\")\nlock_1_end_2020 &lt;- as.Date(\"2020-05-11\")\n\nlock_2_start_2021 &lt;- as.Date(\"2020-12-22\")\nlock_2_end_2021 &lt;- as.Date(\"2021-03-01\")\n\nEbenfalls müssen die erste und letzte Kalenderwoche der Untersuchungsfrist definiert werden. Diese werden bei wochenweisen Analysen ausgeklammert da sie i.d.R. unvollständig sind (das ist ein späterer Arbeitsschritt). Geht wie oben vor. Tipp: der Befehl isoweek() liefert euch die Kalenderwoche.\nFerienzeiten können einen grossen Einfluss auf das Besucheraufkommen haben. Die relevanten Ferienzeiträume müssen daher bekannt sein (heruntergeladen von https://www.schulferien.org/schweiz/ferien/2020/).\nLest das bereitgestellte .csv mit den Ferienzeiträumen ein und speichert es unter schulferien.\n\nschulferien &lt;- read_delim(\"datasets/fallstudie_s/ferien.csv\", \",\")\n\nNun sind alle Vorbereitungen gemacht, die Projektstruktur aufgebaut und die eigentliche Arbeit kann im nächsten Schritt beginnen.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Projektierung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/5_Datenverarbeitung.html",
    "href": "fallstudie_s/5_Datenverarbeitung.html",
    "title": "Datenverarbeitung",
    "section": "",
    "text": "Aufgabe 1: Zähldaten",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Datenverarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/5_Datenverarbeitung.html#aufgabe-1-zähldaten",
    "href": "fallstudie_s/5_Datenverarbeitung.html#aufgabe-1-zähldaten",
    "title": "Datenverarbeitung",
    "section": "",
    "text": "1a)\nDie Projektstruktur steht. Nun können die Daten eingelesen und die nötigen Datentypen definiert werden.\nLädt die Daten zuerst von Moodle herunter.\nHinweise:\n\nSiehe [Einführung] für den Standort der Zähler 211 und 502.\nAlle für die Fallstudie Profil S benötigten Daten könnt ihr unter folgendem Link herunterladen.\n\n\nZähldaten zu eurem Standort (211_sihlwaldstrasse_2017_2022.csv, 502_sihluferweg_2016_2022.csv)\nMeteodaten (order_105742_data.txt)\n\nDie Zähldaten des WPZ wurden vorgängig bereinigt (z.B. wurden Stundenwerte entfernt, an denen am Zähler Wartungsarbeiten stattgefunden haben). Das macht es für uns einfach, denn wir können die Daten ohne vorgängige Bereinigung einlesen. Behaltet aber im Hinterkopf, dass die Datenaufbereitung, die Datenbereinigung mit viel Aufwand verbunden ist.\n\nLest die Zählaten ein, speichert ihn unter der Variable depo und sichtet den Datensatz (z.B. str(), head(), view() usw.).\n\n\n\nMusterlösung\n# Speicherort sowie Dateiname anpassen\ndepo &lt;- read_delim(\"./HIER RELATIVEN DATEIPFAD EINGEBEN\", \"HIER SEPERATOR EINGEBEN\")\n\n\nHinweis: Im Stundenformat zeigen die Werte bei 11:00 die Zähldaten zwischen 11:00 bis 12:00 Uhr.\n\n\nMusterlösung\n# lese die Daten ein\ndepo &lt;- read_delim(\"datasets/fallstudie_s/WPZ/211_sihlwaldstrasse_2017_2022.csv\", \";\")\n\n# erstes Sichten und anpassen der Datentypen\nstr(depo)\n\n\n\n\n1b)\n\nNun muss das Datum als solches definiert werden. Welches Format hat es (im Code: format = “HIER DATUMSFORMAT”)?\n\n\n\nMusterlösung\ndepo &lt;- depo |&gt;\n  mutate(\n    Datetime = as.POSIXct(DatumUhrzeit, format = \"HIER STEHT DAS DATUMSFORMAT\", tz = \"CET\"),\n    # nun schreiben wir uns das Datum in eine seperate Spalte\n    Datum = as.Date(Datetime)\n  )\n\n\n\n\nMusterlösung\n# hier der code mit dem richtigen Format\ndepo &lt;- depo |&gt;\n  mutate(\n    Datetime = as.POSIXct(DatumUhrzeit, format = \"%d.%m.%Y %H:%M\", tz = \"CET\"),\n    Datum = as.Date(Datetime)\n  )\n\n\n\n\n1c)\nIhr könnt selbst wählen, ob ihr Fussgänger:innen oder Fahrräder untersuchen wollt (je nachdem ob sie in eurem Datensatz vorhanden sind).\n\nEntfernt die überflüssigen Spalten aus dem Datensatz. Ich schlage vor, dass ihr dafür den Befehl dplyr::select() verwendet.\n\n\n\nMusterlösung\n# In dieser Auswertung werden nur Personen zu Fuss betrachtet!\n# it select werden spalten ausgewaehlt oder eben fallengelassen\ndepo &lt;- depo |&gt;\n  dplyr::select(-c(Velo_IN, Velo_OUT, Zeit, DatumUhrzeit))\n\n\n\n\n1d)\n\nBerechnen des Totals (IN + OUT), da dieses in den Daten nicht vorhanden ist (wiederum mit piping).\n\nTipp: Wenn man R sagt: “addiere mir Spalte x mit Spalte y”, dann macht R das für alle Zeilen in diesen zwei Spalten. Wenn man nun noch sagt: “speichere mir das Ergebnis dieser Addition in einer neuen Spalte namens Total”, dann hat man die Aufgabe bereits gelöst. Arbeitet mit mutate()).\nHinweis: Ihr habt das auch schon in Kapitel [Einführung und Installation] gemacht.\n\nEntfernt nun alle NA-Werte mit na.omit().\n\n\n\nMusterlösung\n# Berechnen des Totals, da dieses in den Daten nicht vorhanden ist\ndepo &lt;- depo |&gt;\n  mutate(Total = Fuss_IN + Fuss_OUT)\n\n# Entferne die NA's in dem df.\ndepo &lt;- na.omit(depo)",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Datenverarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/5_Datenverarbeitung.html#aufgabe-2-meteodaten",
    "href": "fallstudie_s/5_Datenverarbeitung.html#aufgabe-2-meteodaten",
    "title": "Datenverarbeitung",
    "section": "Aufgabe 2: Meteodaten",
    "text": "Aufgabe 2: Meteodaten\n\n2a)\n\nLest die Meteodaten ein und speichert sie unter meteo.\n\n\n\nMusterlösung\n# Einlesen\nmeteo &lt;- read_delim(\"datasets/fallstudie_s/WPZ/order_105742_data.txt\", \";\")\n\n\n\n\n2b)\n\nAuch hier müssen die Datentypen manuell gesetzt werden.\n\nTipp: Das Datum wird als Integer erkannt. Zuerst muss es in Text umgewandelt werden aus dem dann das eigentliche Datum herausgelesen werden kann. Das ist mühsam - darum hier der Code.\n\n\nMusterlösung\nmeteo &lt;- mutate(meteo, time = as.Date(as.character(time), \"%Y%m%d\"))\n\n\nDie Zeitangaben sind in UTC: 00:40 UTC = 02:40 Sommerzeit = 01:40 Winterzeit, Beispiel: 13 = beinhaltet Messperiode von 12:01 bis 13:00\n–&gt; Da wir mit Tageshöchstwerten oder -summen rechnen, können wir zum Glück ignorieren, dass das nicht mit den Daten der Zählstellen übereinstimmt. Learning: es ist zentral immer die Metadaten zu checken.\nHinweis Was ist eigentlich Niederschlag:\nLink Meteo Schweiz\n\nWerden den anderen Spalten die richtigen Typen zugewiesen? Falls nicht, ändert die Datentypen.\nNun schneiden wir den Datensatz auf die Untersuchungsdauer zu.\nDann müssen auch hier alle nicht verfügbare Werte (NA’s) herausgefiltert werden.\nPrüft nun, wie die Struktur des data.frame (df) aussieht und ob alle NA Werte entfernt wurden (sum(is.na(df$Variable))). Stimmen alle Datentypen?\n\n\n\nMusterlösung\n# Die eigentlichen Messwerte sind alle nummerisch\nmeteo &lt;- meteo |&gt;\n    mutate(\n        tre200nx = as.numeric(tre200nx),\n        tre200jx = as.numeric(tre200jx),\n        rre150n0 = as.numeric(rre150n0),\n        rre150j0 = as.numeric(rre150j0),\n        sremaxdv = as.numeric(sremaxdv)\n    ) |&gt;\n    filter(time &gt;= depo_start, time &lt;= depo_end) # schneide dann auf Untersuchungsdauer\n\n# Was ist eigentlich Niederschlag:\n# https://www.meteoschweiz.admin.ch/home/wetter/wetterbegriffe/niederschlag.html\n\n# Filtere Werte mit NA\nmeteo &lt;- na.omit(meteo)\n# Pruefe ob alles funktioniert hat\nstr(meteo)\nsum(is.na(meteo)) # zeigt die Anzahl NA's im data.frame an",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Datenverarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/5_Datenverarbeitung.html#aufgabe-3-datenvorverarbeitung-mutationen",
    "href": "fallstudie_s/5_Datenverarbeitung.html#aufgabe-3-datenvorverarbeitung-mutationen",
    "title": "Datenverarbeitung",
    "section": "Aufgabe 3: Datenvorverarbeitung (Mutationen)",
    "text": "Aufgabe 3: Datenvorverarbeitung (Mutationen)\n\n3a)\nJetzt fügen wir viele Convinience Variabeln hinzu. Wir brauchen:\n\nWochentag; der Befehl dazu ist wday(). Danach als Faktor speichern.\nWerktag oder Wochenende als Faktor. Der Code dazu könnte so aussehen:\n\n\n\nMusterlösung\n  ...|&gt;\n  mutate(Wochenende = ifelse(Wochentag %in% c(6,7), \"Wochenende\", \"Werktag\")) |&gt;\n  mutate(Wochenende = as.factor(Wochenende)) |&gt;\n  ...\n\n\nje als Faktor: 3. Kalenderwoche: isoweek() 4. Monat: month() 5. Jahr: year()\n\n\nMusterlösung\ndepo &lt;- depo |&gt;\n  # wday sortiert die Wochentage automatisch in der richtigen Reihenfolge\n  mutate(\n    Wochentag = wday(Datetime, week_start = 1),\n    Wochentag = factor(Wochentag),\n    # Werktag oder Wochenende hinzufuegen\n    Wochenende = ifelse(Wochentag %in% c(6, 7), \"Wochenende\", \"Werktag\"),\n    Wochenende = as.factor(Wochenende),\n    # Kalenderwoche hinzufuegen\n    KW = isoweek(Datetime),\n    KW = factor(KW),\n    # monat und Jahr\n    Monat = month(Datetime),\n    Monat = factor(Monat),\n    Jahr = year(Datetime),\n    Jahr = factor(Jahr))\n\n\nDies machen wir auch mit dem “meteo” Datensatz.\n\nWiederum bitte Wochentag, Werktag oder Wochenende, Kalenderwoche, Monat und Jahr. Ebenfalls alles als Faktor speichern.\n\n\n\nMusterlösung\n# Wir gruppieren die Meteodaten noch nach Kalenderwoche und Werktag / Wochenende\n# Dafür brauchen wir zuerst diese als Convenience Variablen\nmeteo &lt;- meteo |&gt;\n  # wday sortiert die Wochentage automatisch in der richtigen Reihenfolge\n  mutate(\n    Wochentag = wday(time, week_start = 1),\n    Wochentag = factor(Wochentag),\n    # Werktag oder Wochenende hinzufuegen\n    Wochenende = ifelse(Wochentag %in% c(6, 7), \"Wochenende\", \"Werktag\"),\n    Wochenende = as.factor(Wochenende),\n    # Kalenderwoche hinzufuegen\n    KW = isoweek(time),\n    KW = factor(KW),\n    # monat und Jahr\n    Monat = month(time),\n    Monat = factor(Monat),\n    Jahr = year(time),\n    Jahr = factor(Jahr))\n\n\n\nSpäter werden wir nicht nur Analysen pro Tag machen, sondern auch zusammengefasst nach Woche. Dafür müssen wir nun den meteo-Datensaz gruppieren und den mean berechnen. Hier der Code dazu, wie das aussehen könnte:\n\n\n\nMusterlösung\nmeteo_day &lt;- meteo |&gt;\n  group_by(Jahr, Monat, KW, Wochenende) |&gt;\n  summarise(\n    tre200nx = mean(tre200nx),\n    tre200jx = mean(tre200jx),\n    rre150n0 = mean(rre150n0),\n    rre150j0 = mean(rre150j0),\n    sremaxdv= mean(sremaxdv))\n\n\nWieder zurück zum Depo-Datensazt.\nIch mache den folgenden Punkt nachgelagert, da zu viele Operationen in einem Schritt auch schon mal etwas durcheinander erzeugen können.\nPhase Covid (Code untenstehend). Wir definieren 5 Phasen:\n\nvon Anfang Untersuchungsperiode bis 1 Jahr vor Lockdown 1\nLockdown 1\nzwischen den Lockdowns\nLockdown 2\nEnde 2. Lockdown bis Ende Untersuchungsperiode\nWir packen alle Phasen (normal, die beiden Lockdowns und Covid aber ohne Lockdown) in eine Spalte –&gt; long-format ist schöner (und praktischer für das plotten) als wide-format.\nSpäter im multivariaten Modell werden die Levels der Variablen (z.B. bei der Phase Covid: Pre, Normal, Lockdown 1 und 2, Covid) per “default” alphabetisch geordnet und die Effektstärken der einzelnen Levels gegenüber dem ersten Level gerechnet. Das macht wenig Sinn, den die Levels sind nicht alphabetisch, sondern gemäss der Liste oben. Das passen wir ebenfalls an.\nHier der Code dazu:\n\n\n\nMusterlösung\ndepo &lt;- depo |&gt;\n    mutate(Phase = case_when(\n        Datetime &lt; lock_1_start ~ \"Pre\",\n        Datetime &gt;= lock_1_start & Datetime &lt;= lock_1_end ~ \"Lockdown_1\",\n        Datetime &gt; lock_1_end & Datetime &lt; lock_2_start ~ \"inter\",\n        Datetime &gt;= lock_2_start & Datetime &lt;= lock_2_end ~ \"Lockdown_2\",\n        Datetime &gt; lock_2_end ~ \"Post\"\n    ))\n\n# hat das gepklappt?!\nunique(depo$Phase)\n\ndepo &lt;- depo |&gt;\n    # mit factor() koennen die levels direkt einfach selbst definiert werden.\n    # wichtig: speizfizieren, dass aus R base, ansonsten kommt es zu einem\n    # mix-up mit anderen packages\n    mutate(Phase = base::factor(Phase, levels = c(\"Pre\", \"Lockdown_1\", \"Inter\", \"Lockdown_2\", \"Post\")))\n\nstr(depo)\n\n\nNeben dem Lockdown können auch die Schulferien einen Einfluss auf die Besuchszahlen haben. Wir haben die Schulferien bereits als .csv eingelesen. Allerdings können wir die Schulferien nicht mit der case_when()-Funktion zuweisen, da diese mit dieser Funktion alle Vektoren im Datensatz “schulferien” verglichen werden, und nicht elementweise für jede Zeile im “depo”-Datensatz. Dies führt dazu, dass die Bedingungen nur einmal überprüft werden und dann auf den gesamten Vektor angewendet werden, anstatt Zeile für Zeile.\n\nWeil dies etwas kompliziert ist, hier eine Funktion zur Zuweisung der Ferien, welche ihr kopieren könnt:\n\n\n\nMusterlösung\n# schreibe nun eine Funktion zur zuweisung Ferien. WENN groesser als start UND kleiner als\n# ende, DANN schreibe ein 1\nfor (i in 1:nrow(schulferien)) {\n  depo$Ferien[depo$Datum &gt;= schulferien[i, \"Start\"] & depo$Datum &lt;= schulferien[i, \"Ende\"]] &lt;- 1\n}\ndepo$Ferien[is.na(depo$Ferien)] &lt;- 0\n\n# als faktor speichern\ndepo$Ferien &lt;- factor(depo$Ferien)\n\n\n\n\n3b)\n\nNun soll noch die volle Stunde als Integer im Datensatz stehen. Macht das mit dem Befehl hour()\n\n\n\nMusterlösung\n# Fuer einige Auswertungen muss auf die Stunden als nummerischer Wert zurueckgegriffen werden\ndepo$Stunde &lt;- hour(depo$Datetime)\n# hour gibt uns den integer\ntypeof(depo$Stunde)\n\n\n\n\n3c)\nDie Daten wurden durch den WPZ kalibriert (Kommastellen).\n\nRundet sie auf 0 Nachkommastellen (Ganzzahl; unser Modell kann nicht mit Kommazahlen in der ahbängigen Variable umgehen). Der Befeht lautet round()\nDefiniert sie sicherheitshalber als Integer\nMacht das für IN, OUT und Total.\n\n\n\nMusterlösung\ndepo$Total &lt;- round(depo$Total, digits = 0)\ndepo$Fuss_IN &lt;- round(depo$Fuss_IN, digits = 0)\ndepo$Fuss_OUT &lt;- round(depo$Fuss_OUT, digits = 0)\n\n\n\n\n3d) Tageszeit\nWir setzen den Fokus unserer Untersuchung auf die Veränderung der Besuchszahlen in der Abend- und Morgendämmerung sowie der Nacht. Dafür müssen wir diese tageszeitliche Einteilung der Daten erst machen. Da dies über den Umfang dieser Fallstudie geht, liefere ich euch hier den Code dazu.\nDie wichtigsten Punkte:\n\nDie Tageslänge wurde für den Standort Zürich (Zeitzone CET) mit dem Package “suncalc” berechnet. Dabei wurden Sommer- und Winterzeit berücksichtigt.\nDie Einteilung der Tageszeit beruht auf dem Start und dem Ende der astronomischen Dämmerung sowie der Golden Hour. Der Morgen und der Abend wurden nach dieser Definition berechnet und um je eine Stunde Richtung Tag verlängert.\nUntenstehenden Code könnt ihr einfach kopieren.\n\nHinweis: damit case_when() funktioniert, müsst ihr dplyr Version als 1.1.1 oder neuer haben.\n\n\nMusterlösung\n# Einteilung Standort Zuerich\nLatitude &lt;- 47.38598\nLongitude &lt;- 8.50806\n\n# Start und das Ende der Sommerzeit:\n# https://www.schulferien.org/schweiz/zeit/zeitumstellung/\n\n\n# Welche Zeitzone haben wir eigentlich?\n# Switzerland uses Central European Time (CET) during the winter as standard time,\n# which is one hour ahead of Coordinated Universal Time (UTC+01:00), and\n# Central European Summer Time (CEST) during the summer as daylight saving time,\n# which is two hours ahead of Coordinated Universal Time (UTC+02:00).\n# https://en.wikipedia.org/wiki/Time_in_Switzerland\n\n# Was sind Astronomische Dämmerung und Golden Hour ueberhaupt?\n# https://sunrisesunset.de/sonne/schweiz/zurich-kreis-1-city/\n# https://www.rdocumentation.org/packages/suncalc/versions/0.5.0/topics/getSunlightTimes\n\n# Wir arbeiten mit folgenden Variablen:\n# \"nightEnd\" : night ends (morning astronomical twilight starts)\n# \"goldenHourEnd\" : morning golden hour (soft light, best time for photography) ends\n# \"goldenHour\" : evening golden hour starts\n# \"night\" : night starts (dark enough for astronomical observations)\n\nlumidata &lt;-\n    getSunlightTimes(\n        date = seq.Date(depo_start, depo_end, by = 1),\n        keep = c(\"nightEnd\", \"goldenHourEnd\", \"goldenHour\", \"night\"),\n        lat = Latitude,\n        lon = Longitude,\n        tz = \"CET\"\n    ) |&gt;\n    as_tibble()\n\n# jetzt haben wir alle noetigen Angaben zu Sonnenaufgang, Tageslaenge usw.\n# diese Angaben koennen wir nun mit unseren Zaehldaten verbinden:\ndepo &lt;- depo |&gt;\n    left_join(lumidata, by = c(Datum = \"date\"))\n\ndepo &lt;- depo |&gt;\n    mutate(Tageszeit = case_when(\n        Datetime &gt;= nightEnd & Datetime &lt;= goldenHourEnd ~ \"Morgen\",\n        Datetime &gt; goldenHourEnd & Datetime &lt; goldenHour ~ \"Tag\",\n        Datetime &gt;= goldenHour & Datetime &lt;= night ~ \"Abend\",\n        .default = \"Nacht\"\n    )) |&gt;\n    mutate(Tageszeit = factor(Tageszeit, levels = c(\"Morgen\", \"Tag\", \"Abend\", \"Nacht\"), ordered = TRUE))\n\n# behalte die relevanten Var\ndepo &lt;- depo |&gt; dplyr::select(-nightEnd, -goldenHourEnd, -goldenHour, -night, -lat, -lon)\n\n# Plotte zum pruefn ob das funktioniert hat\nggplot(depo, aes(y = Datetime, color = Tageszeit, x = Stunde)) +\n    geom_jitter() +\n    scale_color_manual(values = mycolors)\n\nsum(is.na(depo))\n\n# bei mir hat der Zusatz der Tageszeit noch zu einigen NA-Wertren gefueht.\n# Diese loesche ich einfach:\ndepo &lt;- na.omit(depo)\n# hat das funktioniert?\nsum(is.na(depo))",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Datenverarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/5_Datenverarbeitung.html#aufgabe-4-aggregierung-der-stundendaten",
    "href": "fallstudie_s/5_Datenverarbeitung.html#aufgabe-4-aggregierung-der-stundendaten",
    "title": "Datenverarbeitung",
    "section": "Aufgabe 4: Aggregierung der Stundendaten",
    "text": "Aufgabe 4: Aggregierung der Stundendaten\n\n4a)\nUnsere Daten liegen im Stundenformat vor. Für einige Auswertungen müssen wir aber auf ganze Tage zurückgreifen können.\n\nDie Stundendaten müssen zu ganzen Tagen aggregiert werden. Macht das wiederum einer Pipe. Bezieht folgende Gruppierungen (group_by()) mit ein: Datum, Wochentag, Wochenende, KW, Monat, Jahr, Phase. Summiert die Zählmengen separat (Total, IN, OUT) auf und speichert das Resultat unter depo_d.\n\nTipp: Wenn man die Convinience Variablen als grouping variable einspeisst, dann werden sie in das neue df übernommen und müssen nicht nochmals hinzugefügt werden\n\n\nMusterlösung\ndepo_d &lt;- depo |&gt; \n  group_by(VARIABLE1, VARIABLE2, ...) |&gt;   # Gruppieren nach den Variablen\n  summarise(Total = sum(Fuss_IN + Fuss_OUT),# Berechnen der gewünschten Werte\n            Fuss_IN = sum(Fuss_IN),\n            ...\n\n\n\n\nMusterlösung\n# hier werden also pro Nutzergruppe und Richtung die Stundenwerte pro Tag aufsummiert\ndepo_d &lt;- depo |&gt;\n    group_by(Datum, Wochentag, Wochenende, KW, Monat, Jahr, Phase) |&gt;\n    summarise(\n        Total = sum(Fuss_IN + Fuss_OUT),\n        Fuss_IN = sum(Fuss_IN),\n        Fuss_OUT = sum(Fuss_OUT)\n    )\n# Wenn man die Convinience Variablen als grouping variable einspeisst, dann werden sie in\n# das neue df uebernommen und muessen nicht nochmals hinzugefuegt werden\n# pruefe das df\nhead(depo_d)\n\n\n\nErstellt nun einen Datensatz depo_daytime, in welchem ihr gruppiet nach:\n\n\nJahr\nMonat\nKalenderwoche\nPhase\nFerien\nWochenende oder Werktag\nTageszeit\n\n\n\nMusterlösung\n# nun gruppieren wir nicht nur nach Tag sondern auch noch nach Tageszeit\ndepo_daytime &lt;- depo |&gt;\n  group_by(Jahr, Monat, KW, Phase, Ferien, Wochenende, Tageszeit) |&gt;\n  summarise(\n    Total = sum(Fuss_IN + Fuss_OUT),\n    Fuss_IN = sum(Fuss_IN),\n    Fuss_OUT = sum(Fuss_OUT))\n\n\n\nWeiter benötigen wir für für die Berechnung der Verteilung der Besuchenden über den Tag die durchschnittliche Besucheranzahl pro Stunde (mean), unterteilt nach Tageszeit und Phase (Gruppierungen Tageszeit, Phase). Speichert das unter “mean_phase_d”.\n\n\n\nMusterlösung\nmean_phase_d &lt;- depo_daytime |&gt;\n  group_by(Phase, Tageszeit) |&gt;\n  summarise(\n    Total = mean(Total),\n    IN = mean(Fuss_IN),\n    OUT = mean(Fuss_OUT))\n\n\n\n\n4b)\n\nAggregiere die Stundenwerte nach dem Monat (Gruppierungen Monat, Jahr) und speichert das neue df unter depo_m.\n\nTipp: Braucht wiederum group_by() und summarise(). Nun brauchen wir nur noch das Total, keine Richtungstrennung mehr.\n\n\nMusterlösung\ndepo_m &lt;- depo |&gt;\n    group_by(Jahr, Monat) |&gt;\n    summarise(Total = sum(Total))\n\n\n\nFügt den neu erstellten df eine Spalte mit Jahr + Monat hinzu. Hier der fertige Code dazu:\n\n\n\nMusterlösung\ndepo_m &lt;- depo_m |&gt;\n    mutate(\n        Ym = paste(Jahr, Monat), # und mache eine neue Spalte, in der Jahr und\n        Ym = lubridate::ym(Ym)\n    ) # formatiere als Datum\n\n\n\nWiederholt diesen Schritt, diesmal aber mit der Gruppierung “Tageszeit” neben “Jahr” und “Monat” und speichert das Resultat unter “depo_m_daytime\n\n\n\nMusterlösung\n# Gruppiere die Werte nach Monat und TAGESZEIT\ndepo_m_daytime &lt;- depo |&gt;\n    group_by(Jahr, Monat, Tageszeit) |&gt;\n    summarise(Total = sum(Total))\n# sortiere das df aufsteigend (nur das es sicher stimmt)\n\ndepo_m_daytime &lt;- depo_m_daytime |&gt;\n    mutate(\n        Ym = paste(Jahr, Monat), # und mache eine neue Spalte, in der Jahr und\n        Ym = lubridate::ym(Ym)\n    ) # formatiere als Datum\n\n\n\n\n4c)\nMacht euch mit den Daten vertraut. Plottet sie, seht euch die df’s an, versteht, was sie representieren.\nZ.B. sind folgende Befehle und Plots wichtig:\n\nstr()\nsummarize()\nhead()\nScatterplot, x = Datum, y = Anzahl pro Zeiteinheit\nHistrogram\nusw.\n\nHinweis: Geht noch nicht zu weit mit euren Plots. Die Idee ist, dass man sich einen Überblick über die Daten verschafft und noch keine “analysierenden” Plots erstellt.\nNachdem nun alle Daten vorbereitet sind folgt im nächsten Schritt die deskriptive Analyse.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Datenverarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/6_Deskriptive_Analysen.html",
    "href": "fallstudie_s/6_Deskriptive_Analysen.html",
    "title": "Deskriptive Analysen",
    "section": "",
    "text": "Aufgabe 1: Verlauf der Besuchszahlen nach Monat",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Deskriptive Analysen</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/6_Deskriptive_Analysen.html#aufgabe-1-verlauf-der-besuchszahlen-nach-monat",
    "href": "fallstudie_s/6_Deskriptive_Analysen.html#aufgabe-1-verlauf-der-besuchszahlen-nach-monat",
    "title": "Deskriptive Analysen",
    "section": "",
    "text": "1a)\nNachdem wir die Projektstruktur aufgebaut haben und die Daten vorbereitet (inkl. aggregiert) sind, machen wir uns an die deskriptive Analyse. Dies macht immer Sinn. Bevor mach sich an die schliessende Statistik macht, muss man ein “Gefühl” für die Daten bekommen. Dies funktioniert am einfachsten mit explorativen Analysen.\nWir interessieren uns in den Analysen für 5 Zeitabschnitte:\n\nvon Anfang Untersuchungsperiode bis vor dem 1. Lockdown (pre)\nLockdown 1\nZwischen beiden Lockdowns\nLockdown 2\nEnde 2. Lockdown bis Ende Untersuchungsperiode\n\n\nPlottet den Verlauf der monatlichen Besuchszahlen an eurer Zählstelle. Auf der x-Achse steht dabei dabei Jahr und Monat (gespeichert im df depo_m), auf der y-Achse die monatlichen Besuchszahlen. Zeichnet auch die beiden Lockdown ein (Hinweis: rundet das Start- und Enddatum der Lockdowns auf den Monat, da im Plot die monatlichen Zahlen gezeigt werden).\n\nHaltet euch dabei an untenstehenden Plot:\n\n\n\n\n\n\n\n\n\n\n\nMusterlösung\nggplot(depo_m, mapping = aes(Ym, Total, group = 1)) + # group = 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird\n  # zeichne Lockdown 1\n  geom_rect(\n    mapping = aes(\n      xmin = ym(\"2020-3\"), xmax = ym(\"2020-5\"),\n      ymin = 0, ymax = max(Total + (Total / 100 * 10))),\n    fill = \"lightskyblue\", alpha = 0.2, colour = NA) +\n  # zeichne Lockdown 2\n  geom_rect(\n    mapping = aes(\n      xmin = ym(\"2020-12\"), xmax = ym(\"2021-3\"),\n      ymin = 0, ymax = max(Total + (Total / 100 * 10))),\n    fill = \"darkolivegreen2\", alpha = 0.2, colour = NA) +\n  geom_line(alpha = 0.6, linewidth = 1) +\n  scale_x_date(date_labels = \"%b%y\", date_breaks = \"6 months\") +\n  labs(title = \"\", y = \"Fussgänger:innen pro Monat\", x = \"Jahr\") +\n  theme_classic(base_size = 15) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n\n\nHinweis: - Nutzt zum plotten ggplot() - folgende Codeschnipsel helfen euch:\n\n\nMusterlösung\nggplot(data = depo_m, mapping = aes(Ym, Total, group = 1)) + # group 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird\n    # zeichne Lockdown 1; ein einfaches Rechteck. bestimme mit min und max die Dimensionen\n  geom_rect(\n    mapping = aes(\n      xmin = ym(\"2020-3\"), xmax = ym(\"2020-5\"),\n      ymin = 0, ymax = max(Total + (Total / 100 * 10))\n    ), # das Rechteck soll 10 % grösser als die maximale Besuchszahl sein\n    fill = \"lightskyblue\", alpha = 0.2, colour = NA\n  ) +\n  # zeichne Lockdown 2\n  ... +\n  # zeichne die Linie\n  geom_line(...) +\n  scale_x_date(...)+\n  theme_linedraw(base_size = 15) +\n  ...\n\n\n\nExportiert euren Plot mit ggsave() nach results. Breite = 20, Höhe = 10, Einheiten = cm, dpi = 1000\n\n\n\n1b)\nDer erste Plot zeigt sehr einfach, wie sich die Besuchszahlen allgemein entwickelt haben. Interessant ist aber auch, wie sie während den einzelnen Monaten zueinander stehen (z.B. “Waren im Mai 2020 mehr Menschen unterwegs als im Mai 2017?”). Dies zeigt uns folgender Plot:\n\n\n\n\n\n\n\n\n\n\n\nMusterlösung\nggplot(depo_m, aes(Monat, Total, group = Jahr, color = Jahr, linetype = Jahr)) +\n  geom_line(size = 2) +\n  geom_point() +\n  scale_colour_viridis_d() +\n  scale_linetype_manual(values = c(rep(\"solid\", 3), \"twodash\", \"twodash\", \"solid\")) +\n  scale_x_discrete(breaks = c(seq(0, 12, by = 1))) +\n  geom_vline(xintercept = c(seq(1, 12, by = 1)), linetype = \"dashed\", color = \"gray\") +\n  labs(title = \"\", y = \"Fussgänger:innen pro Monat\", x = \"Monat\") +\n  theme_classic(base_size = 15) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n\n\n\nErstellt diesen Plot und speichert ihn.\n\nHinweis: Dieser Plot wird erstellt mit dem Argument group, linetype und color innerhalb des _aes()__ Arguments. geom_line() wiederum zeichnet die Linien.\n\n\n1c)\nUnser Fokus liegt auf der dunklen Tageszeit. Wie verteilen sich die Besuchenden also auf Morgen, Tag, Abend und Nacht?\n\nFolgender Plot zeigt das. Erstellt und speichert ihn.\n\n\n\n\n\n\n\n\n\n\n\n\nMusterlösung\nggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) +\n  geom_area(position = \"fill\", alpha = 0.8) +\n  scale_fill_manual(values = mycolors) +\n  scale_x_date(date_labels = \"%b%y\", date_breaks = \"6 months\", \n               limits = c(min(depo_m_daytime$Ym), max = max(depo_m_daytime$Ym)), expand = c(0, 0)) +\n  geom_vline(xintercept = seq(as.Date(min(depo_m_daytime$Ym)), as.Date(max(depo_m_daytime$Ym)), \n                              by = \"6 months\"), linetype = \"dashed\", color = \"black\")+\n  theme_classic(base_size = 15) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), \n        legend.position = \"bottom\") +\n  labs(title = \"\", y = \"Verteilung Fussgänger:innen / Monat [%]\", x = \"Jahr\")\n\n\nFolgende Codeschnipsel helfen euch:\n\n\nMusterlösung\nggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) +\n  geom_area(...) +\n  scale_x_date(date_labels = \"%b%y\", date_breaks = \"6 months\", \n               limits = c(min(depo_m_daytime$Ym), max = max(depo_m_daytime$Ym)), expand = c(0, 0)) +\n  geom_vline(xintercept = seq(as.Date(min(depo_m_daytime$Ym)), as.Date(max(depo_m_daytime$Ym)), \n                              by = \"6 months\"), linetype = \"dashed\", color = \"black\")+\n  ...",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Deskriptive Analysen</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/6_Deskriptive_Analysen.html#aufgabe-2-wochengang",
    "href": "fallstudie_s/6_Deskriptive_Analysen.html#aufgabe-2-wochengang",
    "title": "Deskriptive Analysen",
    "section": "Aufgabe 2: Wochengang",
    "text": "Aufgabe 2: Wochengang\nNun möchten wir genauer untersuchen, wie sich die Besuchszahlen je nach Phase (Pre, Normal, Lockdown 1, Lockdown 2 und Covid) auf die Wochentage und Tageszeiten verteilen.\n\n2a)\n\nErstellt dazu einen Violinplot nach untenstehender Vorgabe. Was sagt uns dieser komplexe Plot?\n\n\n\n\n\n\n\n\n\n\n\n\nMusterlösung\nggplot(data = depo, aes(x = Wochentag, y = Total, fill = Tageszeit)) +\n  geom_violin() +\n  labs(title = \"\", y = \"Fussgänger:innen pro Tag\") +\n  facet_grid(cols = vars(Tageszeit), rows = vars(Phase))+\n  scale_y_log10()+\n  scale_fill_manual(values = mycolors) +\n  theme_classic(base_size = 15) +\n  theme(\n    panel.background = element_rect(fill = NA, color = \"black\"),\n    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),\n    legend.title = element_blank(), \n    legend.position = \"none\")\n\n\nHinweis: - Nutzt zum plotten ggplot() - folgende Codeschnipsel helfen euch:\n\n\nMusterlösung\nggplot(data = depo, aes(x = Wochentag, y = Total, fill = Tageszeit)) +\n  geom_violin() +\n  facet_grid(cols = vars(...), rows = vars(...))+\n  scale_y_log10()+ \n  ...\n\n\n\nWarum macht es Sinn, hier die y-Achse zu logarithmieren?\nExportiert auch diesen Plot mit ggsave(). Welche Breite und Höhe passt hier?\n\n\n\n2b)\nIst euch aufgefallen, dass in meinen Daten während dem ersten Lockdown in der Nacht keine Leuten unterwegs waren? Nun könnte man also sagen: “Ja gut, der Lockdown 1 war verglichen mit Pre ja deutlich kürzer und es macht keinen Sinn hier die absoluten Zahlen darzustellen”. Stimmt. Darum berechnen wir noch den Durchschnitt pro Phase und Tageszeit.\n\nBerechnet:\n\n\n\nMusterlösung\nmean_phase &lt;- depo_daytime |&gt;\n  group_by(Phase, Tageszeit) |&gt;\n  summarise(\n    Mean = mean(Total))\n\n\n\nPlottet:\n\n\n\n\n\n\n\n\n\n\n\n\nMusterlösung\nggplot(mean_phase, aes(Tageszeit, Mean, fill = Phase))+\n  geom_col(position = \"dodge\", color = \"black\") +\n  scale_fill_viridis_d() +\n  labs(title = \"\", y = \"Durchschnitt Fussgänger:innen pro Tag\") +\n  # scale_fill_manual(values = mycolors) +\n  theme_classic(base_size = 15) +\n  theme(legend.position = \"bottom\")",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Deskriptive Analysen</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/6_Deskriptive_Analysen.html#aufgabe-3-tagesgang",
    "href": "fallstudie_s/6_Deskriptive_Analysen.html#aufgabe-3-tagesgang",
    "title": "Deskriptive Analysen",
    "section": "Aufgabe 3: Tagesgang",
    "text": "Aufgabe 3: Tagesgang\nVom Grossen zum Kleinen, von der Übersicht ins Detail. Jetzt widmen wir uns dem Tagesgang, das heisst der Verteilung der Besuchenden auf die 24 Tagesstunden je nach Phase.\n\n3a)\n\nBerechnet zuerst den Mittelwert der totalen Besuchszahlen pro Wochentag, pro Stunde pro Phase und speichert das df unter Mean_h.\n\n\n\nMusterlösung\nMean_h &lt;- depo |&gt;\n  group_by(Wochentag, Stunde, Phase) |&gt;\n  summarise(Total = mean(Total))\n\n\nVergewissert euch vor dem Plotten, dass der Datensatz im long-Format vorliegt.\n\n\n3b)\n\nPlottet den Tagesgang, unterteilt nach den 7 Wochentagen nun für unsere Phasen.\n\n\n\n\n\n\n\n\n\n\n\n\nMusterlösung\nggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag)) +\n  geom_line(size = 1) +\n  scale_colour_viridis_d() +\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\")) +\n  scale_x_continuous(breaks = c(seq(0, 23, by = 1)), labels = c(seq(0, 23, by = 1))) +\n  facet_grid(rows = vars(Phase)) +\n  labs(x = \"Uhrzeit [h]\", y = \"Durchscnnitt Fussganger_Innen / h\", title = \"\") +\n  lims(y = c(0, 25)) +\n  theme_linedraw(base_size = 15) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n\n\nHinweis: - Nutzt zum plotten ggplot() - folgende Codeschnipsel helfen euch:\n\n\nMusterlösung\nggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag)) +\n  geom_line(...) +\n  facet_grid(...)\n...",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Deskriptive Analysen</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/6_Deskriptive_Analysen.html#aufgabe-4-kennzahlen",
    "href": "fallstudie_s/6_Deskriptive_Analysen.html#aufgabe-4-kennzahlen",
    "title": "Deskriptive Analysen",
    "section": "Aufgabe 4: Kennzahlen",
    "text": "Aufgabe 4: Kennzahlen\nBis hier hin haben wir in diesem Kapitel v.a. visuell gearbeitet. Für den Bericht kann es aber sinnvoll sein, auch einige Kennzahlen in der Hinterhand zu haben. Wir haben das bereits im Kapitel [Datenverarbeitung] berechnet.\n\nReflektiert, welche Zahlen ihr habe und was für den Bericht spannend sein könnte, resp. eure Abbildungen unterstützt oder ergänzt.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Deskriptive Analysen</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/7_Multivariate_Modelle.html",
    "href": "fallstudie_s/7_Multivariate_Modelle.html",
    "title": "Multivariate Modelle",
    "section": "",
    "text": "Aufgabe 1: Verbinden von Daten\nAktuell haben wir noch zwei verschiedene Datensätze von Interesse:\nMusterlösung\numwelt &lt;- inner_join(depo_daytime, meteo_day, by = c(\"Jahr\", \"Monat\", \"KW\", \"Wochenende\"))\nMusterlösung\n# es darf keine NA's im datensatz haben\nsum(is.na(umwelt))\n# umwelt &lt;- na.omit(umwelt)\nsummary(umwelt)",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-1-verbinden-von-daten",
    "href": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-1-verbinden-von-daten",
    "title": "Multivariate Modelle",
    "section": "",
    "text": "Einen mit den Besuchszahlen pro Tageszeit von Besucher:innen mit den dazugehörigen Datumsinformationen (Datensatz “depo_daytime” - zu Tageszeiten und Wochenende / Werktag aggregierte Stunden)\nund einen mit den Wetterparametern pro Tag (“meteo_day”).\n\n\nDiese beiden Datensätze müssen miteinander verbunden werden. Ziel: Ein Datensatz mit den täglichen Zähldaten (weiter unterteilt nach Tageszeit) und Conviniencevariablen wie Phase Covid, Ferien Ja oder Nein, Jahr, Monat, KW, Tageszeit, Wochenendtag oder Werktag, angereichert mit Wetterdaten.\nDer neue Datensatz soll ” umwelt ” heissen.\n\n\n\nSind durch das Zusammenführen NA’s entstanden? Falls ja, müssen alle für die weiteren Auswertungen ausgeschlossen werden.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-2-skalieren",
    "href": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-2-skalieren",
    "title": "Multivariate Modelle",
    "section": "Aufgabe 2: Skalieren",
    "text": "Aufgabe 2: Skalieren\n\n2a)\n\nVergewissert euch, dass die numerischen Messwerte zu Wetter auch in numerischer Form vorliegen. (is.numeric())\nNachfolgende Schritte funktionieren nur, wenn umwelt als data.frame vorliegt! Prüft das und ändert das, falls noch kein data.frame (Hinweis: auch ein “tibble” funktioniert nicht, obwohl bei der Abfrage is.data.frame() TRUE angegeben wird. Damit ihr beim scalen keine NaN Werte erhaltet, wendet ihr darum am besten in allen Fällen zuerst den Befehl as.data.frame() an).\n\n\n\nMusterlösung\numwelt &lt;- as.data.frame(umwelt)\n\n\n\nUnser Modell kann in der abhängigen Variabel nur mit Ganzzahlen (Integer) umgehen. Daher müssen Kommazahlen in Integer umgewandelt werden. Zum Glück haben wir das schon gemacht und uns bleibt nichts weiter zu tun. =)\n\n\n\n2b)\n\nProblem: verschiedene Skalen der Variablen (z.B. Temperatur in Grad Celsius, Niederschlag in Millimeter und Sonnenscheindauer in %)\nLösung: Skalieren aller Variablen mit Masseinheiten gemäss unterstehendem Code:\n\n\n\nMusterlösung\numwelt &lt;- umwelt |&gt; \n  mutate(tre200jx_scaled = scale(tre200jx)|&gt;\n  ...\n\n\n\n\nMusterlösung\numwelt &lt;- umwelt |&gt;\n  mutate(\n    tre200jx_scaled = scale(tre200jx),\n    tre200nx_scaled = scale(tre200nx),\n    rre150j0_scaled = scale(rre150j0),\n    rre150n0_scaled = scale(rre150n0),\n    sremaxdv_scaled = scale(sremaxdv)\n  )",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-3-korrelationen-und-variablenselektion",
    "href": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-3-korrelationen-und-variablenselektion",
    "title": "Multivariate Modelle",
    "section": "Aufgabe 3: Korrelationen und Variablenselektion",
    "text": "Aufgabe 3: Korrelationen und Variablenselektion\n\n3a)\nKorrelierende Variablen können das Modellergebnis verfälschen. Daher muss vor der Modelldefinition auf Korrelation zwischen den Messwerten getestet werden. Welches sind die erklärenden Variablen, welches ist die Abhängige? (Ihr müsst nicht prüfen, ob die Voraussetzungen zur Berechnung von Korrelationen erfüllt sind)\n\nTeste mittels folgendem Code auf eine Korrelation zwischen den Messwerten.\n\n\n\nMusterlösung\ncor &lt;- cor(subset(umwelt, select = c(ERSTE SPALTE MIT ERKLAERENDEN MESSWERTEN : \n                     LETZTE SPALTE MIT ERKLAERENDEN MESSWERTEN)))\n\n\n\n\nMusterlösung\ncor &lt;- cor(subset(umwelt, select = c(tre200nx: sremaxdv)))\n\n\n\n\n3b)\nMit dem folgenden Code kann eine Korrelationsmatrix (mit den Messwerten) aufgebaut werden. Hier kann auch die Schwelle für die Korrelation gesetzt werden (0.7 ist liberal / 0.5 konservativ).\n\n\nMusterlösung\ncor[abs(cor) &lt; 0.7] &lt;- 0 # Setzt alle Werte kleiner 0.7 auf 0\n\n\nZur Visualisierung kann ein Plot erstellt werden.\n\n\nMusterlösung\nchart.Correlation(subset(umwelt, select = c(tre200nx: sremaxdv)), \n                  histogram = TRUE, pch = 19)\n\n\n\n\nMusterlösung\nchart.Correlation(subset(umwelt, select = c(ERSTE SPALTE MIT ERKLAERENDEN MESSWERTEN : \n                     LETZTE SPALTE MIT ERKLAERENDEN MESSWERTEN)), \n                  histogram = TRUE, pch = 19)\n\n\nWo kann eine kritische Korrelation beobachtet werden? Kann man es verantworten, trotzdem alle (Wetter)parameter in das Modell zu geben?\nFalls ja: warum? Falls nein: schliesst den betreffenden Parameter aus. Wenn ihr Parameter ausschliesst: welchen der beiden korrelierenden Parameter behaltet ihr im Modell?\n\n\n3c)\nAktuell haben wir im umwelt-Datensatz noch alle Tageszeiten zusammen gespeichert. Für die Berechnung der Modelle unterteilen wir das noch in Tag, Dämmerung (Morgen- und Abenddämmerung zusammen) und Nacht. Hier eine Inspiration dazu:\n\n\nMusterlösung\numwelt_day &lt;- umwelt |&gt; \n  filter(Tageszeit == \"Tag\")\n\numwelt_duskdawn &lt;- ...\n\numwelt_night &lt;- ...\n\n\n\n\nMusterlösung\numwelt_day &lt;- umwelt |&gt; \n  filter(Tageszeit == \"Tag\")\n\numwelt_duskdawn &lt;- umwelt |&gt; \n  filter(Tageszeit == \"Morgen\" | Tageszeit == \"Abend\" )\n\numwelt_night &lt;- umwelt |&gt; \n  filter(Tageszeit == \"Nacht\")",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-4-optional-automatische-variablenselektion",
    "href": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-4-optional-automatische-variablenselektion",
    "title": "Multivariate Modelle",
    "section": "Aufgabe 4 (OPTIONAL): Automatische Variablenselektion",
    "text": "Aufgabe 4 (OPTIONAL): Automatische Variablenselektion\nFühre die dredge-Funktion und ein Modelaveraging durch. Der Code dazu ist unten. Was passiert in der Funktion? Macht es Sinn, die Funktion auszuführen?\nHinweis: untenstehender Code ist sehr rechenentensiv.\n\n\nMusterlösung\n# Hier wird die Formel für die dredge-Funktion vorbereitet\nf &lt;- Total ~ Wochentag + Ferien + Phase + Monat +\n    tre200jx_scaled + rre150j0_scaled + rre150n0_scaled +\n    sremaxdv_scaled\n# Jetzt kommt der Random-Factor hinzu und es wird eine Formel daraus gemacht\nf_dredge &lt;- paste(c(f, \"+ (1|Jahr)\"), collapse = \" \") |&gt;\n    as.formula()\n# Das Modell mit dieser Formel ausführen\nm &lt;- glmer.nb(f_dredge, data = umwelt, na.action = \"na.fail\")\n# Das Modell in die dredge-Funktion einfügen (siehe auch ?dredge)\nall_m &lt;- dredge(m)\n# suche das beste Modell\nprint(all_m)\n# Importance values der Variablen\n# hier wird die wichtigkeit der Variablen in den verschiedenen Modellen abgelesen\nMuMIn::sw(all_m)\n\n# Schliesslich wird ein Modelaverage durchgeführt\n# Schwellenwert für das delta-AIC = 2\navgmodel &lt;- model.avg(all_m, rank = \"AICc\", subset = delta &lt; 2)\nsummary(avgmodel)",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-5-verteilung-der-abhängigen-variabel-pruefen",
    "href": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-5-verteilung-der-abhängigen-variabel-pruefen",
    "title": "Multivariate Modelle",
    "section": "Aufgabe 5: Verteilung der abhängigen Variabel pruefen",
    "text": "Aufgabe 5: Verteilung der abhängigen Variabel pruefen\nDie Verteilung der abhängigen Variabel bestimmt, was für ein Modell geschrieben werden kann. Alle Modelle gehen von einer bestimmten gegebenen Verteilung aus. Wenn diese Annahme verletzt wird, kann es sein, dass das Modellergebnis nicht valide ist.\nUntenstehender Codeblock zeigt, wie unsere Daten auf verschiedene Verteilungen passen.\nHinweis: es kann sein, dass nicht jede Verteilung geplottet werden kann, es erscheint eine Fehlermeldung. Das ist nicht weiter schlimm, die betreffende Verteilung kann gelöscht werden. Analog muss das auch im Befehl gofstat() passieren.\n\nDie besten drei Verteilungen (gemäss AIC) sollen zur Visualisierung geplottet werden. Dabei gilt, je besser die schwarze Punktlinie (eure Daten) auf die farbigen Linien (theoretische Verteilungen) passen, desto besser ist diese Verteilung geeignet.\n\nHinweis: CDF = Cumulative distribution function; Wikipedia = “Anschaulich entspricht dabei der Wert der Verteilungsfunktion an der Stelle x der Wahrscheinlichkeit, dass die zugehörige Zufallsvariable X einen Wert kleiner oder gleich x annimmt.” Ihr müsst aber nicht weiter verstehen, wie das berechnet wird, wichtig für euch ist, dass ihr den Plot interpretieren könnt.\n\n\nMusterlösung\nf1 &lt;- fitdist(umwelt_day$Total, \"norm\") # Normalverteilung\nf1_1 &lt;- fitdist((umwelt_day$Total + 1), \"lnorm\") # log-Normalvert (beachte, dass ich +1 rechne.\n# log muss positiv sein; allerdings kann man die\n# Verteilungen dann nicht mehr miteinander vergleichen).\nf2 &lt;- fitdist(umwelt_day$Total, \"pois\") # Poisson\nf3 &lt;- fitdist(umwelt_day$Total, \"nbinom\") # negativ binomial\nf4 &lt;- fitdist(umwelt_day$Total, \"exp\") # exponentiell\nf5&lt;-fitdist(umwelt_day$Total,\"gamma\")  # gamma (berechnung mit meinen Daten nicht möglich)\nf6 &lt;- fitdist(umwelt_day$Total, \"logis\") # logistisch\nf7 &lt;- fitdist(umwelt_day$Total, \"geom\") # geometrisch\nf8&lt;-fitdist(umwelt_day$Total,\"weibull\")  # Weibull (berechnung mit meinen Daten nicht möglich)\n\ngofstat(list(f1, f2, f3, f4, f6, f7),\n  fitnames = c(\n    \"Normalverteilung\", \"Poisson\",\n    \"negativ binomial\", \"exponentiell\", \"logistisch\",\n    \"geometrisch\"))\n\n# die 2 besten (gemaess Akaike's Information Criterion) als Plot + normalverteilt,\nplot.legend &lt;- c(\"Normalverteilung\", \"exponentiell\", \"negativ binomial\")\n# vergleicht mehrere theoretische Verteilungen mit den empirischen Daten\ncdfcomp(list(f1, f4, f3), legendtext = plot.legend)\n\n\n\n\n\n\n\n\n\n\n\n\nWie sind unsere Daten verteilt? Welche Modelle können wir anwenden?\nWählt die besten Verteilungen pro Tageszeit (umwelt_day, umwelt_duskdawn, umwelt_night) aus und berechnet damit nachfolgend Modelle.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-6-multivariates-modell-berechnen",
    "href": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-6-multivariates-modell-berechnen",
    "title": "Multivariate Modelle",
    "section": "Aufgabe 6: Multivariates Modell berechnen",
    "text": "Aufgabe 6: Multivariates Modell berechnen\nJetzt gehts ans Eingemachte!\nIch verwende hauptsächlich die Funktione glmmTMB(). Es ist wahnsinnig schnell und erlaubt viele Spezifikationen: Link\nAuch glmer() aus der Bibliothek lme4 ist recht neu und praktisch (diese Bibliothek wird auch in vielen wissenschaftlichen Papern im Feld Biologie / Wildtiermamagement zitiert). Link\n\n6a) Modelle berechnen\nHinweis: Auch wenn wir gerade herausgefunden haben, dass die Verteilung negativ binominal (in meinem Fall) ist, berechne ich für den Vergleich zuerst ein “einfaches Modell” der Familie poisson. Alternative Modelle rechnen wir in später. Wir starten mit dem TAG (Datensatz umwelt_day).\n\nDie Totale Besucheranzahl pro Tageszeit soll durch die abhängigen Variablen erklärt werden (Datensatz “umwelt_day”). Die einzelnen Jahre sollen hierbei nicht beachtet werden, sie werden als “random factor” bestimmt.\n\nFrage: Warum bestimmen wir das Jahr als random factor?\nFalls ihr der Meinung seid, Jahr ist kein “guter” random factor, dann nehmt es nicht an random factor ins Modell sondern als erklärende Variable. Begründet das unbedingt in eurer Methodik.\nDie Modellformel lautet:\n\n\nMusterlösung\npoisson_model &lt;- glmer(Total ~ Monat + Ferien + Phase + Wochenende +\n                       tre200jx_scaled + rre150j0_scaled + rre150n0_scaled +\n                         sremaxdv_scaled +\n                         (1 | Jahr), family = poisson, data = umwelt_day)\n\nsummary(poisson_model) # zeigt das Ergebins des Modells\n\n\nFrage: Was bedeutet “family = poisson”?\nLöst zuerst Aufgabe 6b bevor ihr alternative (besser passende) Modelle rechnet; das kommt in Aufgabe 6c!\n\n\n6b) Modelldiagnostik\n\nPrüft ob euer Modell valide ist, mit dem Package DHARMa: Link\n\nBitte unbedingt die Vignette des DHARMa-Package konsultieren!\nHinweis: Wir verwenden etwas andere Funktionen als in der Vorlesung am morgen. Sie sind unten aufgeführt, und die Funktionen analog zu den Funktionen aus der Vorlesung, aber halt etwas anders.\n\n\nMusterlösung\n# Residuals werden über eine Simulation auf eine Standard-Skala transformiert und\n# können anschliessend getestet werden. Dabei kann die Anzahl Simulationen eingestellt\n# werden (dauert je nach dem sehr lange)\n\nsimulationOutput &lt;- simulateResiduals(fittedModel = poisson_model, n = 1000)\n\n# plotting and testing scaled residuals\n\nplot(simulationOutput)\n\ntestResiduals(simulationOutput)\n\ntestUniformity(simulationOutput)\n\n# The most common concern for GLMMs is overdispersion, underdispersion and\n# zero-inflation.\n\n# separate test for dispersion\n\ntestDispersion(simulationOutput)\n\n# test for Zeroinflation\n\ntestZeroInflation(simulationOutput)\n\n# Testen auf Multicollinearität (dh zu starke Korrelationen im finalen Modell, zB falls\n# auf Grund der ökologischen Plausibilität stark korrelierte Variablen im Modell)\n# use VIF values: if values less then 5 is ok (sometimes &gt; 10), if mean of VIF values\n# not substantially greater than 1 (say 5), no need to worry.\n\ncar::vif(poisson_model) # funktioniert nicht mit glmmTMB\nmean(car::vif(poisson_model))\n\n# erklaerte varianz\n# The marginal R squared values are those associated with your fixed effects,\n# the conditional ones are those of your fixed effects plus the random effects.\n# Usually we will be interested in the marginal effects.\nperformance::r2(poisson_model)\n\n\nSind die Voraussetzungen des Modells erfüllt?\n\n\n6c) Alternative Modelle\nWir sind auf der Suche nach dem minimalen adäquaten Modell. Das ist ein iterativer Prozess. Wir schreiben ein Modell, prüfen ob die Voraussetzungen erfüllt sind und ob die abhängige Variable besser erklärt wird als im Vorhergehenden. Und machen das nochmals und nochmals und nochmals…\n\nglmmTMB() ist eine sehr schnelle und kompatible Funktion, auch für negativ binomiale Daten. Ich empfehle (spätenstens ab dem exponierten Modell weiter unten) mit ihr zu arbeiten.\n\n\n\nMusterlösung\nglmmTMB(Total ~ Monat + Ferien + ..., family =nbinom1,\n                               data = umwelt_day)\n\n\n\nÜber family = kann in der Funktion _glmer()__ einiges (aber leider nicht alles so einfach [z.B. negativ binominale Modelle]) angepasst werden: Link\nAuch über link = kann man anpassen: Link\nUnsere (meine) Daten sind negativ binominal verteilt. Daher sollte wir unbedingt ein solches Modell programmieren. –&gt; Funktion glmer.nb()\n\n\n\nMusterlösung\nnb_model_day &lt;- glmer.nb(Total ~ Monat + Ferien + \n                           ..., \n                         data = umwelt_day)\n\n\n\n\nMusterlösung\nnb_model_day &lt;- glmer.nb(Total ~ Monat + Ferien + Phase + Wochenende +\n                             tre200jx_scaled + rre150j0_scaled +\n                             sremaxdv_scaled  +\n                             (1 | Jahr), data = umwelt_day)\n\n\n\nFalls die Daten exponentiell Verteilt sind, hier der Link zu einem Blogeintrag dazu: Link\n\n\n\nMusterlösung\nglmmTMB((Total + 1) ~ ... \n                         family = Gamma(link = \"log\"), data = umwelt_night)\n\n\n\n\nMusterlösung\nglmmTMB((Total + 1) ~ Monat + Ferien + Phase + Wochenende +\n                           tre200nx_scaled + I(tre200nx_scaled^2) + rre150n0_scaled +\n                          (1 | Jahr), \n                         family = Gamma(link = \"log\"), data = umwelt_night)\n\n\n\nHypothese: “Es gehen weniger Leute in den Wald, wenn es zu heiss ist” –&gt; auf quadratischen Term Temperatur testen! Hinweis: ich welchsel hier auf glmmTBM, da diese funktion beudeutend schneller ist und das Ergeniss besser wird (in meinem Fall).\n\n\n\nMusterlösung\nnb_quad_model_day &lt;- glmmTMB(Total ~ Monat + Ferien + Phase + Wochenende +\n                               tre200jx_scaled + I(tre200jx_scaled^2) + # hier ist der quadratische Term\n                               rre150j0_scaled +  sremaxdv_scaled +\n                               (1 | Jahr), family =nbinom1, # es ist ein negativ binomiales Modell\n                               data = umwelt_day)\n\n\n\nKönnte es zwischen einzelnen Variablen zu Interaktionen kommen, die plausible sind? (z. B.: Im Winter hat Niederschlag einen negativeren Effekt als im Sommer, wenn es heiss ist) –&gt; Falls ja: testen!\n\nHinweis: Interaktionen berechnen ist sehr rechenintensiv. Auch die Interpretation der Resultate wird nicht unbedingt einfacher. Wenn ihr auf Interaktionen testet, dann geht “langsam” vor, probiert nicht zu viel auf einmal und verwendet glmmTMB.\n\n\nMusterlösung\n  ...\nMonat * rre150j0_scaled +\n  ...\n\n\n\n\nMusterlösung\nnb_quad_int_model_day &lt;- glmmTMB(Total ~  Ferien + Phase + Wochenende +\n                                   Monat * rre150j0_scaled+ tre200jx_scaled + I(tre200jx_scaled^2)  +\n                                   sremaxdv_scaled +\n                                  (1|Jahr), data = umwelt_day)\n\n\n\nHabt ihr ein Problem mit zeroinflation? (Dies wisst ihr aus dem Test testZeroInflation() und testResiduals())\n\n\n\nMusterlösung\nnb_model_day_zi &lt;- glmmTMB(..., \n                           # The basic glmmTMB fit — a zero-inflated Poisson model with a single zero-\n                           # inflation parameter applying to all observations (ziformula~1)\n                           ziformula=~1,\n                           family = nbinom1)\n\n\n\n\nMusterlösung\nnb_model_day_zi &lt;- glmmTMB(Total ~ Monat + Phase + Wochenende +\n                             tre200jx_scaled + rre150j0_scaled +\n                             sremaxdv_scaled  +\n                             (1 | Jahr), data = umwelt_day, \n                           # The basic glmmTMB fit — a zero-inflated Poisson model with a single zero-\n                           # inflation parameter applying to all observations (ziformula~1)\n                           ziformula=~1,\n                             family = nbinom1)\n\n\n\nWenn ihr verschiedene Modelle gerechnet habt, können diese über den AICc verglichen werden. Folgender Code kann dazu genutzt werden:\n\nHinweis: Nur Modelle mit demselben Datensatz können miteinander verglichen werden. D.h., dass die Modelle mit den originalen Daten nicht mit logarithmiertem oder exponierten Daten verglichen werden können und glmer kann nicht mit glmmTMB verglichen werden. –&gt; Untenstehende Funktion hat für uns also einen eingeschränkten Wert…\n\n\nMusterlösung\n## Vergleich der Modellguete mittels AICc\ncand.models &lt;- list()\ncand.models[[1]] &lt;- Tages_Model\ncand.models[[2]] &lt;- Tages_Model_nb\ncand.models[[3]] &lt;- Tages_Model_nb_quad\n\nModnames &lt;- c(\n    \"Tages_Model\", \"Tages_Model_nb\",\n    \"Tages_Model_nb_quad\"\n)\naictab(cand.set = cand.models, modnames = Modnames)\n## K = Anzahl geschaetzter Parameter (2 Funktionsparameter und die Varianz)\n## Delta_AICc &lt;2 = Statistisch gleichwertig\n## AICcWt =  Akaike weight in %\n\n\n\n\n6d) (OPTIONAL) Transformationen\nBei meinen Daten waren die Modellvoraussetzungen überall mehr oder weniger verletzt. Das ist ein Problem, allerdings auch nicht ein so grosses (man sollte es aber trotzdem ernst nehmen). Mehr dazu unter:\nSchielzeth u. a. (2020) - Robustness of linear mixed‐effects models to violations of distributional assumptions. Link\nLo und Andrews (2015) - To transform or not to transform: using generalized linear mixed models to analyse reaction time data Link\nFalls die Voraussetzungen stark verletzt werden, wäre eine Transformation angezeigt. Mehr dazu unter: Link\n\nWenn ihr das machen wollt, berechnet zuerst den skewness coefficient\n\n\n\nMusterlösung\nlibrary(\"moments\")\nskewness(umwelt_day$Anzahl_Total)\n## A positive value means the distribution is positively skewed (rechtsschief).\n## The most frequent values are low; tail is toward the high values (on the right-hand side)\n\n\n\nWelche Transformation kann angewandt werden?\nWas spricht gegen eine Transformation (auch im Hinblick zur Visualisierung und Interpretation)? Was spricht dafür?\n\n\n\n6c) Modelle für DUSKDAWN und NIGHT\nIhr habt bereits sehr viel Arbeit in die Suche nach dem besten Modell für den Tag investiert und das nun gefunden. In wir interessieren uns nun dafür, ob die Effekte während der Dämmerung und der Nacht gleich oder verschieden sind.\n\nSucht analog dem vorgehen am Tag auch für die Dämmerung und die Nacht nach den dort besten Modellen.\n\nHinweis: ihr müsst nicht mehr alles komplett duchspielen. Das Modell, welches am Tag gut war, ist sehr wahrscheinlich auch bei den anderen Datensätzen recht gut. Startet also mit einer ähnlichen spezifikation wie beim besten Modell für den Tag.\n\n\n6d) Exportiere die Modellresultate (der besten Modelle)\nWelches ist euer bestes Modell für den Tag?\n\n\nMusterlösung\n# mein bestes Modell ist:\n\n# interaktion zero inflation\n# \"Ferien\" not sig, therefore exclude\nnb_int_model_day_zi &lt;- glmmTMB(Total ~ Phase + Wochenende +\n                             Monat * rre150j0_scaled + tre200jx_scaled + I(tre200jx_scaled^2) +\n                             sremaxdv_scaled +\n                             (1 | Jahr), data = umwelt_day, \n                           # The basic glmmTMB fit — a zero-inflated Poisson model with a single zero-\n                           # inflation parameter applying to all observations (ziformula~1)\n                           ziformula=~1,\n                           family = nbinom1)\n\n\nModellresultate können mit summary() angezeigt werden. Ich verwende aber lieber die Funktion tab_model()! Die Resultate werden gerundet und praktisch im separaten Fenster angezeigt. Von dort kann man sie via copy + paste ins (z.B.) Word bringen.\n\n\nMusterlösung\ntab_model(MODELLNAME, \n          transform = NULL, # To plot the estimates on the linear scale, use transform = NULL.\n          show.se = TRUE) # zeige die Standardabweichung\n## The marginal R squared values are those associated with your fixed effects,\n## the conditional ones are those of your fixed effects plus the random effects.\n## Usually we will be interested in the marginal effects.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-7-modellvisualisierung",
    "href": "fallstudie_s/7_Multivariate_Modelle.html#aufgabe-7-modellvisualisierung",
    "title": "Multivariate Modelle",
    "section": "Aufgabe 7: Modellvisualisierung",
    "text": "Aufgabe 7: Modellvisualisierung\n\nVisualisiert die (signifikanten) Ergebnisse eures Modells. Sabrina Harsch hat im HS21 eine sehr nützliche Funktion dafür geschriben (welche ich etwas weiter ausgebaut habe). Es gibt für die kontinuierlichen Variablen und für die diskreten Variablen je eine seperate Funktion und das jeweils für die drei Tageszeiten (die Linien der Plots sind anders eingefärbt).\n\n\n\nMusterlösung\n# schreibe fun fuer continuierliche var\nrescale_plot_num_day &lt;- function(input_df, input_term, unscaled_var, scaled_var, num_breaks, x_lab, y_lab, x_scaling, x_nk) {\n  plot_id &lt;- plot_model(input_df, type = \"pred\", terms = input_term, axis.title = \"\", title = \"\", color = \"orangered\")\n  labels &lt;- round(seq(floor(min(unscaled_var)), ceiling(max(unscaled_var)), length.out = num_breaks + 1) * x_scaling, x_nk)\n  \n  custom_breaks &lt;- seq(min(scaled_var), max(scaled_var), by = ((max(scaled_var) - min(scaled_var)) / num_breaks))\n  custom_limits &lt;- c(min(scaled_var), max(scaled_var))\n  \n  plot_id &lt;- plot_id +\n    scale_x_continuous(breaks = custom_breaks, limits = custom_limits, labels = c(labels), labs(x = x_lab)) +\n    scale_y_continuous(labs(y = y_lab), limits = c(0, 170)) +\n    theme_classic(base_size = 20)\n  \n  return(plot_id)\n}\n\nrescale_plot_num_night &lt;- function(input_df, input_term, unscaled_var, scaled_var, num_breaks, x_lab, y_lab, x_scaling, x_nk) {\n  plot_id &lt;- plot_model(input_df, type = \"pred\", terms = input_term, axis.title = \"\", title = \"\", color = \"darkblue\")\n  labels &lt;- round(seq(floor(min(unscaled_var)), ceiling(max(unscaled_var)), length.out = num_breaks + 1) * x_scaling, x_nk)\n  \n  custom_breaks &lt;- seq(min(scaled_var), max(scaled_var), by = ((max(scaled_var) - min(scaled_var)) / num_breaks))\n  custom_limits &lt;- c(min(scaled_var), max(scaled_var))\n  \n  plot_id &lt;- plot_id +\n    scale_x_continuous(breaks = custom_breaks, limits = custom_limits, labels = c(labels), labs(x = x_lab)) +\n    scale_y_continuous(labs(y = y_lab), limits = c(0, 20)) +\n    theme_classic(base_size = 20)\n  \n  return(plot_id)\n}\n\nrescale_plot_num_duskdawn &lt;- function(input_df, input_term, unscaled_var, scaled_var, num_breaks, x_lab, y_lab, x_scaling, x_nk) {\n  plot_id &lt;- plot_model(input_df, type = \"pred\", terms = input_term, axis.title = \"\", title = \"\", color = \"mediumvioletred\")\n  labels &lt;- round(seq(floor(min(unscaled_var)), ceiling(max(unscaled_var)), length.out = num_breaks + 1) * x_scaling, x_nk)\n  \n  custom_breaks &lt;- seq(min(scaled_var), max(scaled_var), by = ((max(scaled_var) - min(scaled_var)) / num_breaks))\n  custom_limits &lt;- c(min(scaled_var), max(scaled_var))\n  \n  plot_id &lt;- plot_id +\n    scale_x_continuous(breaks = custom_breaks, limits = custom_limits, labels = c(labels), labs(x = x_lab)) +\n    scale_y_continuous(labs(y = y_lab), limits = c(0, 15)) +\n    theme_classic(base_size = 20)\n  \n  return(plot_id)\n}\n\n\n\n# schreibe fun fuer diskrete var\nrescale_plot_fac_day &lt;- function(input_df, input_term, unscaled_var, scaled_var, num_breaks, x_lab, y_lab, x_scaling, x_nk) {\n  plot_id &lt;- plot_model(input_df, type = \"pred\", terms = input_term, axis.title = \"\", title = \"\", color = \"orangered\")\n  \n  plot_id &lt;- plot_id +\n    scale_y_continuous(labs(y = y_lab), limits = c(0, 170)) +\n    theme_classic(base_size = 20) +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n  \n  return(plot_id)\n}\n\nrescale_plot_fac_night &lt;- function(input_df, input_term, unscaled_var, scaled_var, num_breaks, x_lab, y_lab, x_scaling, x_nk) {\n  plot_id &lt;- plot_model(input_df, type = \"pred\", terms = input_term, axis.title = \"\", title = \"\", color = \"darkblue\")\n  \n  plot_id &lt;- plot_id +\n    scale_y_continuous(labs(y = y_lab), limits = c(0, 20)) +\n    theme_classic(base_size = 20) +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n  \n  return(plot_id)\n}\n\nrescale_plot_fac_duskdawn &lt;- function(input_df, input_term, unscaled_var, scaled_var, num_breaks, x_lab, y_lab, x_scaling, x_nk) {\n  plot_id &lt;- plot_model(input_df, type = \"pred\", terms = input_term, axis.title = \"\", title = \"\", color = \"mediumvioletred\")\n  \n  plot_id &lt;- plot_id +\n    scale_y_continuous(labs(y = y_lab), limits = c(0, 15)) +\n    theme_classic(base_size = 20) +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n  \n  return(plot_id)\n}\n\n\nNun können die einzelnen Variabeln aus den besten Modellen in der Funktion jeweils für die Plots angepasst werden:\n\n\nMusterlösung\n## Tagesmaximaltemperatur\ninput_df &lt;- nb_int_model_day_zi\ninput_term &lt;- \"tre200jx_scaled [all]\"\nunscaled_var &lt;- umwelt_day$tre200jx\nscaled_var &lt;- umwelt_day$tre200jx_scaled\nnum_breaks &lt;- 10\nx_lab &lt;- \"Temperatur [°C]\"\ny_lab &lt;- \"Fussgänger:innen pro Tag\"\nx_scaling &lt;- 1 # in prozent\nx_nk &lt;- 0 # x round nachkommastellen\n\n\np_temp &lt;- rescale_plot_num_day(\n  input_df, input_term, unscaled_var, scaled_var, num_breaks,\n  x_lab, y_lab, x_scaling, x_nk\n)\np_temp\n\n\n\n\n\n\n\n\n\n\n\nMusterlösung\n## Wochentag \ninput_df &lt;- nb_int_model_day_zi\ninput_term &lt;- \"Wochenende [all]\"\nunscaled_var &lt;- umwelt_day$Wochenende\nscaled_var &lt;- umwelt_day$Wochenende\nnum_breaks &lt;- 10\nx_lab &lt;- \"Wochentag\"\ny_lab &lt;- \"Fussgänger:innen pro Tag\"\nx_scaling &lt;- 1 # in prozent\nx_nk &lt;- 0 # x round nachkommastellen\n\n\np_wd &lt;- rescale_plot_fac_day(\n  input_df, input_term, unscaled_var, scaled_var, num_breaks,\n  x_lab, y_lab, x_scaling, x_nk)\np_wd\n\n\n\n\n\n\n\n\n\n\nExportiert die Ergebnisse via ggsave().\n\nHinweis: damit unsere Plots verglichen werden können, sollen sie alle dieselbe Skalierung (limits) auf der y-Achse haben. Das wird erreicht, indem man bei jedem Plot die limits in scale_y_continuous() gleichsetzt.\nHinweis: Es könnten auch interaction-plots erstellt werden: Link",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_s/7_Multivariate_Modelle.html#abschluss",
    "href": "fallstudie_s/7_Multivariate_Modelle.html#abschluss",
    "title": "Multivariate Modelle",
    "section": "Abschluss",
    "text": "Abschluss\nNun habt ihr verschiedenste Ergebnisse vorliegen. In einem wissenschaftlichen Bericht sollen aber niemals alle Ergebnisse abgebildet werden. Eine Faustregel besagt, dass nur signifikante Ergebnisse visualisiert werden. Entscheidet euch daher, was ihr in eurem Bericht abbilden wollt und was lediglich besprochen werden soll.\nStellt im Bericht die Ergebnisse des Tages, der Dämmerung und der Nacht gegenüber und beschreibt die Gemeinsamkeiten und Unterschieden. Behaltet dabei immer die Forschungsfragen in Erinnerung.\n\n\n\n\nLo, Steson, und Sally Andrews. 2015. „To transform or not to transform: using generalized linear mixed models to analyse reaction time data“. Frontiers in Psychology 6. https://doi.org/10.3389/fpsyg.2015.01171.\n\n\nSchielzeth, Holger, Niels J Dingemanse, Shinichi Nakagawa, David F Westneat, Hassen Allegue, Céline Teplitsky, Denis Réale, Ned A Dochtermann, László Zsolt Garamszegi, und Yimen G Araya-Ajoy. 2020. „Robustness of linear mixed-effects models to violations of distributional assumptions“. Methods in ecology and evolution 11 (9): 1141–52.",
    "crumbs": [
      "Fallstudie S",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/1_Vorbemerkung.html",
    "href": "fallstudie_n/1_Vorbemerkung.html",
    "title": "BiEc1_N Vorbemerkung",
    "section": "",
    "text": "Aktuell dient diese Plattform für die BiEc Fallstudie - Profil N einzig der Bereitstellung von Aufgaben die von euch im Rahmen dieses Fallstudienprojekts erarbeitet werden sollen. Die Aufgaben werden in den meisten Fällen mit Code-Beispielen erläutert oder benötigten Code-snippets resp. Funktionen werden mitgeliefert. Im Laufe des Semesters werden hier ausserdem häppchenweise (mögliche) Lösungen zu den Aufgaben aufgeschaltet. Alles grundlegende Material und alle Unterlagen zu den theoretischen Inputs sind weiterhin und ausschliesslich im Moodlekurs Research Methods - Fallstudie BiEc zu finden. Die für die Aufgaben benötigten Datengrundlagen sind ebenfalls im entsprechenden Abschnitt auf Moodle zu finden. Frohes Schaffen!\n\nIm Rahmen der Fallstudie werden wir einige R Packages brauchen. Wir empfehlen, diese bereits vor der ersten Lektion zu installieren. Analog der Vorbereitungsübung in Prepro1 könnt ihr mit nachstehendem Code alle noch nicht installierten packages automatisch installieren.\n\nipak &lt;- function(pkg) {\n  new.pkg &lt;- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg)) {\n    install.packages(new.pkg, dependencies = TRUE)\n  }\n}\n\npackages &lt;- c(\n  \"adehabitatHR\", \"bbmle\", \"car\", \"cowplot\", \"DHARMa\", \"dplyr\",\n  \"ggeffects\", \"ggplot2\", \"ggspatial\", \"glmmTMB\", \"gstat\", \"kableExtra\", \"lme4\",\n  \"MASS\", \"MuMIn\", \"pastecs\", \"performance\", \"PerformanceAnalytics\", \"psych\",\n  \"readr\", \"rms\", \"ROCR\", \"sf\", \"sjPlot\", \"sjstats\", \"terra\"\n)\n\nipak(packages)",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>BiEc1_N Vorbemerkung</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung.html",
    "href": "fallstudie_n/2_Datenverarbeitung.html",
    "title": "BiEc2_N Daten(vor)verarbeitung",
    "section": "",
    "text": "Projektaufbau RStudio-Projekte\nVor den eigentlichen Auswertungen müssen einige vorbereitende Arbeiten unternommen werden. Die Zeit, die man hier investiert, wird in der späteren Projektphase um ein vielfaches eingespart. Im Skript soll die Ordnerstruktur des Projekts genannt werden, damit der Arbeitsvorgang auf verschiedenen Rechnern reproduzierbar ist.\nArbeitet mit Projekten, da diese sehr einfach ausgetauscht und somit auch reproduziert werden önnen; es gibt keine absoluten Arbeitspfade sondern nur relative. Der Datenimport (und auch der Export) kann mithilfe dieser relativen Pfaden stark vereinfacht werden. Projekte helfen alles am richtigen Ort zu behalten. (mehr zur Arbeit mit Projekten: Link)",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>BiEc2_N Daten(vor)verarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung.html#aufbau-von-r-skripten",
    "href": "fallstudie_n/2_Datenverarbeitung.html#aufbau-von-r-skripten",
    "title": "BiEc2_N Daten(vor)verarbeitung",
    "section": "Aufbau von R-Skripten",
    "text": "Aufbau von R-Skripten\nIm Kopf des Skripts zuerst immer den Titel des Projekts sowie die Autor:innen des Skripts nennen. Hier soll auch die Herkunft der Daten ersichtlich sein und falls externe Daten verwendet werden, sollte geklärt werden, wer die Datenherrschaft hat (Rehdaten: Forschungsgruppe WILMA).\n\n# .##################################################################################\n# Daten(vor)verarbeitung Fallstudie WPZ  ####\n# Modul Research Methods, HS23. Autor/in ####\n# .##################################################################################\n\nBeschreibt zudem folgendes:\n\nOrdnerstruktur; ich verwende hier den Projektordner mit den Unterordnern:\n\nSkripts\nData\nResults\nPlots\n\nVerwendete Daten\n\nEin Skript soll in R eigentlich immer nach dem selbem Schema aufgebaut sein. Dieses Schema beinhaltet (nach dem bereits erwähnten Kopf des Skripts) 4 Kapitel:\n\nDatenimport\nDatenvorverarbeitung\nAnalyse\nVisualisierung\n\nBereitet euer Skript also nach dieser Struktur vor. Nutzt für den Text, welcher nicht Code ist, vor dem Text das Symbol #. Wenn ihr den Text als Titel definieren wollt, der die grobe Struktur des Skripts absteckt, baut in wie in folgendem Beispiel auf:\n\n# .###################################################################################\n# METADATA ####\n# .###################################################################################\n# Datenherkunft ####\n# ...\n\n# .###################################################################################\n# 1. DATENIMPORT ####\n# .###################################################################################",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>BiEc2_N Daten(vor)verarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung.html#libraries-laden",
    "href": "fallstudie_n/2_Datenverarbeitung.html#libraries-laden",
    "title": "BiEc2_N Daten(vor)verarbeitung",
    "section": "Libraries laden",
    "text": "Libraries laden\n\nlibrary(\"readr\")\nlibrary(\"dplyr\")\nlibrary(\"ggplot2\")",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>BiEc2_N Daten(vor)verarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung.html#daten-laden",
    "href": "fallstudie_n/2_Datenverarbeitung.html#daten-laden",
    "title": "BiEc2_N Daten(vor)verarbeitung",
    "section": "Daten laden",
    "text": "Daten laden\nHerunterladen der Daten der Feldaufnahmen von Moodle (Aufgabe3_Feldaufnahmen_alle_Gruppen.zip), Einlesen, Sichtung der Datensätze und der Datentypen.\nVerschiedene Dinge funktionieren nicht auf Anhieb:\n\nDaten Gruppe 1: erste Zeile = Spaltenbezeichnungen\nDaten Gruppe 3 = Excelfile\nDaten Gruppe 5: erste Zeile = zusätzlicher Titel\nDatentypen Gruppen 1 & 5 = character statt numeric\n\nVersucht diese Dinge direkt mit R zu lösen, damit die Datensätze zu einem sauberen Gesamtdatensatz zusammengefügt werden können\n\n\nMusterlösung\ndf_team1 &lt;- read_delim(\"datasets/fallstudie_n/Aufgabe3_Feldaufnahmen_alle_Gruppen/Felderhebung Waldstruktur Team 1.csv\", delim = \";\") %&gt;% \n  purrr::set_names(as.character(slice(., 1))) %&gt;%\n  slice(-1) %&gt;% \n  mutate_if(is.character, as.numeric)\n\ndf_team2 &lt;- read_delim(\"datasets/fallstudie_n/Aufgabe3_Feldaufnahmen_alle_Gruppen/Gruppe_2_Deckungsgrade.csv\", delim = \";\")\n\ndf_team3 &lt;- read_delim(\"datasets/fallstudie_n/Aufgabe3_Feldaufnahmen_alle_Gruppen/Feldaufnahmen_LiDAR.csv\", delim = \";\")\n\ndf_team4 &lt;- read_delim(\"datasets/fallstudie_n/Aufgabe3_Feldaufnahmen_alle_Gruppen/Felderhebung_Waldstruktur_Team4.csv\", delim = \";\")\n\ndf_team5 &lt;- read_delim(\"datasets/fallstudie_n/Aufgabe3_Feldaufnahmen_alle_Gruppen/Felderhebung_Waldstruktur_Team_5.csv\", delim = \";\") %&gt;% \n  purrr::set_names(as.character(slice(., 1))) %&gt;%\n  slice(-1) %&gt;% \n  mutate_if(is.character, as.numeric)\n\n# hier können die Probekreise mit den Angaben zur Anzahl Rehlokalisationen und der\n# LIDAR-basierten Ableitung der Waldstruktur eingelesen werden\n\ndf_reh &lt;- read_delim(\"datasets/fallstudie_n/Aufgabe3_Reh_Waldstruktur_231014.csv\", delim = \";\")\nstr(df_reh)\n## spc_tbl_ [305 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n##  $ Anz_reh_lokalisationen: num [1:305] 0 0 0 0 0 0 0 0 0 0 ...\n##  $ x                     : num [1:305] 684900 684900 684900 684900 684875 ...\n##  $ y                     : num [1:305] 237100 237125 237150 237175 237075 ...\n##  $ DG_us_2014            : num [1:305] 0.0903 0.2717 0.468 0.7407 0.1811 ...\n##  $ DG_os_2014            : num [1:305] 0.908 0.959 0.871 0.986 0.86 ...\n##  $ DG_us_2022            : num [1:305] 0.269 0.823 0.936 0.359 0.245 ...\n##  $ DG_os_2022            : num [1:305] 0.945 0.99 0.953 0.997 0.898 ...\n##  - attr(*, \"spec\")=\n##   .. cols(\n##   ..   Anz_reh_lokalisationen = col_double(),\n##   ..   x = col_double(),\n##   ..   y = col_double(),\n##   ..   DG_us_2014 = col_double(),\n##   ..   DG_os_2014 = col_double(),\n##   ..   DG_us_2022 = col_double(),\n##   ..   DG_os_2022 = col_double()\n##   .. )\n##  - attr(*, \"problems\")=&lt;externalptr&gt;\n\n# Die eingelesenen Datensätze anschauen und versuchen zu einem Gesamtdatensatz\n# verbinden. Ist der Output zufriedenstellend?\n\ndf_gesamt &lt;- bind_rows(df_team1, df_team2, df_team3, df_team4, df_team5)\nstr(df_gesamt)\n## tibble [125 × 10] (S3: tbl_df/tbl/data.frame)\n##  $ Kreis (r 12.5m)               : num [1:125] 0 1 2 3 4 5 6 7 8 9 ...\n##  $ X                             : num [1:125] 684900 684875 684875 684875 684850 ...\n##  $ Y                             : num [1:125] 237175 237125 237175 237250 237225 ...\n##  $ Deckungsgrad Rubus sp. [%]    : num [1:125] 20 70 45 40 75 10 40 50 10 45 ...\n##  $ DG Strauchschicht [%] (0.5-3m): num [1:125] 50 60 60 40 55 95 75 75 45 55 ...\n##  $ DG Baumschicht [%] (ab 3m)    : num [1:125] 55 80 85 70 65 100 80 85 85 95 ...\n##  $ DG Strauchschicht [%]         : num [1:125] NA NA NA NA NA NA NA NA NA NA ...\n##  $ DG Baumschicht [%]            : num [1:125] NA NA NA NA NA NA NA NA NA NA ...\n##  $ Bemerkung                     : chr [1:125] NA NA NA NA ...\n##  $ Datum                         : chr [1:125] NA NA NA NA ...",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>BiEc2_N Daten(vor)verarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung.html#aufgabe-1",
    "href": "fallstudie_n/2_Datenverarbeitung.html#aufgabe-1",
    "title": "BiEc2_N Daten(vor)verarbeitung",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\n\n1.1 Einfügen zusätzliche Spalte pro Datensatz mit der Gruppenzugehörigkeit (Team1-5)\n1.2 Spaltenumbenennung damit die Bezeichungen in allen Datensätzen gleich sind und der Gesamtdatensatz zusammengefügt werden kann\n\n→ Befehle mutate und rename, mit pipes (alt: %&gt;%, neu: |&gt;) in einem Schritt möglich\n\n\n\n\nMusterlösung\n# .#################################################################################\n# 2. DATENVORVERARBEITUNG #####\n# .#################################################################################\n\ndf_team1 &lt;- df_team1 |&gt;\n  mutate(team = \"team1\") |&gt;\n  rename(\n    KreisID = \"Kreis (r 12.5m)\",\n    DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\n    DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\n    DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\"\n  )\n\ndf_team2 &lt;- df_team2 |&gt;\n  mutate(team = \"team2\") |&gt;\n  rename(\n    KreisID = \"Kreis (r 12.5m)\",\n    DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\n    DG_Strauchschicht = \"DG Strauchschicht [%]\",\n    DG_Baumschicht = \"DG Baumschicht [%]\"\n  )\n\ndf_team3 &lt;- df_team3 |&gt;\n  mutate(team = \"team3\") |&gt;\n  rename(\n    KreisID = \"Kreis (r 12.5m)\",\n    DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\n    DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\n    DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\"\n  )\n\ndf_team4 &lt;- df_team4 |&gt;\n  mutate(team = \"team4\") |&gt;\n  rename(\n    KreisID = \"Kreis (r 12.5m)\",\n    DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\n    DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\n    DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\"\n  )\n\ndf_team5 &lt;- df_team5 |&gt;\n  mutate(team = \"team5\") |&gt;\n  rename(\n    KreisID = \"Kreis (r 12.5m)\",\n    DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\n    DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\n    DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\"\n  )",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>BiEc2_N Daten(vor)verarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung.html#aufgabe-2",
    "href": "fallstudie_n/2_Datenverarbeitung.html#aufgabe-2",
    "title": "BiEc2_N Daten(vor)verarbeitung",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nZusammenführen der Teildatensätze zu einem Datensatz\n\n\nMusterlösung\ndf_gesamt &lt;- bind_rows(df_team1, df_team2, df_team3, df_team4, df_team5)",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>BiEc2_N Daten(vor)verarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung.html#aufgabe-3",
    "href": "fallstudie_n/2_Datenverarbeitung.html#aufgabe-3",
    "title": "BiEc2_N Daten(vor)verarbeitung",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nVerbinden (join) des Datensatzes der Felderhebungen mit dem Datensatz der Rehe (Aufgabe3_Reh_Waldstruktur_231014.csv).\nZiel: ein Datensatz mit allen Kreisen der Felderhebung, angereichert mit den Umweltvariablen Understory und Overstory aus den LIDAR-Daten (DG_us_2022, DG_os_2022) aus dem Rehdatensatz. –&gt; Welche Art von join? Welche Spalten zum Verbinden (by = ?) der Datensätze\n\n\nMusterlösung\ndf_with_LIDAR &lt;- left_join(df_gesamt, df_reh, by = c(\"X\" = \"x\", \"Y\" = \"y\"))",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>BiEc2_N Daten(vor)verarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung.html#aufgabe-4",
    "href": "fallstudie_n/2_Datenverarbeitung.html#aufgabe-4",
    "title": "BiEc2_N Daten(vor)verarbeitung",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nScatterplot der korrespondondierenden Umweltvariablen aus den Felderhebungen gegen die Umweltvariablen aus den LIDAR-Daten (DG_xy_2022) erstellen (zusätzlich Einfärben der Gruppen und Regressionslinie darüberlegen). Korrelieren die Feldaufnahmen und die LiDAR basierte Waldstruktur?\nIm Reh Datensatz gibt es dieselben Variablen der Waldstruktur aus der LiDAR-Befliegung 2014. Ihr könnt untersuchen wie sich diese verändert haben und wie gut oder eben auch nicht sie mit euren Feldaufnahmen übereinstimmen.\n\n\nMusterlösung\n# .#####################################################################################\n# 4. VISUALISERUNG #####\n# .#####################################################################################\n\nggplot(df_with_LIDAR, aes(DG_us_2022, DG_Strauchschicht, color = team)) +\n  geom_point() +\n  stat_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\n\nMusterlösung\n\nwrite_delim(df_with_LIDAR, \"datasets/fallstudie_n/df_with_lidar.csv\", delim = \";\")",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>BiEc2_N Daten(vor)verarbeitung</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/3_Berechnung_Homeranges.html",
    "href": "fallstudie_n/3_Berechnung_Homeranges.html",
    "title": "BiEc3_N Homeranges",
    "section": "",
    "text": "Libraries laden\nlibrary(\"sf\")\nlibrary(\"terra\")\nlibrary(\"dplyr\")\nlibrary(\"readr\")\nlibrary(\"ggplot2\")\nlibrary(\"terra\")\nlibrary(\"adehabitatHR\")\nlibrary(\"ggspatial\")",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>BiEc3_N Homeranges</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/3_Berechnung_Homeranges.html#daten-einlesen",
    "href": "fallstudie_n/3_Berechnung_Homeranges.html#daten-einlesen",
    "title": "BiEc3_N Homeranges",
    "section": "Daten einlesen",
    "text": "Daten einlesen\nEinlesen des Gesamtdatensatzes von Moodle, Sichtung des Datensatzes und der Datentypen\n\nRehe &lt;- read_delim(\"datasets/fallstudie_n/Aufgabe3_Homeranges_Rehe_landforst_20231023.csv\", delim = \";\")\n\nstr(Rehe)",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>BiEc3_N Homeranges</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/3_Berechnung_Homeranges.html#aufgabe-1",
    "href": "fallstudie_n/3_Berechnung_Homeranges.html#aufgabe-1",
    "title": "BiEc3_N Homeranges",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nIm Datensatz Rehe eine neue Spalte mit Datum und Zeit in einer Spalte kreieren. Beim Format hat sich ein Fehler eingeschlichen. Findet ihr ihn?\n\nRehe &lt;- Rehe |&gt;\n  mutate(UTC_DateTime = as.POSIXct(paste(UTC_Date, UTC_Time),\n                                   format = \"%Y-%m-%d %H:%M:%S\"))",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>BiEc3_N Homeranges</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/3_Berechnung_Homeranges.html#aufgabe-2",
    "href": "fallstudie_n/3_Berechnung_Homeranges.html#aufgabe-2",
    "title": "BiEc3_N Homeranges",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nMit den folgenden Zeilen können die GPS-Punkte visualisiert werden\n\nRehe_sf &lt;- st_as_sf(Rehe, coords = c(\"X\", \"Y\"), crs = 21781)\n\nRE13 &lt;- filter(Rehe_sf, TierID == \"RE13\")\n\nplot(RE13[\"TierID\"])\n\n\n\n\n\n\n\n\nHier einige Zeilen Code, um eine HomeRange zu berechnen.\nHerumschrauben an der Ausdehnung, resp. prozentualer Anteil Punkte in der HR (Funktion getverticeshr)\n→ Ziel: eine Karte erstellen mit der Visualiserung mindestens einer HR\n\nRE13_xy &lt;- st_coordinates(RE13)\n\nRE13_sp &lt;- as(RE13[\"TierID\"], \"Spatial\")\n\nsigma &lt;- 0.5 * (sd(RE13_xy[, 1]) + sd(RE13_xy[, 2]))\nn &lt;- nrow(RE13)\nhref &lt;- sigma * n ^ (-1 / 6) * 0.9\n\n# scaled reference: href * 0.9\n\nkud &lt;- kernelUD(RE13_sp, h = href, grid = 25)\n\n# Berechnung der Home Range (95% Isopleth)\n\nhomerange &lt;- getverticeshr(kud, percent = 95)\n\n# Schreibt HR in den oben beschriebenen Ordner (als Shapefile)\n\nhr &lt;- st_as_sf(homerange)\n\nst_write(\n  hr,\n  dsn = \"Results\",\n  layer = \"HR_RE13\",\n  driver = \"ESRI Shapefile\",\n  delete_layer = TRUE\n)\n## Deleting layer `HR_RE13' using driver `ESRI Shapefile'\n## Writing layer `HR_RE13' to data source `Results' using driver `ESRI Shapefile'\n## Writing 1 features with 2 fields and geometry type Polygon.\n\n\n# mit diesem Befehl kann die HR geplottet werden\n\nggplot(hr) + \n  geom_sf(size = 1, alpha = 0.3, color = \"red\", fill=\"red\") +\n  coord_sf(datum = sf::st_crs(21781))+\n  theme(\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    legend.position=\"none\"\n  )\n\n\n\n\n\n\n\n\n# und die Punkte der GPS-Lokalisationen darüber gelegt werden \n\nggplot(hr) + \n  geom_sf(size = 1, alpha = 0.3, color = \"red\", fill=\"red\") +\n  geom_sf(data = RE13, aes(fill = \"red\")) +\n  coord_sf(datum = sf::st_crs(21781))+\n  theme(\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    legend.position=\"none\"\n  )\n\n\n\n\n\n\n\n\nCode um die Homerange auf der Landeskarte 1:25000 zu plotten. Transparenz kann mit alpha angepasst werden.\n\npk25_wpz &lt;- rast(\"datasets/fallstudie_n/pk25_wpz.tif\")\n\nggplot(hr, aes(color = \"red\", fill = \"red\")) +\n  annotation_spatial(pk25_wpz) +\n  geom_sf(size = 1, alpha = 0.3) +\n  geom_sf(data = RE13, aes(fill = \"red\")) +\n  coord_sf(datum = sf::st_crs(21781)) +\n  theme(\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    legend.position = \"none\"\n  )\n\n\n\n\n\n\n\n\nNachbauen des Sampling Grids mit den Kreisen (Wird als Grundlage für Extraktion der Umweltvariablen innerhalb der Homeranges benötigt)\n\nAusdehnung des Grids basiert auf hr\nCellsize des Grids: 25m\n\n\nx25 &lt;- st_make_grid(hr, 25, what = \"centers\")\ngrid_plot &lt;- st_buffer(x25, 12.5)\n\nggplot(grid_plot, color = \"black\", fill = NA) +\n  geom_sf() +\n  geom_sf(data = RE13, color = \"blue\", ) +\n  geom_sf(data = hr, color = \"red\", fill = NA, size = 2) +\n  coord_sf(datum = 21781) +\n  theme(\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    legend.position = \"none\"\n  )",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>BiEc3_N Homeranges</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/3_Berechnung_Homeranges.html#aufgabe-3",
    "href": "fallstudie_n/3_Berechnung_Homeranges.html#aufgabe-3",
    "title": "BiEc3_N Homeranges",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nTesten der Variablen der Vegetationsschichten von letzter Woche auf einen linearen Zusammenhang (Korrelation; Funktion cor.test). DG_Baumschicht vs. DG_os / DG_Strauchschicht vs. DG_us aus dem Datensatz df_with_lidar den wir letzte Woche erstellt haben\nDie Theorie zu Korrelation folgt erst ab 31.10.\n\ndf_with_lidar &lt;- read_delim(\"datasets/fallstudie_n/df_with_lidar.csv\", delim = \";\")\n\ncor.test(~ DG_Strauchschicht + DG_us_2022, data = df_with_lidar, method = \"pearson\")\n## \n##  Pearson's product-moment correlation\n## \n## data:  DG_Strauchschicht and DG_us_2022\n## t = 4.8012, df = 123, p-value = 4.49e-06\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  0.2382939 0.5355237\n## sample estimates:\n##       cor \n## 0.3972769",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>BiEc3_N Homeranges</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/4_Multivariate_Modelle.html",
    "href": "fallstudie_n/4_Multivariate_Modelle.html",
    "title": "BiEc4_N Multivariate Modelle",
    "section": "",
    "text": "Libraries laden\nlibrary(\"sf\")\nlibrary(\"terra\")\nlibrary(\"dplyr\")\nlibrary(\"readr\")\nlibrary(\"ggplot2\")\nlibrary(\"PerformanceAnalytics\")\nlibrary(\"pastecs\")\nlibrary(\"car\")\nlibrary(\"psych\")",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>BiEc4_N Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/4_Multivariate_Modelle.html#aufgabe-1",
    "href": "fallstudie_n/4_Multivariate_Modelle.html#aufgabe-1",
    "title": "BiEc4_N Multivariate Modelle",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nEinlesen des Gesamtdatensatzes für die Multivariate Analyse von Moodle\n\nSichtung des Datensatzes, der Variablen und der Datentypen\nKontrolle wieviele Rehe in diesem Datensatz enthalten sind\n\n\n\nMusterlösung\nDF_mod &lt;- read_delim(\"datasets/fallstudie_n/Aufgabe4_Datensatz_Habitatnutzung_Modelle_231027_moodle.csv\", delim = \";\")\n\nstr(DF_mod)\n\nclass(DF_mod$time_of_day)\n\ntable(DF_mod$id)\n\nDF_mod |&gt;\n  group_by(id) |&gt;\n  summarize(anzahl = n())\n\nlength(unique(DF_mod$id))",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>BiEc4_N Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/4_Multivariate_Modelle.html#aufgabe-2",
    "href": "fallstudie_n/4_Multivariate_Modelle.html#aufgabe-2",
    "title": "BiEc4_N Multivariate Modelle",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nUnterteilung des Datensatzes in Teildatensätze entsprechend der Tageszeit\n\n\nMusterlösung\nDF_mod_night &lt;- DF_mod |&gt;\n  filter(time_of_day == \"night\")\n\nDF_mod_day &lt;- DF_mod |&gt;\n  filter(time_of_day == \"day\")\n\n# Kontrolle\ntable(DF_mod_night$time_of_day)\n## \n## night \n##  3964\n\ntable(DF_mod_day$time_of_day)\n## \n##  day \n## 3964",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>BiEc4_N Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/4_Multivariate_Modelle.html#aufgabe-3",
    "href": "fallstudie_n/4_Multivariate_Modelle.html#aufgabe-3",
    "title": "BiEc4_N Multivariate Modelle",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nErstellen von Density Plots der Präsenz / Absenz in Abhängigkeit der unabhängigen Variablen. Diese Übung dient einer ersten groben Einschätzung der Wirkung der Umweltvariablen auf die abhängige Variable (Präsenz/Absenz in unserem Fall)\n\n# Ein Satz Density Plots für den Tagesdatensatz und einer für den Nachtdatensatz\n\npar(mfrow = c(3, 3), mar = c(4, 4, 3, 3)) # Vorbereitung Raster für Plots\n\n# innerhalb des for()-loops die Nummern der gewünschten Spalten einstellen\n\nfor (i in 6:14) {\n  dp &lt;- DF_mod_day |&gt; filter(pres_abs == 1) |&gt; pull(i)\n  dp &lt;- density(dp)\n  da &lt;- DF_mod_day |&gt; filter(pres_abs == 0) |&gt; pull(i)\n  da &lt;- density(da)\n  plot(0, 0, type = \"l\",\n    xlim = range(c(dp$x, da$x)),\n    ylim = range(dp$y, da$y),\n    xlab = names(DF_mod_day[i]),\n    ylab = \"Density\"\n  )\n  lines(dp$x, dp$y, col = \"blue\")             # Präsenz\n  lines(da$x, da$y, col = \"red\")              # Absenz\n}",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>BiEc4_N Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/4_Multivariate_Modelle.html#aufgabe-4",
    "href": "fallstudie_n/4_Multivariate_Modelle.html#aufgabe-4",
    "title": "BiEc4_N Multivariate Modelle",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nTesten eurer erklärenden Variablen auf Normalverteilung (nur kontinuierliche)\n\n\nMusterlösung\n# klassischer Weg mit shapiro-wilk (mehrere Spalten, verschiedenene statistische\n# Kenngrössen werden angezeigt. Normalverteilung: Wert ganz unten. p&gt;0.05 = ja)\n\nstat.desc(DF_mod_day[6:14], basic = F, norm = T)\n##                      slope     topo_pos dist_road_all dist_road_only\n## median        1.370633e+01 2.327148e-01  2.986606e+01   3.505609e+01\n## mean          1.535619e+01 7.331813e-01  4.261936e+01   4.765685e+01\n## SE.mean       1.629186e-01 9.339098e-02  6.676922e-01   6.901438e-01\n## CI.mean.0.95  3.194122e-01 1.830989e-01  1.309052e+00   1.353070e+00\n## var           1.052144e+02 3.457351e+01  1.767202e+03   1.888047e+03\n## std.dev       1.025741e+01 5.879925e+00  4.203811e+01   4.345166e+01\n## coef.var      6.679657e-01 8.019742e+00  9.863616e-01   9.117611e-01\n## skewness      7.330597e-01 2.782704e-01  1.872269e+00   1.631521e+00\n## skew.2SE      9.424641e+00 3.577606e+00  2.407098e+01   2.097578e+01\n## kurtosis     -9.231943e-02 7.476704e-01  4.033217e+00   2.994463e+00\n## kurt.2SE     -5.936055e-01 4.807452e+00  2.593322e+01   1.925412e+01\n## normtest.W    9.419360e-01 9.902728e-01  8.067698e-01   8.431235e-01\n## normtest.p    6.839535e-37 7.269676e-16  2.675211e-56   1.245661e-52\n##                  dist_sett   remoteness   forest_prop      us_2014\n## median        1.809658e+02 0.000000e+00  6.554673e-01 5.882353e-02\n## mean          2.119112e+02 1.188578e-01  5.976772e-01 1.194621e-01\n## SE.mean       2.358616e+00 3.228686e-03  5.272256e-03 2.386145e-03\n## CI.mean.0.95  4.624214e+00 6.330041e-03  1.033659e-02 4.678188e-03\n## var           2.205200e+04 4.132237e-02  1.101861e-01 2.256978e-02\n## std.dev       1.484992e+02 2.032790e-01  3.319428e-01 1.502324e-01\n## coef.var      7.007614e-01 1.710270e+00  5.553882e-01 1.257574e+00\n## skewness      7.209630e-01 1.808899e+00 -4.046525e-01 1.647457e+00\n## skew.2SE      9.269118e+00 2.325625e+01 -5.202447e+00 2.118066e+01\n## kurtosis     -1.740088e-01 2.374388e+00 -1.115659e+00 2.923840e+00\n## kurt.2SE     -1.118861e+00 1.526710e+01 -7.173587e+00 1.880002e+01\n## normtest.W    9.452976e-01 6.538165e-01  9.104534e-01 7.934120e-01\n## normtest.p    4.868489e-36 3.078496e-67  2.141161e-43 1.674851e-57\n##                    os_2014\n## median        7.847363e-01\n## mean          5.939976e-01\n## SE.mean       6.653214e-03\n## CI.mean.0.95  1.304404e-02\n## var           1.754675e-01\n## std.dev       4.188884e-01\n## coef.var      7.052022e-01\n## skewness     -4.252236e-01\n## skew.2SE     -5.466921e+00\n## kurtosis     -1.571720e+00\n## kurt.2SE     -1.010602e+01\n## normtest.W    7.807897e-01\n## normtest.p    1.397443e-58\n\n# empfohlener Weg\n\nggplot(DF_mod_day, aes(slope)) +\n  geom_histogram(aes(y = after_stat(density)), color = \"black\", fill = \"white\") +\n  stat_function(fun = dnorm, args = list(mean = mean(DF_mod_day$slope, na.rm = T), sd = sd(DF_mod_day$slope, na.rm = T)), color = \"black\", size = 1)\n\n\n\n\n\n\n\n\n\n\n\nMusterlösung\n# Aufgabe 4: die Verteilung bei einem Teildatensatz zu testen reicht,\n# denn die verwendeten Kreise sind die selben am Tag und in der Nacht,\n# nur die Nutzung durch das Reh nicht",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>BiEc4_N Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/4_Multivariate_Modelle.html#aufgabe-5",
    "href": "fallstudie_n/4_Multivariate_Modelle.html#aufgabe-5",
    "title": "BiEc4_N Multivariate Modelle",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nExplorative Analysen der Variablen mit Scatterplots / Scatterplotmatrizen\n\nZu Scatterplots und Scatterplotmatrizen gibt es viele verschiedene Funktionen / Packages, schaut im Internet und sucht euch eines welches euch passt.\nTesten der Korrelation zwischen den Variablen (Parametrisch oder nicht-parametrische Methode? Ausserdem: gewisse Scatterplotmatrizen zeigen euch die Koeffizenten direkt an)\n\n\n\nMusterlösung\nchart.Correlation(DF_mod_day[6:14], histogram = TRUE, pch = 19, method = \"kendall\")\n\n\n\n\n\n\n\n\n\nMusterlösung\n\n# ?chart.Correlation\n\npairs.panels(DF_mod_day[6:14],\n  method = \"kendall\", # correlation method\n  hist.col = \"#00AFBB\",\n  density = TRUE, # show density plots\n  ellipses = TRUE # show correlation ellipses\n)\n\n\n\n\n\n\n\n\n\nMusterlösung\n\n# Aufgabe 5: die Korrelation bei einem Teildatensatz zu testen reicht,\n# denn die verwendeten Kreise sind die selben am Tag und in der Nacht,\n# nur die Nutzung durch das Reh nicht.",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>BiEc4_N Multivariate Modelle</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/5_Variablenselektion.html",
    "href": "fallstudie_n/5_Variablenselektion.html",
    "title": "BiEc5_N Variablenselektion MM",
    "section": "",
    "text": "Libraries laden\nlibrary(\"sf\")\nlibrary(\"terra\")\nlibrary(\"dplyr\")\nlibrary(\"readr\")\nlibrary(\"ggplot2\")\nlibrary(\"PerformanceAnalytics\")\nlibrary(\"pastecs\")\nlibrary(\"lme4\")\nlibrary(\"bbmle\")\nlibrary(\"MuMIn\")\nlibrary(\"MASS\")",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>BiEc5_N Variablenselektion MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/5_Variablenselektion.html#variablenselektion",
    "href": "fallstudie_n/5_Variablenselektion.html#variablenselektion",
    "title": "BiEc5_N Variablenselektion MM",
    "section": "Variablenselektion",
    "text": "Variablenselektion\n→ Vorgehen analog Coppes u. a. (2017)",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>BiEc5_N Variablenselektion MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/5_Variablenselektion.html#aufgabe-1",
    "href": "fallstudie_n/5_Variablenselektion.html#aufgabe-1",
    "title": "BiEc5_N Variablenselektion MM",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nMit dem folgenden Code kann eine simple Korrelationsmatrix aufgebaut werden, vergl. Aufgabe 5 vorangehende Woche\n\nDF_mod &lt;- read_delim(\"datasets/fallstudie_n/Aufgabe4_Datensatz_Habitatnutzung_Modelle_231027_moodle.csv\", delim = \";\")\n\nDF_mod_day &lt;- DF_mod |&gt;\n  filter(time_of_day == \"day\")\n\nround(cor(DF_mod_day[, 6:14], method = \"kendall\"), 2)\n##                slope topo_pos dist_road_all dist_road_only dist_sett remoteness\n## slope           1.00     0.07          0.14           0.17      0.10       0.59\n## topo_pos        0.07     1.00          0.05           0.08      0.04       0.00\n## dist_road_all   0.14     0.05          1.00           0.85     -0.05       0.35\n## dist_road_only  0.17     0.08          0.85           1.00     -0.06       0.34\n## dist_sett       0.10     0.04         -0.05          -0.06      1.00       0.06\n## remoteness      0.59     0.00          0.35           0.34      0.06       1.00\n## forest_prop     0.17     0.00         -0.09          -0.09      0.40       0.12\n## us_2014         0.22    -0.04         -0.06          -0.03      0.09       0.13\n## os_2014         0.34     0.04         -0.06          -0.04      0.23       0.24\n##                forest_prop us_2014 os_2014\n## slope                 0.17    0.22    0.34\n## topo_pos              0.00   -0.04    0.04\n## dist_road_all        -0.09   -0.06   -0.06\n## dist_road_only       -0.09   -0.03   -0.04\n## dist_sett             0.40    0.09    0.23\n## remoteness            0.12    0.13    0.24\n## forest_prop           1.00    0.31    0.52\n## us_2014               0.31    1.00    0.42\n## os_2014               0.52    0.42    1.00\n\n# hier kann die Schwelle für die Korrelation gesetzt werden, 0.7 ist liberal /\n# 0.5 konservativ\n\ncor &lt;- round(cor(DF_mod_day[, 6:14], method = \"kendall\"), 2)\ncor[abs(cor) &lt; 0.7] &lt;- 0\ncor\n##                slope topo_pos dist_road_all dist_road_only dist_sett remoteness\n## slope              1        0          0.00           0.00         0          0\n## topo_pos           0        1          0.00           0.00         0          0\n## dist_road_all      0        0          1.00           0.85         0          0\n## dist_road_only     0        0          0.85           1.00         0          0\n## dist_sett          0        0          0.00           0.00         1          0\n## remoteness         0        0          0.00           0.00         0          1\n## forest_prop        0        0          0.00           0.00         0          0\n## us_2014            0        0          0.00           0.00         0          0\n## os_2014            0        0          0.00           0.00         0          0\n##                forest_prop us_2014 os_2014\n## slope                    0       0       0\n## topo_pos                 0       0       0\n## dist_road_all            0       0       0\n## dist_road_only           0       0       0\n## dist_sett                0       0       0\n## remoteness               0       0       0\n## forest_prop              1       0       0\n## us_2014                  0       1       0\n## os_2014                  0       0       1",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>BiEc5_N Variablenselektion MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/5_Variablenselektion.html#aufgabe-2",
    "href": "fallstudie_n/5_Variablenselektion.html#aufgabe-2",
    "title": "BiEc5_N Variablenselektion MM",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nSkalieren der Variablen, damit ihr Einfluss vergleichbar wird (Befehl scale(); Problem verschiedene Skalen der Variablen (bspw. Neigung in Grad, Distanz in Metern)); Umwandeln der Reh-ID in einen Faktor, damit dieser als Random Factor ins Model eingespiesen werden kann.\n\nDF_mod_day &lt;- DF_mod_day |&gt;\n  mutate(\n    slope_scaled = scale(slope),\n    topo_pos_scaled = scale(topo_pos),\n    us_scaled = scale(us_2014),\n    os_scaled = scale(os_2014),\n    forest_prop_scaled = scale(forest_prop),\n    dist_road_all_scaled = scale(dist_road_all),\n    dist_road_only_scaled = scale(dist_road_only),\n    dist_sett_scaled = scale(dist_sett),\n    remoteness_scaled = scale(remoteness),\n    id = as.factor(id)\n  )",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>BiEc5_N Variablenselektion MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/5_Variablenselektion.html#aufgabe-3",
    "href": "fallstudie_n/5_Variablenselektion.html#aufgabe-3",
    "title": "BiEc5_N Variablenselektion MM",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nSelektion der Variablen in einem univariaten Model\nEin erstes GLMM (Generalized Linear Mixed Effects Modell) aufbauen: Funktion und Modelformel\n\nwichtige Seite auf der man viele Hilfestellungen zu GLMM’s finden kann.\n\n\n# wir werden das package lme4 mit der Funktion glmer verwenden\n\n# die Hilfe von glmer aufrufen: ?glmer\n\n# glmer(formula, data = , family = binomial)\n\n# 1) formula:\n# Abhängige Variable ~ Erklärende Variable + Random Factor\n# In unseren Modellen kontrollieren wir für individuelle Unterschiede bei den Rehen\n# indem wir einen Random Factor definieren =&gt; (1 | id)\n\n# 2) data:\n# euer Datensatz\n\n# 3) family:\n# hier binomial\n\n# warum binomial? Verteilung Daten der Abhängigen Variable Präsenz/Absenz\n\nggplot(DF_mod_day, aes(pres_abs)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n# --&gt; Binäre Verteilung =&gt; Binomiale Verteilung mit n = 1\n\n# und wie schaut die Verteilung der Daten der Abhängigen Variable Nutzungsintensität\n# (nmb, werden wir in diesem Kurs aber nicht genauer anschauen) aus?",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>BiEc5_N Variablenselektion MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/5_Variablenselektion.html#aufgabe-4",
    "href": "fallstudie_n/5_Variablenselektion.html#aufgabe-4",
    "title": "BiEc5_N Variablenselektion MM",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nMit der GLMM Formel bauen wir in einem ersten Schritt eine univariate Variablenselektion auf.\nAls abhängige Variable verwenden wir die Präsenz/Absenz der Rehe in den Kreisen\n\n# Die erklärende Variable in m1 ist die erste Variable der korrelierenden Variablen\n# Die erklärende Variable in m2 ist die zweite Variable der korrelierenden Variablen\n\nm1 &lt;- glmer(Abhaengige_Variable ~ Erklaerende_Variable + (1 | id),\n  data = DF_mod_day,\n  family = binomial\n)\n\nm2 &lt;- glmer(Abhaengige_Variable ~ Erklaerende_Variable + (1 | id),\n  data = DF_mod_day,\n  family = binomial\n)\n\n# mit dieser Funktion können die Modellergebnisse inspiziert werden\nsummary(m1)\n\n# Mit dieser Funktion kann der Informationgehalt der beiden Modelle gegeneinander\n# abgeschätzt werden\nbbmle::AICtab(m1, m2)\n\n# tieferer AIC -&gt; besser (AIC = Akaike information criterion)\n\n# ==&gt; dieses Vorgehen muss nun für alle korrelierten Variablen für jeden Teildatensatz\n# (Tag/Nacht) durchgeführt werden, um nur noch nicht (R &lt; 0.7) korrelierte Variablen\n# in das Modell einfliessen zu lassen\n\n\n\nMusterlösung\nm1 &lt;- glmer(pres_abs ~ dist_road_all_scaled + (1 | id), data = DF_mod_day, family = binomial)\nm2 &lt;- glmer(pres_abs ~ dist_road_only_scaled + (1 | id), data = DF_mod_day, family = binomial)\n\nsummary(m1)\n## Generalized linear mixed model fit by maximum likelihood (Laplace\n##   Approximation) [glmerMod]\n##  Family: binomial  ( logit )\n## Formula: pres_abs ~ dist_road_all_scaled + (1 | id)\n##    Data: DF_mod_day\n## \n##      AIC      BIC   logLik deviance df.resid \n##   5104.9   5123.7  -2549.4   5098.9     3961 \n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -2.1046 -0.7564 -0.6277  1.0812  1.9219 \n## \n## Random effects:\n##  Groups Name        Variance Std.Dev.\n##  id     (Intercept) 0.1996   0.4467  \n## Number of obs: 3964, groups:  id, 12\n## \n## Fixed effects:\n##                      Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)          -0.31120    0.13418  -2.319   0.0204 *  \n## dist_road_all_scaled  0.37745    0.03848   9.808   &lt;2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr)\n## dst_rd_ll_s -0.004\n\nbbmle::AICtab(m1, m2)\n##    dAIC df\n## m2 0.0  3 \n## m1 6.5  3\n\n# tieferer AIC -&gt; besser (AIC = Akaike information criterion) -&gt; als deltaAIC\n# ausgewiesen besser == Distanz zu Strassen\n\n# ==&gt; dieses Vorgehen muss nun für alle korrelierten Variablen für jeden\n# Teildatensatz (geringe Störung/starke Störung) durchgeführt werden, um nur\n# noch nicht (R &lt; 0.7) korrelierte Variablen in das Modell einfliessen zu\n# lassen",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>BiEc5_N Variablenselektion MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/5_Variablenselektion.html#aufgabe-5",
    "href": "fallstudie_n/5_Variablenselektion.html#aufgabe-5",
    "title": "BiEc5_N Variablenselektion MM",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nSelektion der Variablen in einem multivariaten Model\nMit folgendem Code kann eine automatisierte Variablenselektion (dredge-Funktion) und ein Modelaveraging aufgebaut werden (siehe auch Stats-Skript von J.Dengler & Team)\n\n# hier wird die Formel für die dredge-Funktion vorbereitet (die Variablen V1-V8\n# sind jene welche nach der univariaten Variablenselektion noch übrig bleiben)\n\nf &lt;- pres_abs ~\n  V1 +\n  V2 +\n  V3 +\n  V4 +\n  V5 +\n  V6 +\n  V7 +\n  V8\n\n# in diesem Befehl kommt der Random-Factor (das Reh) hinzu und es wird eine Formel\n# daraus gemacht\n\nf_dredge &lt;- paste(c(f, \"+ (1 | id)\"), collapse = \" \") |&gt; as.formula()\n\n# Das Modell mit dieser Formel ausführen\n\nm &lt;- glmer(f_dredge, data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\n# Das Modell in die dredge-Funktion einfügen (siehe auch unbedingt ?dredge)\n\nall_m &lt;- dredge(m)\n\n# Importance values der einzelnen Variablen (Gibt an, wie bedeutsam eine bestimmte\n# Variable ist, wenn man viele verschiedene Modelle vergleicht (multimodel inference))\n\nsw(all_m)\n\n# Schlussendlich wird ein Modelaverage durchgeführt (Schwellenwert für das delta-AIC = 2)\n\navgmodel &lt;- model.avg(all_m, rank = \"AICc\", subset = delta &lt; 2)\nsummary(avgmodel)\n\n# ==&gt; für den Nachtdatensatz muss der gleiche Prozess der Variablenselektion\n# durchgespielt werden.\n\n\n\nMusterlösung\n# hier wird die Formel für die dredge-Funktion vorbereitet (die Variablen V1-V8\n# sind jene welche nach der univariaten Variablenselektion noch übrig bleiben)\n\nf &lt;- pres_abs ~\n  slope_scaled +\n  topo_pos_scaled +\n  us_scaled +\n  os_scaled +\n  forest_prop_scaled +\n  dist_road_only_scaled +\n  dist_sett_scaled +\n  remoteness_scaled\n\n# inn diesem Befehl kommt der Random-Factor (das Reh) hinzu und es wird eine Formel\n# daraus gemacht\n\nf_dredge &lt;- paste(c(f, \"+ (1 | id)\"), collapse = \" \") |&gt; as.formula()\n\n# Das Modell mit dieser Formel ausführen\n\nm &lt;- glmer(f_dredge, data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\n# Das Modell in die dredge-Funktion einfügen (siehe auch unbedingt ?dredge)\n\nall_m &lt;- dredge(m)\n\n# Importance values der einzelnen Variablen (Gibt an, wie bedeutsam eine bestimmte\n# Variable ist, wenn man viele verschiedene Modelle vergleicht (multimodel inference))\n\nsw(all_m)\n##                      dist_road_only_scaled forest_prop_scaled us_scaled\n## Sum of weights:      1.00                  1.00               1.00     \n## N containing models:  128                   128                128     \n##                      remoteness_scaled dist_sett_scaled slope_scaled os_scaled\n## Sum of weights:      1.00              0.42             0.32         0.29     \n## N containing models:  128               128              128          128     \n##                      topo_pos_scaled\n## Sum of weights:      0.27           \n## N containing models:  128\n\n# Schlussendlich wird ein Modelaverage durchgeführt (Schwellenwert für das delta-AIC = 2)\n\navgmodel &lt;- model.avg(all_m, rank = \"AICc\", subset = delta &lt; 2)\nsummary(avgmodel)\n## \n## Call:\n## model.avg(object = get.models(object = all_m, subset = delta &lt; \n##     2), rank = \"AICc\")\n## \n## Component model call: \n## glmer(formula = pres_abs ~ &lt;4 unique rhs&gt;, data = DF_mod_day, family = \n##      binomial, na.action = na.fail)\n## \n## Component models: \n##       df   logLik    AICc delta weight\n## 1357   6 -2261.70 4535.41  0.00   0.39\n## 12357  7 -2261.02 4536.07  0.65   0.28\n## 13567  7 -2261.52 4537.06  1.65   0.17\n## 13457  7 -2261.60 4537.23  1.82   0.16\n## \n## Term codes: \n## dist_road_only_scaled      dist_sett_scaled    forest_prop_scaled \n##                     1                     2                     3 \n##             os_scaled     remoteness_scaled          slope_scaled \n##                     4                     5                     6 \n##             us_scaled \n##                     7 \n## \n## Model-averaged coefficients:  \n## (full average) \n##                        Estimate Std. Error Adjusted SE z value Pr(&gt;|z|)    \n## (Intercept)           -0.437730   0.148042    0.148087   2.956  0.00312 ** \n## dist_road_only_scaled  0.510519   0.052598    0.052614   9.703  &lt; 2e-16 ***\n## forest_prop_scaled     0.844263   0.058809    0.058826  14.352  &lt; 2e-16 ***\n## remoteness_scaled     -0.255199   0.056758    0.056775   4.495    7e-06 ***\n## us_scaled              0.382072   0.040946    0.040959   9.328  &lt; 2e-16 ***\n## dist_sett_scaled      -0.020550   0.046737    0.046744   0.440  0.66021    \n## slope_scaled          -0.006037   0.027844    0.027851   0.217  0.82839    \n## os_scaled              0.004232   0.026310    0.026317   0.161  0.87225    \n##  \n## (conditional average) \n##                       Estimate Std. Error Adjusted SE z value Pr(&gt;|z|)    \n## (Intercept)           -0.43773    0.14804     0.14809   2.956  0.00312 ** \n## dist_road_only_scaled  0.51052    0.05260     0.05261   9.703  &lt; 2e-16 ***\n## forest_prop_scaled     0.84426    0.05881     0.05883  14.352  &lt; 2e-16 ***\n## remoteness_scaled     -0.25520    0.05676     0.05678   4.495    7e-06 ***\n## us_scaled              0.38207    0.04095     0.04096   9.328  &lt; 2e-16 ***\n## dist_sett_scaled      -0.07295    0.06270     0.06272   1.163  0.24479    \n## slope_scaled          -0.03532    0.05918     0.05919   0.597  0.55069    \n## os_scaled              0.02690    0.06157     0.06159   0.437  0.66226    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nMusterlösung\n\n#| eval: false\n#| error: true\n#| echo: false\n\n# hier wird die Formel für die dredge-Funktion vorbereitet (die Variablen V1-V8\n# sind jene welche nach der univariaten Variablenselektion noch übrig bleiben)\n\nf &lt;- pres_abs ~\n  slope_scaled +\n  topo_pos_scaled +\n  us_scaled +\n  os_scaled +\n  forest_prop_scaled +\n  dist_road_only_scaled +\n  dist_road_all_scaled +\n  dist_sett_scaled +\n  remoteness_scaled\n\n# inn diesem Befehl kommt der Random-Factor (das Reh) hinzu und es wird eine Formel\n# daraus gemacht\n\nf_dredge &lt;- paste(c(f, \"+ (1 | id)\"), collapse = \" \") |&gt; as.formula()\n\n# Das Modell mit dieser Formel ausführen\n\nm &lt;- glmer(f_dredge, data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\ncar::vif(m)\n##          slope_scaled       topo_pos_scaled             us_scaled \n##              2.228320              1.098040              1.239462 \n##             os_scaled    forest_prop_scaled dist_road_only_scaled \n##              2.613227              2.737806              5.816134 \n##  dist_road_all_scaled      dist_sett_scaled     remoteness_scaled \n##              6.032018              1.434214              2.554936\nmean(car::vif(m))\n## [1] 2.861573\n\n\n\n\n\n\nCoppes, Joy, Judith Ehrlacher, Dominik Thiel, Rudi Suchant, und Veronika Braunisch. 2017. „Outdoor recreation causes effective habitat reduction in capercaillie Tetrao urogallus: a major threat for geographically restricted populations“. Journal of avian biology 48 (12): 1583–94.",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>BiEc5_N Variablenselektion MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/6_Guete_und_Diagnostics.html",
    "href": "fallstudie_n/6_Guete_und_Diagnostics.html",
    "title": "BiEc6_N Modellgüte und -diagnostics MM",
    "section": "",
    "text": "Libraries laden\nPackages die wir für die Modelle und die Diagnostics brauchen\nlibrary(\"lme4\")\nlibrary(\"bbmle\")\nlibrary(\"MuMIn\")\nlibrary(\"dplyr\")\nlibrary(\"readr\")\nlibrary(\"ggplot2\")\nlibrary(\"DHARMa\")\nlibrary(\"car\")\nlibrary(\"MASS\")\nlibrary(\"ROCR\")\nlibrary(\"sjPlot\")\nlibrary(\"ggeffects\")\nlibrary(\"sjstats\")\nlibrary(\"cowplot\")\nlibrary(\"gstat\")\nlibrary(\"purrr\")\nlibrary(\"broom.mixed\")",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>BiEc6_N Modellgüte und -diagnostics MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/6_Guete_und_Diagnostics.html#ausgangslage",
    "href": "fallstudie_n/6_Guete_und_Diagnostics.html#ausgangslage",
    "title": "BiEc6_N Modellgüte und -diagnostics MM",
    "section": "Ausgangslage",
    "text": "Ausgangslage\n\nDer Modellfit aus Aufgabe 5 von letzter Woche dient als Ausgangspunkt für die heutigen Übungen.\n\n\nDF_mod_day &lt;- read_delim(\"datasets/fallstudie_n/Aufgabe4_Datensatz_Habitatnutzung_Modelle_231027_moodle.csv\", delim = \";\") |&gt;\n  filter(time_of_day == \"day\") |&gt;\n  mutate(\n    slope_scaled = scale(slope),\n    topo_pos_scaled = scale(topo_pos),\n    us_scaled = scale(us_2014),\n    os_scaled = scale(os_2014),\n    forest_prop_scaled = scale(forest_prop),\n    dist_road_all_scaled = scale(dist_road_all),\n    dist_road_only_scaled = scale(dist_road_only),\n    dist_sett_scaled = scale(dist_sett),\n    remoteness_scaled = scale(remoteness),\n    id = as.factor(id)\n  )\n\nf &lt;- pres_abs ~\n  slope_scaled +\n  us_scaled +\n  os_scaled +\n  forest_prop_scaled +\n  dist_road_only_scaled +\n  dist_sett_scaled +\n  remoteness_scaled\n\nf &lt;- paste(c(f, \"+ (1 | id)\"), collapse = \" \") |&gt; as.formula()\n\nm_day &lt;- glmer(f, data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nall_m &lt;- dredge(m_day)\n\navgmodel &lt;- model.avg(all_m, rank = \"AICc\", subset = delta &lt; 2)\nsummary(avgmodel)\n## \n## Call:\n## model.avg(object = get.models(object = all_m, subset = delta &lt; \n##     2), rank = \"AICc\")\n## \n## Component model call: \n## glmer(formula = pres_abs ~ &lt;4 unique rhs&gt;, data = DF_mod_day, family = \n##      binomial, na.action = na.fail)\n## \n## Component models: \n##       df   logLik    AICc delta weight\n## 1357   6 -2261.70 4535.41  0.00   0.39\n## 12357  7 -2261.02 4536.07  0.65   0.28\n## 13567  7 -2261.52 4537.06  1.65   0.17\n## 13457  7 -2261.60 4537.23  1.82   0.16\n## \n## Term codes: \n## dist_road_only_scaled      dist_sett_scaled    forest_prop_scaled \n##                     1                     2                     3 \n##             os_scaled     remoteness_scaled          slope_scaled \n##                     4                     5                     6 \n##             us_scaled \n##                     7 \n## \n## Model-averaged coefficients:  \n## (full average) \n##                        Estimate Std. Error Adjusted SE z value Pr(&gt;|z|)    \n## (Intercept)           -0.437730   0.148042    0.148087   2.956  0.00312 ** \n## dist_road_only_scaled  0.510519   0.052598    0.052614   9.703  &lt; 2e-16 ***\n## forest_prop_scaled     0.844263   0.058809    0.058826  14.352  &lt; 2e-16 ***\n## remoteness_scaled     -0.255199   0.056758    0.056775   4.495    7e-06 ***\n## us_scaled              0.382072   0.040946    0.040959   9.328  &lt; 2e-16 ***\n## dist_sett_scaled      -0.020550   0.046737    0.046744   0.440  0.66021    \n## slope_scaled          -0.006037   0.027844    0.027851   0.217  0.82839    \n## os_scaled              0.004232   0.026310    0.026317   0.161  0.87225    \n##  \n## (conditional average) \n##                       Estimate Std. Error Adjusted SE z value Pr(&gt;|z|)    \n## (Intercept)           -0.43773    0.14804     0.14809   2.956  0.00312 ** \n## dist_road_only_scaled  0.51052    0.05260     0.05261   9.703  &lt; 2e-16 ***\n## forest_prop_scaled     0.84426    0.05881     0.05883  14.352  &lt; 2e-16 ***\n## remoteness_scaled     -0.25520    0.05676     0.05678   4.495    7e-06 ***\n## us_scaled              0.38207    0.04095     0.04096   9.328  &lt; 2e-16 ***\n## dist_sett_scaled      -0.07295    0.06270     0.06272   1.163  0.24479    \n## slope_scaled          -0.03532    0.05918     0.05919   0.597  0.55069    \n## os_scaled              0.02690    0.06157     0.06159   0.437  0.66226    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nDie Modellresultate aus dem avgmodel sind grundätzlich die finalen Resultate die bereits interpretiert werden könnten. Allerdings funktionieren die Diagnosetests und die Darstellung der Resultate mit diesem gemittelten Modell nicht sehr gut, weshalb wir einen re-fit mit glmer machen müssen (an den Resultaten ändert sich dadurch nichts)\n\n\n# hier zum Vergleich, dass die Resulate sich nur marginal verändern\n\nsummary(avgmodel)\n## \n## Call:\n## model.avg(object = get.models(object = all_m, subset = delta &lt; \n##     2), rank = \"AICc\")\n## \n## Component model call: \n## glmer(formula = pres_abs ~ &lt;4 unique rhs&gt;, data = DF_mod_day, family = \n##      binomial, na.action = na.fail)\n## \n## Component models: \n##       df   logLik    AICc delta weight\n## 1357   6 -2261.70 4535.41  0.00   0.39\n## 12357  7 -2261.02 4536.07  0.65   0.28\n## 13567  7 -2261.52 4537.06  1.65   0.17\n## 13457  7 -2261.60 4537.23  1.82   0.16\n## \n## Term codes: \n## dist_road_only_scaled      dist_sett_scaled    forest_prop_scaled \n##                     1                     2                     3 \n##             os_scaled     remoteness_scaled          slope_scaled \n##                     4                     5                     6 \n##             us_scaled \n##                     7 \n## \n## Model-averaged coefficients:  \n## (full average) \n##                        Estimate Std. Error Adjusted SE z value Pr(&gt;|z|)    \n## (Intercept)           -0.437730   0.148042    0.148087   2.956  0.00312 ** \n## dist_road_only_scaled  0.510519   0.052598    0.052614   9.703  &lt; 2e-16 ***\n## forest_prop_scaled     0.844263   0.058809    0.058826  14.352  &lt; 2e-16 ***\n## remoteness_scaled     -0.255199   0.056758    0.056775   4.495    7e-06 ***\n## us_scaled              0.382072   0.040946    0.040959   9.328  &lt; 2e-16 ***\n## dist_sett_scaled      -0.020550   0.046737    0.046744   0.440  0.66021    \n## slope_scaled          -0.006037   0.027844    0.027851   0.217  0.82839    \n## os_scaled              0.004232   0.026310    0.026317   0.161  0.87225    \n##  \n## (conditional average) \n##                       Estimate Std. Error Adjusted SE z value Pr(&gt;|z|)    \n## (Intercept)           -0.43773    0.14804     0.14809   2.956  0.00312 ** \n## dist_road_only_scaled  0.51052    0.05260     0.05261   9.703  &lt; 2e-16 ***\n## forest_prop_scaled     0.84426    0.05881     0.05883  14.352  &lt; 2e-16 ***\n## remoteness_scaled     -0.25520    0.05676     0.05678   4.495    7e-06 ***\n## us_scaled              0.38207    0.04095     0.04096   9.328  &lt; 2e-16 ***\n## dist_sett_scaled      -0.07295    0.06270     0.06272   1.163  0.24479    \n## slope_scaled          -0.03532    0.05918     0.05919   0.597  0.55069    \n## os_scaled              0.02690    0.06157     0.06159   0.437  0.66226    \n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nsummary(m_day)\n## Generalized linear mixed model fit by maximum likelihood (Laplace\n##   Approximation) [glmerMod]\n##  Family: binomial  ( logit )\n## Formula: \n## pres_abs ~ slope_scaled + us_scaled + os_scaled + forest_prop_scaled +  \n##     dist_road_only_scaled + dist_sett_scaled + remoteness_scaled +  \n##     (1 | id)\n##    Data: DF_mod_day\n## \n##      AIC      BIC   logLik deviance df.resid \n##   4539.3   4595.9  -2260.7   4521.3     3955 \n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -6.1673 -0.7219 -0.3612  0.8565  4.0178 \n## \n## Random effects:\n##  Groups Name        Variance Std.Dev.\n##  id     (Intercept) 0.2387   0.4886  \n## Number of obs: 3964, groups:  id, 12\n## \n## Fixed effects:\n##                       Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept)           -0.44517    0.14715  -3.025 0.002484 ** \n## slope_scaled          -0.04861    0.06215  -0.782 0.434154    \n## us_scaled              0.37862    0.04293   8.820  &lt; 2e-16 ***\n## os_scaled              0.03339    0.06512   0.513 0.608141    \n## forest_prop_scaled     0.85465    0.07448  11.474  &lt; 2e-16 ***\n## dist_road_only_scaled  0.51282    0.05294   9.687  &lt; 2e-16 ***\n## dist_sett_scaled      -0.07131    0.06324  -1.127 0.259536    \n## remoteness_scaled     -0.23229    0.06529  -3.558 0.000374 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##             (Intr) slp_sc us_scl os_scl frst__ dst___ dst_s_\n## slope_scald  0.019                                          \n## us_scaled    0.005 -0.093                                   \n## os_scaled    0.004 -0.301 -0.288                            \n## frst_prp_sc -0.077  0.037  0.057 -0.594                     \n## dst_rd_nly_ -0.018  0.089  0.016  0.006  0.187              \n## dst_stt_scl  0.051  0.014  0.023  0.117 -0.466 -0.113       \n## rmtnss_scld  0.018 -0.551 -0.006  0.078 -0.201 -0.481 -0.010",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>BiEc6_N Modellgüte und -diagnostics MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/6_Guete_und_Diagnostics.html#aufgabe-1",
    "href": "fallstudie_n/6_Guete_und_Diagnostics.html#aufgabe-1",
    "title": "BiEc6_N Modellgüte und -diagnostics MM",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nBerechung der AUC (area under the receiver operating characteristic curve) = Mass der Modellgüte\nFür die Berechnung des AUC findet ihr weiterführende Informationen unter: Link\n\n\nMusterlösung\nprob &lt;- predict(m_day, type = c(\"response\"))\npred &lt;- prediction(prob, DF_mod_day$pres_abs)\n\n?prediction\n\n# AUC\n\nauc &lt;- performance(pred, measure = \"auc\")@y.values[[1]]\nauc",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>BiEc6_N Modellgüte und -diagnostics MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/6_Guete_und_Diagnostics.html#aufgabe-2",
    "href": "fallstudie_n/6_Guete_und_Diagnostics.html#aufgabe-2",
    "title": "BiEc6_N Modellgüte und -diagnostics MM",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nInterpretieren der Modell-Residuen mittels Tests auf verschiedene Aspekte\n\nModel testing for over/underdispersion, zeroinflation and spatial autocorrelation following the DHARMa package.\nunbedingt die Vignette des DHARMa-Package konsultieren: Link\n\n\n\nMusterlösung\n# Residuals werden über eine Simulation auf eine Standard-Skala transformiert und\n# können anschliessend getestet werden. Dabei kann die Anzahl Simulationen eingestellt\n# werden (dauert je nach dem sehr lange)\n\nsimulationOutput &lt;- simulateResiduals(fittedModel = m_day, n = 10000)\n\n# plotting and testing scaled residuals\n\nplot(simulationOutput)\ntestResiduals(simulationOutput)\n\n# The most common concern for GLMMs is overdispersion, underdispersion and\n# zero-inflation.\n\n# separate test for dispersion\n\ntestDispersion(simulationOutput)\n\n# test for Zeroinflation\n\ntestZeroInflation(simulationOutput)\n\n# test for spatial Autocorrelation\n\n# calculating x, y positions per group\ngroupLocations &lt;- aggregate(DF_mod_day[, 3:4], list(DF_mod_day$x, DF_mod_day$y), mean)\ngroupLocations$group &lt;- paste(groupLocations$Group.1, groupLocations$Group.2)\ngroupLocations &lt;- groupLocations |&gt; dplyr::select(x,y,group)\n\n\n\n# calculating residuals per group\nres2 = recalculateResiduals(simulationOutput, group = groupLocations$group)\n\n# running the spatial test on grouped residuals\ntestSpatialAutocorrelation(res2, groupLocations$x, groupLocations$y, plot = F)\n\n# Testen auf Multicollinearität (dh zu starke Korrelationen im finalen Modell, zB falls\n# auf Grund der ökologischen Plausibilität stark korrelierte Variablen im Modell)\n# use VIF values: if values less then 5 is ok (sometimes &gt; 10), if mean of VIF values\n# not substantially greater than 1 (say 5), no need to worry.\n\ncar::vif(m_day)\nmean(car::vif(m_day))",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>BiEc6_N Modellgüte und -diagnostics MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/6_Guete_und_Diagnostics.html#aufgabe-3",
    "href": "fallstudie_n/6_Guete_und_Diagnostics.html#aufgabe-3",
    "title": "BiEc6_N Modellgüte und -diagnostics MM",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nGraphische Darstellung der Modellresultate\n\n\nMusterlösung\n# graphische Darstellung der gesamten Modellresultate\n\nplot_model(m_day, transform = NULL, show.values = TRUE, value.offset = .3)\n\n# Plotten der vorhergesagten Wahrscheinlichkeit, dass ein Kreis besetzt ist, in\n# Abhängigkeit der erklärenden Variable basierend auf den Modellresultaten.\n\nplot_model(m_day, type = \"pred\", terms = \"us_scaled [all]\")\n\n# Problem: skalierte Variablen lassen sich nicht so ohne weiteres plotten, hier ein quick-\n# and-dirty hack um das Problem zu umgehen. Die Einstellungen müssen für jede Variable\n# geändert werden\n\np &lt;- plot_model(m_day, type = \"pred\", terms = \"us_scaled [all]\")\n\nlabels &lt;- round(seq(floor(min(DF_mod_day$us_2014)), ceiling(max(DF_mod_day$us_2014)), length.out = 8), 2)\n\np &lt;- p + scale_x_continuous(breaks = c(-1, 0, 1, 2, 3, 4, 5, 6), labels = c(labels))\n\np\n\n# Funktion um viele Plots auf einem zusammenbringen: cowplot-package (hat auch sonst\n# gute Funktionen für schöne Layouts für Grafiken)\n\ncowplot::plot_grid()",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>BiEc6_N Modellgüte und -diagnostics MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/6_Guete_und_Diagnostics.html#aufgabe-4",
    "href": "fallstudie_n/6_Guete_und_Diagnostics.html#aufgabe-4",
    "title": "BiEc6_N Modellgüte und -diagnostics MM",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nErmittlung des individuellen Beitrags der einzelen Variablen im Gesamtmodell\n\nBestimmen delta AIC nach Coppes u. a. (2017) → Vergleich des Gesamtmodells gegenüber einem Modell ohne die entsprechende Variable.\nAuftrag auf nächste Woche: Kurze Vorstellung der Modellresultate & Diagnostics im Plenum und Diskussion der Ergebnisse (keine PP-Präsentation nötig)\n\n\n\nMusterlösung\nm_os &lt;- glmer(pres_abs ~\n  slope_scaled +\n  us_scaled +\n  forest_prop_scaled +\n  dist_road_only_scaled +\n  dist_sett_scaled +\n  remoteness_scaled +\n  (1 | id), data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_us &lt;- glmer(pres_abs ~\n  slope_scaled +\n  forest_prop_scaled +\n  dist_road_only_scaled +\n  dist_sett_scaled +\n  remoteness_scaled +\n  os_scaled +\n  (1 | id), data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_road &lt;- glmer(pres_abs ~\n  slope_scaled +\n  forest_prop_scaled +\n  dist_sett_scaled +\n  remoteness_scaled +\n  us_scaled +\n  os_scaled +\n  (1 | id), data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_forest &lt;- glmer(pres_abs ~\n  dist_road_only_scaled +\n  slope_scaled +\n  dist_sett_scaled +\n  remoteness_scaled +\n  us_scaled +\n  os_scaled +\n  (1 | id), data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_sett &lt;- glmer(pres_abs ~\n  dist_road_only_scaled +\n  slope_scaled +\n  forest_prop_scaled +\n  remoteness_scaled +\n  us_scaled +\n  os_scaled +\n  (1 | id), data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_slope &lt;- glmer(pres_abs ~\n  dist_road_only_scaled +\n  forest_prop_scaled +\n  remoteness_scaled +\n  dist_sett_scaled +\n  us_scaled +\n  os_scaled +\n  (1 | id), data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_remote &lt;- glmer(pres_abs ~\n  dist_road_only_scaled +\n  forest_prop_scaled +\n  slope_scaled +\n  dist_sett_scaled +\n  us_scaled +\n  os_scaled +\n  (1 | id), data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nbbmle::AICtab(m_day, m_os, m_us, m_road, m_forest, m_sett, m_slope, m_remote)\n##          dAIC  df\n## m_os       0.0 8 \n## m_slope    0.3 8 \n## m_sett     1.0 8 \n## m_day      1.7 9 \n## m_remote  12.5 8 \n## m_us      81.8 8 \n## m_road    98.1 8 \n## m_forest 139.5 8",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>BiEc6_N Modellgüte und -diagnostics MM</span>"
    ]
  },
  {
    "objectID": "fallstudie_n/6_Guete_und_Diagnostics.html#section",
    "href": "fallstudie_n/6_Guete_und_Diagnostics.html#section",
    "title": "BiEc6_N Modellgüte und -diagnostics MM",
    "section": "",
    "text": "Coppes, Joy, Judith Ehrlacher, Dominik Thiel, Rudi Suchant, und Veronika Braunisch. 2017. „Outdoor recreation causes effective habitat reduction in capercaillie Tetrao urogallus: a major threat for geographically restricted populations“. Journal of avian biology 48 (12): 1583–94.",
    "crumbs": [
      "Fallstudie N",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>BiEc6_N Modellgüte und -diagnostics MM</span>"
    ]
  },
  {
    "objectID": "References.html",
    "href": "References.html",
    "title": "Literaturverzeichnis",
    "section": "",
    "text": "Coppes, Joy, Judith Ehrlacher, Dominik Thiel, Rudi Suchant, and Veronika\nBraunisch. 2017. “Outdoor Recreation Causes Effective Habitat\nReduction in Capercaillie Tetrao Urogallus: A Major Threat for\nGeographically Restricted Populations.” Journal of Avian\nBiology 48 (12): 1583–94.\n\n\nGilgen, \"Kurt, and Alma Sartoris\". \"2010\". “\"Empfehlung Zur\nPlanung von Windenergieanlagen: Die Anwendung von\nRaumplanungsinstrumenten Und Kriterien Zur Standortwahl\".”\n\"Eidgenössisches Departement für Umwelt, Verkehr, Energie und\nKommunikation UVEK\".\n\n\nKovic, Marko. 2014. “Je Weniger Ausländer, Desto Mehr Ja-Stimmen?\nWirklich?” Tagesanzeiger Datenblog. https://blog.tagesanzeiger.ch/datenblog/index.php/668/je-weniger-auslaender-desto-mehr-ja-stimmen-wirklich.\n\n\nLo, Steson, and Sally Andrews. 2015. “To Transform or Not to\nTransform: Using Generalized Linear Mixed Models to Analyse Reaction\nTime Data.” Frontiers in Psychology 6. https://doi.org/10.3389/fpsyg.2015.01171.\n\n\n\"Scherler, Patrick\". \"2020\". “Drivers of Departure and Prospecting\nin Dispersing Juvenile Red Kites (Milvus Milvus).” PhD thesis,\n\"University of Zurich\".\n\n\nSchielzeth, Holger, Niels J Dingemanse, Shinichi Nakagawa, David F\nWestneat, Hassen Allegue, Céline Teplitsky, Denis Réale, Ned A\nDochtermann, László Zsolt Garamszegi, and Yimen G Araya-Ajoy. 2020.\n“Robustness of Linear Mixed-Effects Models to Violations of\nDistributional Assumptions.” Methods in Ecology and\nEvolution 11 (9): 1141–52.\n\n\nTegou, Leda-Ioanna, Heracles Polatidis, and Dias A. Haralambopoulos.\n2010. “Environmental Management Framework for Wind Farm Siting:\nMethodology and Case Study.” Journal of Environmental\nManagement 91 (11): 2134–47. https://doi.org/10.1016/j.jenvman.2010.05.010.\n\n\nWickham, Hadley, and Garrett Grolemund. 2017. R for Data\nScience. O’Reilly. https://ebookcentral.proquest.com/lib/zhaw/detail.action?docID=4770093.",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Literaturverzeichnis</span>"
    ]
  },
  {
    "objectID": "PrePro.html",
    "href": "PrePro.html",
    "title": "Pre-Processing",
    "section": "",
    "text": "Die Datenkunde 2.0 gibt den Studierenden das Wissen und die Fertigkeiten an die Hand, selbst erhobene und bezogene Daten für Ihre eigenen Analysen vorzubereiten und anzureichern (preprocessing). Die Einheit vermittelt zentrale Datenverarbeitungskompetenzen und thematisiert bekannte Problemzonen der umweltwissenschaftlichen Datenverarbeitung – immer mit einer „hands-on” Perspektive auf die begleitenden R-Übungen. Die Studierenden lernen die Eigenschaften ihrer Datensätze in der Fachsprache korrekt zu beschreiben. Sie lernen ausserdem Metadaten zu verstehen und die Implikationen derselben für ihre eigenen Analyseprojekte kritisch zu beurteilen. Zentrale Konzepte der lesson sind Skalenniveaus, Datentypen, Zeitdaten und Typumwandlungen.\nDie Lesson vermittelt zentralste Fertigkeiten zur Vorverarbeitung von strukturierten Daten in der umweltwissenschaftlichen Forschung: Datensätze verbinden (Joins) und umformen („reshape”, „split-apply-combine”). Im Anwendungskontext haben Daten selten von Anfang an diejenige Struktur, welche für die statistische Auswertung oder für die Informationsvisualisierung erforderlich wäre. In dieser lesson lernen die Studierenden die für diese oft zeitraubenden Preprocessing-Schritte notwendigen Konzepte und R-Werkzeuge kennen und kompetent anzuwenden.",
    "crumbs": [
      "Pre-Processing"
    ]
  },
  {
    "objectID": "InfoVis.html",
    "href": "InfoVis.html",
    "title": "InfoVis",
    "section": "",
    "text": "Infovis 1\nDie konventionelle schliessende Statistik arbeitet in der Regel konfirmatorisch, sprich aus der bestehenden Theorie heraus werden Hypothesen formuliert, welche sodann durch Experimente geprüft und akzeptiert oder verworfen werden. Die Explorative Datenanalyse (EDA) nimmt dazu eine antagonistische Analyseperspektive ein und will in den Daten zunächst Zusammenhänge aufdecken, welche dann wiederum zur Formulierung von prüfbaren Hypothesen führen kann. Die Einheit stellt dazu den klassischen 5-stufigen EDA-Prozess nach Tukey (1980!) vor. Abschliessend wird dann noch die Brücke geschlagen zur modernen Umsetzung der EDA in Form von Visual Analytics.",
    "crumbs": [
      "InfoVis"
    ]
  },
  {
    "objectID": "InfoVis.html#infovis-2",
    "href": "InfoVis.html#infovis-2",
    "title": "InfoVis",
    "section": "Infovis 2",
    "text": "Infovis 2\nDie Informationsvisualisierung ist eine vielseitige, effektive und effiziente Methode für die explorative Datenanalyse. Während Scatterplots und Histogramme weitherum bekannt sind, bieten weniger bekannte Informationsvisualisierungs-Typen wie etwa Parallelkoordinatenplots, TreeMaps oder Chorddiagramme originelle alternative Darstellungsformen zur visuellen Analyse von Datensätze, welche stets grösser und komplexer werden. Die Studierenden lernen in dieser lesson eine Reihe von Informationsvisualisierungstypen kennen, lernen diese zielführend zu gestalten und selber zu erstellen.",
    "crumbs": [
      "InfoVis"
    ]
  }
]