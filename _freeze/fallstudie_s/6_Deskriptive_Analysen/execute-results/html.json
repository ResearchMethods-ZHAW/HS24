{
  "hash": "aa5e8539561a859a32318c52b4f3c627",
  "result": {
    "markdown": "---\ndate: 2023-10-23\nlesson: Deskriptive Analysen\nthema: Explorativ / Beschreibend\nindex: 2\nexecute: \n  echo: true   # set to true to show musterlösung\n  output: false\ncode-fold: true\ncode-summary: \"Musterlösung\"\nknitr:\n  opts_chunk: \n    collapse: true\n---\n\n\n# Deskriptive Analysen\n\n\n\n\n\n## Aufgabe 1: Verlauf der Besuchszahlen nach Monat\n\n### 1a)\n\nNachdem wir die Projektstruktur aufgebaut haben und die Daten vorbereitet (inkl. aggregiert) sind, machen wir uns an die deskriptive Analyse. Dies macht immer Sinn. Bevor mach sich an die schliessende Statistik macht, muss man ein \"Gefühl\" für die Daten bekommen. Dies funktioniert am einfachsten mit explorativen Analysen.\n\nWir interessieren uns in den Analysen für 5 Zeitabschnitte:\n\n1. von Anfang Untersuchungsperiode bis vor dem 1. Lockdown (pre)\n2. Lockdown 1\n3. Zwischen beiden Lockdowns\n4. Lockdown 2\n5. Ende 2. Lockdown bis Ende Untersuchungsperiode\n\n- Plottet den Verlauf der monatlichen Besuchszahlen an eurer Zählstelle. Auf der x-Achse steht dabei dabei Jahr und Monat (gespeichert im df _depo_m_), auf der y-Achse die monatlichen Besuchszahlen. Zeichnet auch die beiden Lockdown ein (Hinweis: rundet das Start- und Enddatum der Lockdowns auf den Monat, da im Plot die monatlichen Zahlen gezeigt werden).\n\nHaltet euch dabei an untenstehenden Plot:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](6_Deskriptive_Analysen_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(depo_m, mapping = aes(Ym, Total, group = 1)) + # group = 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird\n  # zeichne Lockdown 1\n  geom_rect(\n    mapping = aes(\n      xmin = ym(\"2020-3\"), xmax = ym(\"2020-5\"),\n      ymin = 0, ymax = max(Total + (Total / 100 * 10))),\n    fill = \"lightskyblue\", alpha = 0.2, colour = NA) +\n  # zeichne Lockdown 2\n  geom_rect(\n    mapping = aes(\n      xmin = ym(\"2020-12\"), xmax = ym(\"2021-3\"),\n      ymin = 0, ymax = max(Total + (Total / 100 * 10))),\n    fill = \"darkolivegreen2\", alpha = 0.2, colour = NA) +\n  geom_line(alpha = 0.6, linewidth = 1) +\n  scale_x_date(date_labels = \"%b%y\", date_breaks = \"6 months\") +\n  labs(title = \"\", y = \"Fussgänger:innen pro Monat\", x = \"Jahr\") +\n  theme_classic(base_size = 15) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n```\n:::\n\n\n__Hinweis:__ \n- Nutzt zum plotten __ggplot()__\n- folgende Codeschnipsel helfen euch:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = depo_m, mapping = aes(Ym, Total, group = 1)) + # group 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird\n    # zeichne Lockdown 1; ein einfaches Rechteck. bestimme mit min und max die Dimensionen\n  geom_rect(\n    mapping = aes(\n      xmin = ym(\"2020-3\"), xmax = ym(\"2020-5\"),\n      ymin = 0, ymax = max(Total + (Total / 100 * 10))\n    ), # das Rechteck soll 10 % grösser als die maximale Besuchszahl sein\n    fill = \"lightskyblue\", alpha = 0.2, colour = NA\n  ) +\n  # zeichne Lockdown 2\n  ... +\n  # zeichne die Linie\n  geom_line(...) +\n  scale_x_date(...)+\n  theme_linedraw(base_size = 15) +\n  ...\n```\n:::\n\n\n- Exportiert euren Plot mit __ggsave()__ nach __results__. Breite = 20, Höhe = 10, Einheiten = cm, dpi = 1000\n\n### 1b)\n\nDer erste Plot zeigt sehr einfach, wie sich die Besuchszahlen allgemein entwickelt haben. Interessant ist aber auch, wie sie während den einzelnen Monaten zueinander stehen (z.B. \"Waren im Mai 2020 mehr Menschen unterwegs als im Mai 2017?\"). Dies zeigt uns folgender Plot:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](6_Deskriptive_Analysen_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(depo_m, aes(Monat, Total, group = Jahr, color = Jahr, linetype = Jahr)) +\n  geom_line(size = 2) +\n  geom_point() +\n  scale_colour_viridis_d() +\n  scale_linetype_manual(values = c(rep(\"solid\", 3), \"twodash\", \"twodash\", \"solid\")) +\n  scale_x_discrete(breaks = c(seq(0, 12, by = 1))) +\n  geom_vline(xintercept = c(seq(1, 12, by = 1)), linetype = \"dashed\", color = \"gray\") +\n  labs(title = \"\", y = \"Fussgänger:innen pro Monat\", x = \"Monat\") +\n  theme_classic(base_size = 15) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n```\n:::\n\n\n- Erstellt diesen Plot und speichert ihn.\n\n__Hinweis:__ Dieser Plot wird erstellt mit dem Argument _group_, _linetype_ und _color_ innerhalb des _aes()__ Arguments. __geom_line()__ wiederum zeichnet die Linien.\n\n\n### 1c)\n\nUnser Fokus liegt auf der dunklen Tageszeit. Wie verteilen sich die Besuchenden also auf Morgen, Tag, Abend und Nacht?\n\n- Folgender Plot zeigt das. Erstellt und speichert ihn.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](6_Deskriptive_Analysen_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) +\n  geom_area(position = \"fill\", alpha = 0.8) +\n  scale_fill_manual(values = mycolors) +\n  scale_x_date(date_labels = \"%b%y\", date_breaks = \"6 months\", \n               limits = c(min(depo_m_daytime$Ym), max = max(depo_m_daytime$Ym)), expand = c(0, 0)) +\n  geom_vline(xintercept = seq(as.Date(min(depo_m_daytime$Ym)), as.Date(max(depo_m_daytime$Ym)), \n                              by = \"6 months\"), linetype = \"dashed\", color = \"black\")+\n  theme_classic(base_size = 15) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), \n        legend.position = \"bottom\") +\n  labs(title = \"\", y = \"Verteilung Fussgänger:innen / Monat [%]\", x = \"Jahr\")\n```\n:::\n\n\nFolgende Codeschnipsel helfen euch:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) +\n  geom_area(...) +\n  scale_x_date(date_labels = \"%b%y\", date_breaks = \"6 months\", \n               limits = c(min(depo_m_daytime$Ym), max = max(depo_m_daytime$Ym)), expand = c(0, 0)) +\n  geom_vline(xintercept = seq(as.Date(min(depo_m_daytime$Ym)), as.Date(max(depo_m_daytime$Ym)), \n                              by = \"6 months\"), linetype = \"dashed\", color = \"black\")+\n  ...\n```\n:::\n\n\n\n\n## Aufgabe 2: Wochengang\n\nNun möchten wir genauer untersuchen, wie sich die Besuchszahlen je nach Phase (Pre, Normal, Lockdown 1, Lockdown 2 und Covid) auf die __Wochentage und Tageszeiten__ verteilen. \n\n\n### 2a)\n\n- Erstellt dazu einen Violinplot nach untenstehender Vorgabe. Was sagt uns dieser komplexe Plot?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](6_Deskriptive_Analysen_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = depo, aes(x = Wochentag, y = Total, fill = Tageszeit)) +\n  geom_violin() +\n  labs(title = \"\", y = \"Fussgänger:innen pro Tag\") +\n  facet_grid(cols = vars(Tageszeit), rows = vars(Phase))+\n  scale_y_log10()+\n  scale_fill_manual(values = mycolors) +\n  theme_classic(base_size = 15) +\n  theme(\n    panel.background = element_rect(fill = NA, color = \"black\"),\n    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),\n    legend.title = element_blank(), \n    legend.position = \"none\")\n```\n:::\n\n\n__Hinweis:__ \n- Nutzt zum plotten __ggplot()__\n- folgende Codeschnipsel helfen euch:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = depo, aes(x = Wochentag, y = Total, fill = Tageszeit)) +\n  geom_violin() +\n  facet_grid(cols = vars(...), rows = vars(...))+\n  scale_y_log10()+ \n  ...\n```\n:::\n\n\n- Warum macht es Sinn, hier die y-Achse zu logarithmieren?\n- Exportiert auch diesen Plot mit __ggsave()__. Welche Breite und Höhe passt hier?\n\n### 2b)\n\nIst euch aufgefallen, dass in meinen Daten während dem ersten Lockdown in der Nacht keine Leuten unterwegs waren? Nun könnte man also sagen: \"Ja gut, der Lockdown 1 war verglichen mit Pre ja deutlich kürzer und es macht keinen Sinn hier die absoluten Zahlen darzustellen\". Stimmt. Darum berechnen wir noch den Durchschnitt pro Phase und Tageszeit.\n\n- Berechnet:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_phase <- depo_daytime |>\n  group_by(Phase, Tageszeit) |>\n  summarise(\n    Mean = mean(Total))\n```\n:::\n\n\n- Plottet:\n\n::: {.cell}\n::: {.cell-output-display}\n![](6_Deskriptive_Analysen_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mean_phase, aes(Tageszeit, Mean, fill = Phase))+\n  geom_col(position = \"dodge\", color = \"black\") +\n  scale_fill_viridis_d() +\n  labs(title = \"\", y = \"Durchschnitt Fussgänger:innen pro Tag\") +\n  # scale_fill_manual(values = mycolors) +\n  theme_classic(base_size = 15) +\n  theme(legend.position = \"bottom\")\n```\n:::\n\n\n\n## Aufgabe 3: Tagesgang\n\nVom Grossen zum Kleinen, von der Übersicht ins Detail. Jetzt widmen wir uns dem Tagesgang, das heisst der Verteilung der Besuchenden auf die 24 Tagesstunden je nach Phase.\n\n### 3a)\n\n- Berechnet zuerst den Mittelwert der totalen Besuchszahlen __pro Wochentag, pro Stunde pro Phase__ und speichert das df unter __Mean_h__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMean_h <- depo |>\n  group_by(Wochentag, Stunde, Phase) |>\n  summarise(Total = mean(Total))\n```\n:::\n\n\nVergewissert euch vor dem Plotten, dass der Datensatz im long-Format vorliegt.\n\n### 3b)\n\n- Plottet den Tagesgang, unterteilt nach den 7 Wochentagen nun für unsere Phasen.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](6_Deskriptive_Analysen_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag)) +\n  geom_line(size = 1) +\n  scale_colour_viridis_d() +\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\")) +\n  scale_x_continuous(breaks = c(seq(0, 23, by = 1)), labels = c(seq(0, 23, by = 1))) +\n  facet_grid(rows = vars(Phase)) +\n  labs(x = \"Uhrzeit [h]\", y = \"Durchscnnitt Fussganger_Innen / h\", title = \"\") +\n  lims(y = c(0, 25)) +\n  theme_linedraw(base_size = 15) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n```\n:::\n\n\n__Hinweis:__ \n- Nutzt zum plotten __ggplot()__\n- folgende Codeschnipsel helfen euch:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag)) +\n  geom_line(...) +\n  facet_grid(...)\n...\n```\n:::\n\n\n## Aufgabe 4: Kennzahlen\n\nBis hier hin haben wir in diesem Kapitel v.a. visuell gearbeitet. Für den Bericht kann es aber sinnvoll sein, auch einige Kennzahlen in der Hinterhand zu haben. Wir haben das bereits im Kapitel [Datenverarbeitung] berechnet. \n\n- Reflektiert, welche Zahlen ihr habe und was für den Bericht spannend sein könnte, resp. eure Abbildungen unterstützt oder ergänzt.\n\n",
    "supporting": [
      "6_Deskriptive_Analysen_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}